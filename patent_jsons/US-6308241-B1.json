{"patent_number": "US-6308241-B1", "publication_id": 72813950, "family_id": 25542249, "publication_date": "2001-10-23", "titles": [{"lang": "EN", "text": "On-chip cache file register for minimizing CPU idle cycles during cache refills"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA72630521\"><p>A CPU has an execution unit for operating on data under instruction control. A cache and a buffer register are coupled in parallel to an input of the execution unit. The buffer register supplies an information item, such as data or an instruction, to the execution unit upon the cache having completed a refill process.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6308241-B1-CLM-00001\" num=\"1\"><claim-text>1. An electronic circuit for reducing the number of idle CPU cycles resulting from a cache read miss to a specified address for a desired information item, comprising a CPU having:</claim-text><claim-text>an input for receipt from memory of the desired information item corresponding to the specified address; </claim-text><claim-text>an execution unit for processing the desired information item; </claim-text><claim-text>an address-controlled cache between the input and the execution unit for storing the desired information item in association with its address; </claim-text><claim-text>a register that is not address-controlled between the input and the execution unit for temporarily storing the desired information item without its address only while the desired information is refilling into said cache; and </claim-text><claim-text>a register controller connected to the register for storing the desired information item in the register and for supplying the desired information item to the execution unit from the register only during said refilling into said cache in order thereby to reduce the number of idle CPU cycles resulting from the cache read miss. </claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6308241-B1-CLM-00002\" num=\"2\"><claim-text>2. The circuit of claim <b>1</b>, wherein the buffer controller comprises a cache controller.</claim-text></claim>"}, {"num": 3, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6308241-B1-CLM-00003\" num=\"3\"><claim-text>3. The circuit of claim <b>1</b>, wherein the cache comprises a data cache.</claim-text></claim>"}, {"num": 4, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6308241-B1-CLM-00004\" num=\"4\"><claim-text>4. The circuit of claim <b>1</b>, wherein the cache comprises an instruction cache.</claim-text></claim>"}, {"num": 5, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6308241-B1-CLM-00005\" num=\"5\"><claim-text>5. An electronic circuit for reducing the number of idle CPU cycles resulting from a cache read miss to a specified address for a desired information item, comprising a CPU having:</claim-text><claim-text>a data input for receipt of data; </claim-text><claim-text>an instruction input for receipt of instructions; </claim-text><claim-text>an execution unit for processing the data under control of the instructions; </claim-text><claim-text>an address-controlled data cache between the data input and the execution unit for storing the data in association with addresses of the data; </claim-text><claim-text>a data register that is not address-controlled between the data input and the execution unit for temporarily storing a datum received in response to a data cache read miss without also storing the address of the datum in the data register and only while said received datum is refilling into said data cache; </claim-text><claim-text>a data register controller connected to the data register for storing the datum in the data register and for supplying the datum to the execution unit from the data register only during said refilling into said data cache in order thereby to reduce the number of idle CPU cycles resulting from the data cache read miss; </claim-text><claim-text>an address-controlled instruction cache between the instruction input and the execution unit for storing the instructions in association with addresses of the instructions; </claim-text><claim-text>an instruction register that is not address-controlled between the instruction input and the execution unit for temporarily storing an instruction received in response to an instruction cache read miss without also storing an address of the received instruction in the instruction register and only while said received instruction is refilling into said instruction cache; and </claim-text><claim-text>an instruction register controller connected to the instruction register for storing the received instruction in the instruction register and for supplying the received instruction to the execution unit from the instruction register only during said refilling into said instruction cache in order thereby to reduce the number of idle CPU cycles resulting from the instruction cache read miss. </claim-text></claim>"}, {"num": 6, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6308241-B1-CLM-00006\" num=\"6\"><claim-text>6. A method of information processing with an electronic circuit for reducing the number of idle CPU cycles resulting from a cache read miss, the electronic circuit having an address-controlled cache and an execution unit for processing a desired information item that read misses in the cache, the method comprising the steps of temporarily storing the desired information item in a register that is not address-controlled only during cache refill processing of the desired information item without also storing an address of the desired information item in the register and supplying the desired information item to the execution unit from the resister only during said cache refill processing in order to reduce the number of idle CPU cycles thereby.</claim-text></claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES54743768\"><?BRFSUM description=\"Brief Summary\" end=\"lead\"?><h4>FIELD OF THE INVENTION</h4><p>The invention relates to an electronic circuit comprising a CPU with a cache. The invention also relates to a method of supplying an information item, such as data or an instruction, to an execution unit of a CPU.</p><h4>BACKGROUND ART</h4><p>A CPU typically has one or more cache memories arranged between the data and instruction inputs of its execution unit on the one hand and the port for connection to main memory. The caches compensate for the difference in speed between the processing in the CPU and the fetching of data and instructions from main memory. The successful operation of the cache relies on the locality principle: program references to memory tend to be clustered in time and in logical space. Temporal clustering relates to the tendency to reference the same address more than once within a specific period of time. Spatial clustering relates to the tendency to fetch data or instructions from logically consecutive memory addresses. The data and instructions in the main memory are mapped into the cache in blocks of logically coherent addresses. Below, the term \u201cinformation item\u201d is used to refer to either data or an instruction within this context.</p><p>A cache read miss occurs when the CPU requests an information item that is not present in its cache. The cache has thereupon to retrieve the appropriate block from the main memory or the secondary cache and store it. During this cache refill, the execution unit is stalled. Various techniques are in use to minimize the number of clock cycles that the execution unit has to idle as a result of a cache refill.</p><p>For example, European patent application 0 543 487 A1 discusses the early-restart technique. As soon as the requested item arrives from main memory it is sent to the execution unit without waiting for completion of the writing of the entire block to the cache. A refinement of this early-restart is the out-of-order fetch. The out-of-order fetch lets the main memory skip all information items located at addresses logically preceding the requested item in the relevant block. The requested item is sent directly to the execution unit upon retrieval while the remainder of the block is being retrieved looping around to fetch the items previously skipped.</p><p>European patent application 0 543 487 A1 also discusses an alternative technique that involves the following steps. If the CPU fetches data during a data cache fill and the requested data being fetched is part of the memory block being currently filled, the data is retrieved and returned to the execution unit simultaneously with its writing into the cache, if the data has not been written into the cache. If the data has been written into the cache, the data is retrieved and returned to the execution unit at the next read cycle.</p><p>Also see, e.g., \u201cMIPS RISC Architecture\u201d, Gerry Kane and Joe Heinrich, Prentice Hall, 1992, notably Chapter 5, page 5-5. In the implementations of MIPS processor architectures, e.g., the R2000 and R3000, a typical sequence of events occurring after a cache miss are the following. On a cache miss, the processor reads one word from memory and stalls while the designated blocks in the cache are refilled. After the refill has been completed, missed information items are retrieved from the cache and are supplied to the processor's execution unit to resume processing. For general background information on the MIPS architecture, also see, e.g., \u201cStructured Computer Organization\u201d, A. S. Tanenbaum, Prentice Hall International Editions, third edition, 1990, especially pp. 472-487.</p><h4>OBJECT OF THE INVENTION</h4><p>The advantages of early restart are limited if the execution unit processes the requested item faster than the cache can complete the refill. In the latter case, the execution has to idle after processing the item that was received directly until the cache has been refilled.</p><p>The alternative technique in the prior art reference discussed above addresses the problem of reducing the number of idle cycles of the execution unit while the cache is being refilled. This prior art reference does not address the problem of reducing the number of idle cycles when the refill has been, or nearly has been, completed. It is an object of the invention to increase performance of the processor by reducing the number of idle cycles substantially near completion of the cache refill.</p><h4>SUMMARY OF THE INVENTION</h4><p>To this end, the invention provides an electronic circuit comprising a CPU, an input for receipt of an information item, and a cache between the input and an execution unit of the CPU. The execution unit is operative to process the item. The circuit further comprises a buffer between the input and the execution unit, and a controller connected to the buffer. The controller controls the storing of the information item in the buffer and the supply of the item to the execution unit substantially near completion of a cache refill.</p><p>The inventor proposes to use a temporary buffer in order to prevent the CPU from idling at least during the step wherein an item is being retrieved from the cache upon completion of the refill. The item is provided from the buffer instead of from the cache near completion of the refill. In this way, at least one clock cycle is saved per cache miss, since the buffer register is not address-controlled like a cache.</p><p>The circuit of the invention can use the buffer in combination with a main memory capable of early-restart and out-of-order fetch as mentioned above. The early restart/out-of-order fetch allows reducing the number of CPU idling cycles preceding the cache refill, and the buffer register in the invention reduces the number of CPU idling cycles after the cache has been refilled or has nearly completed refilling.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4><p>The invention is explained below in further detail and by way of example with reference to the accompanying drawings, wherein:</p><p>FIG. 1 is a block diagram of a circuit of the invention; and</p><p>FIG. 2 is a diagram illustrating part of a cache controller's finite state machine.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>PREFERRED EMBODIMENTS</h4><p>FIG. 1 is a functional block diagram with main components of an electronic circuit <b>100</b> according to the invention. Circuit <b>100</b> comprises a CPU <b>102</b>, a bus controller <b>104</b> and a main memory <b>106</b> interconnected via a bus <b>108</b>. CPU <b>102</b> has a bus interface <b>110</b>, an execution unit <b>112</b>, an instruction cache <b>114</b>, a data cache <b>116</b>, an instruction cache controller <b>118</b> and a data cache controller <b>120</b> for control of caches <b>114</b> and <b>116</b>, respectively. CPU <b>102</b> further comprises a buffer register <b>122</b>. In this example, buffer <b>122</b> and data cache <b>116</b> are arranged in parallel between controller <b>120</b> and unit <b>112</b>. Buffer <b>122</b> and cache <b>116</b> are coupled to a data input of unit <b>112</b> via a multiplexer <b>124</b> that is controlled by controller <b>120</b>.</p><p>Controller <b>120</b> controls buffer <b>122</b> to store data so that it can be supplied to execution unit <b>112</b> substantially at or near completion of a refill of cache <b>110</b> upon a read miss. In this manner, at least one clock cycle is saved during which unit <b>112</b> needs not idle. Buffer <b>122</b> supplies one or more data items to unit <b>112</b>, e.g., when cache <b>116</b> is preparing for the first read cycle after the refill. The cache read cycle and the supply via buffer register <b>122</b> thus overlap in time.</p><p>Buffer <b>122</b> stores at least the data that was requested by CPU <b>102</b> and that caused the cache read miss. Buffer <b>122</b> may also store further data items at the addresses logically successive to the address of the requested data. Cache <b>116</b> also stores the requested data and the logically next data in order to comply with the cache's locality principle mentioned above.</p><p>The instruction path between cache <b>114</b> and unit <b>112</b> contains a similar buffer <b>126</b> and multiplexer <b>128</b> arrangement as the data path between cache <b>116</b> and unit <b>112</b> and it is controlled by instruction cache controller <b>118</b> in a similar way. Typically, the sequence of instructions during processing is known in advance. Conditional branching operations may occur in some software applications, but between two branching instructions the instruction stream is linear and known. If the buffer is a FIFO and stores two or more instructions, the supply of sequential instructions to unit <b>112</b> could start from buffer <b>126</b> before completion of the instruction cache refill and the start of the cache read cycle, or even substantially well before the completion of the instruction cache refill. To this end, controller <b>118</b> has to keep track of extent to which the address block has been mapped from main memory <b>106</b> to cache <b>114</b>.</p><p>FIG. 2 is a diagram of a part of a finite state machine <b>200</b> in cache controller <b>120</b>. State machine <b>200</b> is explained in the following.</p><p>A stall cycle in a pipelines processor such as the MIPS 3000 is a cycle wherein the CPU waits for some event without doing useful work. For background information on the pipeline in the MIPS 3000, see, e.g., \u201cMIPS RISC Architecture\u201d, Gerry Kane and Joe Heinrich, Prentice Hall, 1992, especially Chapter 1. The invention reduces the number of stall cycles upon a cache miss. In the MIPS 3000 the sequence of events upon a cache miss is the following. First, the designated blocks in the cache are refilled. Then, after the refill is completed, missed data is read from the cache and supplied to the execution unit. During both the refill phase and the cache read phase, the execution units is stalled. In the invention, however, execution unit <b>112</b> is not stalled during the cache read phase. Read data is stored temporarily in buffer <b>122</b> during the refill and is supplied to execution unit from buffer <b>122</b> and not from cache <b>116</b>. In this manner at least one clock cycle is saved per individual cache miss. This is illustrated by state machine <b>200</b> that comprises the following transitions. Transition <b>202</b> from \u201cread\u201dto \u201crefill\u201d corresponds to a cache miss. Transition <b>204</b> from \u201cread\u201d to \u201cnon-cache\u201d corresponds to a non-cacheable access to main memory (or secondary cache) <b>106</b>. Transition <b>206</b> between \u201crefill\u201d and \u201cwait\u201d corresponds to the refill being completed and the execution unit not being ready yet. Transition <b>4</b> between \u201cnon-cache\u201d and \u201cwait\u201d corresponds to a non-cacheable word being fetched from main memory <b>106</b>, and execution unit <b>112</b> not being ready yet to accept it. Transition <b>210</b> between \u201crefill\u201d and \u201cread\u201d corresponds to the refill being completed and execution unit <b>112</b> being ready. Transition <b>212</b> between \u201cnon-cache\u201d and \u201cread\u201d corresponds to a non-cacheable word being fetched from main memory and execution unit <b>112</b> being ready. Transition <b>214</b> between \u201cwait\u201d and \u201cread\u201d corresponds to execution unit <b>112</b> being ready to accept the data. During the \u201crefill\u201dand \u201cnon-cache\u201d states CPU <b>102</b> places the requested data in buffer <b>122</b> and communicates the data to execution unit <b>112</b> during transitions <b>210</b>, <b>212</b> and <b>214</b>.</p><?DETDESC description=\"Detailed Description\" end=\"tail\"?></description>"}], "inventors": [{"first_name": "Slobodan", "last_name": "Simovich", "name": ""}, {"first_name": "Brad E.", "last_name": "Eltman", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "U.S. PHILIPS CORPORATION"}, {"first_name": "", "last_name": "INTELLECTUAL VENTURES ASSETS 158 LLC", "name": ""}, {"first_name": "", "last_name": "HANGER SOLUTIONS, LLC", "name": ""}, {"first_name": "", "last_name": "CALLAHAN CELLULAR L.L.C.", "name": ""}, {"first_name": "", "last_name": "NXP B.V.", "name": ""}, {"first_name": "", "last_name": "U.S. PHILIPS CORPORATION", "name": ""}], "ipc_classes": [{"primary": true, "label": "G06F  12/00"}, {"primary": false, "label": "G06F   9/00"}, {"primary": false, "label": "G06F  15/00"}, {"primary": false, "label": "G06F   3/00"}], "locarno_classes": [], "ipcr_classes": [{"label": "G06F  12/08        20060101A I20051008RMIB"}, {"label": "G06F   9/38        20060101A I20051008RMEP"}], "national_classes": [{"primary": true, "label": "711118"}, {"primary": false, "label": "711003"}, {"primary": false, "label": "712E09047"}, {"primary": false, "label": "711E12051"}, {"primary": false, "label": "712E09046"}, {"primary": false, "label": "712220"}, {"primary": false, "label": "710053"}, {"primary": false, "label": "711123"}, {"primary": false, "label": "712001"}, {"primary": false, "label": "710052"}], "ecla_classes": [{"label": "G06F  12/08B6P4"}, {"label": "G06F   9/38D2"}, {"label": "G06F   9/38D"}], "cpc_classes": [{"label": "G06F   9/383"}, {"label": "G06F  12/0875"}, {"label": "G06F   9/3824"}, {"label": "G06F  12/0859"}, {"label": "G06F   9/383"}, {"label": "G06F   9/3824"}, {"label": "G06F   9/3004"}, {"label": "G06F  12/0859"}, {"label": "G06F   9/383"}, {"label": "G06F   9/3814"}], "f_term_classes": [], "legal_status": "Expired - Lifetime", "priority_date": "1997-12-22", "application_date": "1997-12-22", "family_members": [{"ucid": "CN-1252143-A", "titles": [{"lang": "EN", "text": "Extra register minimizes CPU idle cycles during cache refill"}, {"lang": "ZH", "text": "\u9644\u52a0\u5bc4\u5b58\u5668\u51cf\u5c11\u8d85\u9ad8\u901f\u7f13\u5b58\u518d\u5145\u586b\u671f\u95f4\u7684CPU\u7a7a\u95f2\u5468\u671f"}]}, {"ucid": "KR-20000075564-A", "titles": [{"lang": "EN", "text": "EXTRA REGISTER MINIMIZES CPU IDLE CYCLES DURING CACHE REFILL"}, {"lang": "KO", "text": "\uc911\uc559 \ucc98\ub9ac \uc7a5\uce58\ub97c \ud3ec\ud568\ud558\ub294 \uc804\uc790 \ud68c\ub85c"}]}, {"ucid": "EP-0968470-A1", "titles": [{"lang": "FR", "text": "REGISTRE SUPPLEMENTAIRE MINIMISANT LES CYCLES D'INACTIVITE DE L'UC PENDANT LA RECHARGE DE L'ANTEMEMOIRE"}, {"lang": "DE", "text": "ZUS\u00c4TZLICHES REGISTER ZUR MINIMIERUNG DER CPU-LEERLAUFZYKLEN W\u00c4HREND DER CACHE NACHF\u00dcLLUNG"}, {"lang": "EN", "text": "EXTRA REGISTER MINIMIZES CPU IDLE CYCLES DURING CACHE REFILL"}]}, {"ucid": "US-6308241-B1", "titles": [{"lang": "EN", "text": "On-chip cache file register for minimizing CPU idle cycles during cache refills"}]}, {"ucid": "CN-1133932-C", "titles": [{"lang": "ZH", "text": "\u9644\u52a0\u5bc4\u5b58\u5668\u51cf\u5c11\u8d85\u9ad8\u901f\u7f13\u5b58\u518d\u5145\u586b\u671f\u95f4\u7684CPU\u7a7a\u95f2\u5468\u671f"}, {"lang": "EN", "text": "Extra register minimizes CPU idle cycles during cache refill"}]}, {"ucid": "KR-100618057-B1", "titles": [{"lang": "KO", "text": "\uc804\uc790 \ud68c\ub85c \ubc0f \uc804\uc790 \ud68c\ub85c\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc815\ubcf4\ub97c \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95"}, {"lang": "EN", "text": "EXTRA REGISTER MINIMIZES CPU IDLE CYCLES DURING CACHE REFILL"}]}, {"ucid": "DE-69813196-T2", "titles": [{"lang": "EN", "text": "ADDITIONAL REGISTER TO MINIMIZE CPU IDLE CYCLES DURING CACHE REFILL"}, {"lang": "DE", "text": "ZUS\u00c4TZLICHES REGISTER ZUR MINIMIERUNG DER CPU-LEERLAUFZYKLEN W\u00c4HREND DER CACHE NACHF\u00dcLLUNG"}]}, {"ucid": "WO-1999032979-A1", "titles": [{"lang": "FR", "text": "REGISTRE SUPPLEMENTAIRE MINIMISANT LES CYCLES RALENTIS DE L'UC PENDANT LA RECHARGE DE L'ANTEMEMOIRE"}, {"lang": "EN", "text": "EXTRA REGISTER MINIMIZES CPU IDLE CYCLES DURING CACHE REFILL"}]}, {"ucid": "JP-2001513933-A", "titles": [{"lang": "JA", "text": "\u30ad\u30e3\u30c3\u30b7\u30e5\u518d\u5145\u586b\u4e2d\u306e\uff23\uff30\uff35\u30a2\u30a4\u30c9\u30eb\u30b5\u30a4\u30af\u30eb\u3092\u6700\u5c0f\u306b\u3059\u308b\u8ffd\u52a0\u306e\u30ec\u30b8\u30b9\u30bf"}, {"lang": "EN", "text": "Additional registers to minimize CPU idle cycles during cache refill"}]}, {"ucid": "EP-0968470-B1", "titles": [{"lang": "FR", "text": "REGISTRE SUPPLEMENTAIRE MINIMISANT LES CYCLES D'INACTIVITE DE L'UC PENDANT LA RECHARGE DE L'ANTEMEMOIRE"}, {"lang": "EN", "text": "EXTRA REGISTER MINIMIZES CPU IDLE CYCLES DURING CACHE REFILL"}, {"lang": "DE", "text": "ZUS\u00c4TZLICHES REGISTER ZUR MINIMIERUNG DER CPU-LEERLAUFZYKLEN W\u00c4HREND DER CACHE NACHF\u00dcLLUNG"}]}, {"ucid": "DE-69813196-D1", "titles": [{"lang": "EN", "text": "ADDITIONAL REGISTER TO MINIMIZE CPU IDLE CYCLES DURING CACHE REFILL"}, {"lang": "DE", "text": "ZUS\u00c4TZLICHES REGISTER ZUR MINIMIERUNG DER CPU-LEERLAUFZYKLEN W\u00c4HREND DER CACHE NACHF\u00dcLLUNG"}]}]}