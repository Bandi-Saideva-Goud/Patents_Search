{"patent_number": "US-6279107-B1", "publication_id": 72774028, "family_id": 25499819, "publication_date": "2001-08-21", "titles": [{"lang": "EN", "text": "Branch selectors associated with byte ranges within an instruction cache for rapidly identifying branch predictions"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"docdb\" mxw-id=\"PA11234082\" source=\"national office\"><p>A branch prediction unit stores a set of branch selectors corresponding to each of a group of contiguous instruction bytes stored in an instruction cache. Each branch selector identifies the branch prediction to be selected if a fetch address corresponding to that branch selector is presented. In order to minimize the number of branch selectors stored for a group of contiguous instruction bytes, the group is divided into multiple byte ranges. The largest byte range may include a number of bytes comprising the shortest branch instruction in the instruction set (exclusive of the return instruction). For example, the shortest branch instruction may be two bytes in one embodiment. Therefore, the largest byte range is two bytes in the example. Since the branch selectors as a group change value (i.e. indicate a different branch instruction) only at the end byte of a predicted-taken branch instruction, fewer branch selectors may be stored than the number of bytes within the group.</p></abstract>"}, {"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA72602570\"><p>A branch prediction unit stores a set of branch selectors corresponding to each of a group of contiguous instruction bytes stored in an instruction cache. Each branch selector identifies the branch prediction to be selected if a fetch address corresponding to that branch selector is presented. In order to minimize the number of branch selectors stored for a group of contiguous instruction bytes, the group is divided into multiple byte ranges. The largest byte range may include a number of bytes comprising the shortest branch instruction in the instruction set (exclusive of the return instruction). For example, the shortest branch instruction may be two bytes in one embodiment. Therefore, the largest byte range is two bytes in the example. Since the branch selectors as a group change value (i.e. indicate a different branch instruction) only at the end byte of a predicted-taken branch instruction, fewer branch selectors may be stored than the number of bytes within the group.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00001\" num=\"1\"><claim-text>1. A branch prediction unit comprising:</claim-text><claim-text>a storage configured to store a plurality of branch selectors, wherein a first branch selector of said plurality of branch selectors corresponds to a first instruction byte range; and </claim-text><claim-text>a circuit coupled to said storage, wherein said circuit is configured, if a branch instruction comprises an end byte within said first instruction byte range, to selectively update said first branch selector to indicate a branch prediction corresponding to said branch instruction dependent on whether or not said end byte is a last byte of said first instruction byte range. </claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00002\" num=\"2\"><claim-text>2. The branch prediction unit as recited in claim <b>1</b> wherein, if said end byte is said last byte, said circuit is configured to update said first branch selector to identify said branch prediction.</claim-text></claim>"}, {"num": 3, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00003\" num=\"3\"><claim-text>3. The branch prediction unit as recited in claim <b>1</b> wherein, if said end byte is not said last byte, said circuit is configured to update said first branch selector to identify a different prediction from said branch prediction.</claim-text></claim>"}, {"num": 4, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00004\" num=\"4\"><claim-text>4. The branch prediction unit as recited in claim <b>1</b> wherein a second branch selector of said plurality of branch selectors corresponds to a second instruction byte range including a start byte of said branch instruction, and wherein said circuit is configured to update said second branch selector to identify said branch prediction.</claim-text></claim>"}, {"num": 5, "parent": 4, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00005\" num=\"5\"><claim-text>5. The branch prediction unit as recited in claim <b>4</b> wherein said first instruction byte range and said second instruction byte range are included in a group of contiguous instruction bytes.</claim-text></claim>"}, {"num": 6, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00006\" num=\"6\"><claim-text>6. The branch prediction unit as recited in claim <b>1</b>, wherein a second branch selector of said plurality of branch selectors corresponds to a second instruction byte range including a start byte of said branch instruction, and wherein said first instruction byte range is included in a first group of contiguous instruction bytes and said second instruction byte range is included in a second group of contiguous instruction bytes.</claim-text></claim>"}, {"num": 7, "parent": 6, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00007\" num=\"7\"><claim-text>7. The branch prediction unit as recited in claim <b>6</b> wherein said first instruction byte range includes an initial byte of said first group of contiguous instruction bytes.</claim-text></claim>"}, {"num": 8, "parent": 7, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00008\" num=\"8\"><claim-text>8. The branch prediction unit as recited in claim <b>7</b> wherein said second instruction byte range includes a last byte of said second group of contiguous instruction bytes.</claim-text></claim>"}, {"num": 9, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00009\" num=\"9\"><claim-text>9. The branch prediction unit as recited in claim <b>1</b> wherein said first instruction byte range is a number of bytes less than or equal to a shortest branch instruction which includes a displacement.</claim-text></claim>"}, {"num": 10, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00010\" num=\"10\"><claim-text>10. A microprocessor comprising:</claim-text><claim-text>an instruction cache; and </claim-text><claim-text>a branch prediction unit coupled to said instruction cache, wherein said branch prediction unit includes a storage configured to store a plurality of branch selectors, wherein a first branch selector of said plurality of branch selectors corresponds to a first instruction byte range, and wherein said branch prediction unit is configured, if a branch instruction comprises an end byte within said first instruction byte range, to selectively update said first branch selector to indicate a branch prediction corresponding to said branch instruction dependent on whether or not said end byte is a last byte of said first instruction byte range. </claim-text></claim>"}, {"num": 11, "parent": 10, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00011\" num=\"11\"><claim-text>11. The microprocessor as recited in claim <b>10</b> further comprising a predecode unit coupled to said branch prediction unit and said instruction cache, wherein said predecode unit is configured to predecode said first instruction byte range prior to storage thereof in said instruction cache, and wherein said predecode unit is configured to detect said branch instruction and to signal said branch prediction unit of said branch instruction, and wherein said branch prediction unit is configured to update said first branch selector responsive to the signalling from said predecode unit.</claim-text></claim>"}, {"num": 12, "parent": 10, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00012\" num=\"12\"><claim-text>12. The microprocessor as recited in claim <b>10</b> further comprising a functional unit configured to execute said branch instruction and detect a misprediction thereof, and wherein said branch prediction unit is configured to update said first branch selector in response to said misprediction.</claim-text></claim>"}, {"num": 13, "parent": 10, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00013\" num=\"13\"><claim-text>13. The microprocessor as recited in claim <b>10</b> wherein, if said end byte is said last byte, said branch prediction unit is configured to update said first branch selector to identify said branch prediction.</claim-text></claim>"}, {"num": 14, "parent": 10, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00014\" num=\"14\"><claim-text>14. The microprocessor as recited in claim <b>10</b> wherein, if said end byte is not said last byte, said branch prediction unit is configured to update said first branch selector to identify a different prediction from said branch prediction.</claim-text></claim>"}, {"num": 15, "parent": 10, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00015\" num=\"15\"><claim-text>15. The microprocessor as recited in claim <b>10</b> wherein a second branch selector of said plurality of branch selectors corresponds to a second instruction byte range including a start byte of said branch instruction, and wherein said branch prediction unit is configured to update said second branch selector to identify said branch prediction.</claim-text></claim>"}, {"num": 16, "parent": 15, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00016\" num=\"16\"><claim-text>16. The microprocessor as recited in claim <b>15</b> wherein said first instruction byte range and said second instruction byte range are included in a group of contiguous instruction bytes.</claim-text></claim>"}, {"num": 17, "parent": 10, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00017\" num=\"17\"><claim-text>17. The microprocessor as recited in claim <b>10</b>, wherein a second branch selector of said plurality of branch selectors corresponds to a second instruction byte range including a start byte of said branch instruction, and wherein said first instruction byte range is included in a first group of contiguous instruction bytes and said second instruction byte range is included in a second group of contiguous instruction bytes.</claim-text></claim>"}, {"num": 18, "parent": 17, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00018\" num=\"18\"><claim-text>18. The microprocessor as recited in claim <b>17</b> wherein said first instruction byte range includes an initial byte of said first group of contiguous instruction bytes.</claim-text></claim>"}, {"num": 19, "parent": 18, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00019\" num=\"19\"><claim-text>19. The microprocessor as recited in claim <b>18</b> wherein said second instruction byte range includes a last byte of said second group of contiguous instruction bytes.</claim-text></claim>"}, {"num": 20, "parent": 10, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00020\" num=\"20\"><claim-text>20. The microprocessor as recited in claim <b>10</b> wherein said first instruction byte range is a number of bytes less than or equal to a shortest branch instruction which includes a displacement.</claim-text></claim>"}, {"num": 21, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00021\" num=\"21\"><claim-text>21. A computer system comprising:</claim-text><claim-text>a microprocessor including: </claim-text><claim-text>an instruction cache; and </claim-text><claim-text>a branch prediction unit coupled to said instruction cache, wherein said branch prediction unit includes a storage configured to store a plurality of branch selectors, wherein a first branch selector of said plurality of branch selectors corresponds to a first instruction byte range, and wherein said branch prediction unit is configured, if a branch instruction comprises an end byte within said first instruction byte range, to selectively update said first branch selector to indicate a branch prediction corresponding to said branch instruction dependent on whether or not said end byte is a last byte of said first instruction byte range; and </claim-text><claim-text>an input/output (I/O) device configured to communicate between said computer system and another computer system. </claim-text></claim>"}, {"num": 22, "parent": 21, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00022\" num=\"22\"><claim-text>22. The computer system as recited in claim <b>21</b> wherein said I/O device is a modem.</claim-text></claim>"}, {"num": 23, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00023\" num=\"23\"><claim-text>23. A method comprising:</claim-text><claim-text>storing a plurality of branch selectors, wherein a first branch selector of said plurality of branch selectors corresponds to a first instruction byte range; and </claim-text><claim-text>selectively updating said first branch selector, if a branch instruction comprises an end byte within said first instruction byte range, to indicate a branch prediction corresponding to said branch instruction, said selectively updating dependent on whether or not said end byte is a last byte of said first instruction byte range. </claim-text></claim>"}, {"num": 24, "parent": 23, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00024\" num=\"24\"><claim-text>24. The method as recited in claim <b>23</b> further comprising:</claim-text><claim-text>predecoding said first instruction byte range prior to storage thereof in an instruction cache; and </claim-text><claim-text>detecting said branch instruction during said predecoding, wherein said selectively updating is responsive to said detecting. </claim-text></claim>"}, {"num": 25, "parent": 23, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00025\" num=\"25\"><claim-text>25. The method as recited in claim <b>23</b> further comprising:</claim-text><claim-text>executing said branch instruction; and </claim-text><claim-text>detecting a misprediction of said branch instruction in response to said executing, wherein said selectively updating is responsive to said detecting. </claim-text></claim>"}, {"num": 26, "parent": 23, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00026\" num=\"26\"><claim-text>26. The method as recited in claim <b>23</b> wherein said selectively updating comprises:</claim-text><claim-text>updating said first branch selector to identify said branch prediction if said end byte is said last byte; and </claim-text><claim-text>updating said first branch selector to identify a different prediction from said branch prediction if said end byte is not said last byte. </claim-text></claim>"}, {"num": 27, "parent": 23, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00027\" num=\"27\"><claim-text>27. The method as recited in claim <b>23</b> wherein a second branch selector of said plurality of branch selectors corresponds to a second instruction byte range including a start byte of said branch instruction, the method further comprising updating said second branch selector to identify said branch prediction.</claim-text></claim>"}, {"num": 28, "parent": 23, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00028\" num=\"28\"><claim-text>28. The method as recited in claim <b>23</b> wherein said first instruction byte range and said second instruction byte range are included in a group of contiguous instruction bytes.</claim-text></claim>"}, {"num": 29, "parent": 23, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00029\" num=\"29\"><claim-text>29. The method as recited in claim <b>23</b>, wherein a second branch selector of said plurality of branch selectors corresponds to a second instruction byte range including a start byte of said branch instruction, and wherein said first instruction byte range is included in a first group of contiguous instruction bytes and said second instruction byte range is included in a second group of contiguous instruction bytes.</claim-text></claim>"}, {"num": 30, "parent": 29, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00030\" num=\"30\"><claim-text>30. The method as recited in claim <b>29</b> wherein said first instruction byte range includes an initial byte of said first group of contiguous instruction bytes.</claim-text></claim>"}, {"num": 31, "parent": 30, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00031\" num=\"31\"><claim-text>31. The method as recited in claim <b>30</b> wherein said second instruction byte range includes a last byte of said second group of contiguous instruction bytes.</claim-text></claim>"}, {"num": 32, "parent": 23, "type": "dependent", "paragraph_markup": "<claim id=\"US-6279107-B1-CLM-00032\" num=\"32\"><claim-text>32. The method as recited in claim <b>23</b> wherein said first instruction byte range is a number of bytes less than or equal to a shortest branch instruction which includes a displacement.</claim-text></claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES54712994\"><?RELAPP description=\"Other Patent Relations\" end=\"lead\"?><h4>CROSS REFERENCE TO RELATED APPLICATIONS</h4><p>This application is a continuation of U.S. patent application Ser. No. 09/366,809 filed Aug. 4, 1999, now U.S. Pat. No. 6,141,748, which is a continuation of U.S. patent application Ser. No. 08/957,596 filed Oct. 24, 1997, now U.S. Pat. No. 5,978,906, which is a continuation in part of application Ser. No. 08/752,691 filed Nov. 19, 1996, now U.S. Pat. No. 5,995,749.</p><?RELAPP description=\"Other Patent Relations\" end=\"tail\"?><?BRFSUM description=\"Brief Summary\" end=\"lead\"?><h4>BACKGROUND OF THE INVENTION</h4><p>1. Field of the Invention</p><p>This invention is related to the field of microprocessors and, more particularly, to branch prediction mechanisms within microprocessors.</p><p>2. Description of the Related Art</p><p>Superscalar microprocessors achieve high performance by executing multiple instructions per clock cycle and by choosing the shortest possible clock cycle consistent with the design. As used herein, the term \u201cclock cycle\u201d refers to an interval of time accorded to various stages of an instruction processing pipeline within the microprocessor. Storage devices (e.g. registers and arrays) capture their values according to the clock cycle. For example, a storage device may capture a value according to a rising or falling edge of a clock signal defining the clock cycle. The storage device then stores the value until the subsequent rising or falling edge of the clock signal, respectively. The term \u201cinstruction processing pipeline\u201d is used herein to refer to the logic circuits employed to process instructions in a pipelined fashion. Although the pipeline may be divided into any number of stages at which portions of instruction processing are performed, instruction processing generally comprises fetching the instruction, decoding the instruction, executing the instruction, and storing the execution results in the destination identified by the instruction.</p><p>An important feature of a superscalar microprocessor (and a superpipelined microprocessor as well) is its branch prediction mechanism. The branch prediction mechanism indicates a predicted direction (taken or not-taken) for a branch instruction, allowing subsequent instruction fetching to continue within the predicted instruction stream indicated by the branch prediction. A branch instruction is an instruction which causes subsequent instructions to be fetched from one of at least two addresses: a sequential address identifying an instruction stream beginning with instructions which directly follow the branch instruction; and a target address identifying an instruction stream beginning at an arbitrary location in memory. Unconditional branch instructions always branch to the target address, while conditional branch instructions may select either the sequential or the target address based on the outcome of a prior instruction. Instructions from the predicted instruction stream may be speculatively executed prior to execution of the branch instruction, and in any case are placed into the instruction processing pipeline prior to execution of the branch instruction. If the predicted instruction stream is correct, then the number of instructions executed per clock cycle is advantageously increased. However, if the predicted instruction stream is incorrect (i.e. one or more branch instructions are predicted incorrectly), then the instructions from the incorrectly predicted instruction stream are discarded from the instruction processing pipeline and the number of instructions executed per clock cycle is decreased.</p><p>In order to be effective, the branch prediction mechanism must be highly accurate such that the predicted instruction stream is correct as often as possible. Typically, increasing the accuracy of the branch prediction mechanism is achieved by increasing the complexity of the branch prediction mechanism. For example, a cache-line based branch prediction scheme may be employed in which branch predictions are stored corresponding to a particular cache line of instruction bytes in an instruction cache. A cache line is a number of contiguous bytes which are treated as a unit for allocation and deallocation of storage space within a cache. When the instruction cache line is fetched, the corresponding branch predictions are also fetched. Furthermore, when the particular cache line is discarded, the corresponding branch predictions are discarded as well. The cache line is aligned in memory. A cache-line based branch prediction scheme may be made more accurate by storing a larger number of branch predictions for each cache line. A given cache line may include multiple branch instructions, each of which is represented by a different branch prediction. Therefore, more branch predictions allocated to a cache line allows for more branch instructions to be represented and predicted by the branch prediction mechanism. A branch instruction which cannot be represented within the branch prediction mechanism is not predicted, and subsequently a \u201cmisprediction\u201d may be detected if the branch is found to be taken. However, complexity of the branch prediction mechanism is increased by the need to select between additional branch predictions. As used herein, a \u201cbranch prediction\u201d is a value which may be interpreted by the branch prediction mechanism as a prediction of whether or not a branch instruction is taken or not taken. Furthermore, a branch prediction may include the target address. For cache-line based branch prediction mechanisms, a prediction of a sequential line to the cache line being fetched is a branch prediction when no branch instructions are within the instructions being fetched from the cache line.</p><p>A problem related to increasing the complexity of the branch prediction mechanism is that the increased complexity generally requires an increased amount of time to form the branch prediction. For example, selecting among multiple branch predictions may require a substantial amount of time. The offset of the fetch address identifies the first byte being fetched within the cache line: a branch prediction for a branch instruction prior to the offset should not be selected. The offset of the fetch address within the cache line may need to be compared to the offset of the branch instructions represented by the branch predictions stored for the cache line in order to determine which branch prediction to use. The branch prediction corresponding to a branch instruction subsequent to the fetch address offset and nearer to the fetch address offset than other branch instructions which are subsequent to the fetch address offset should be selected. As the number of branch predictions is increased, the complexity (and time required) for the selection logic increases. When the amount of time needed to form a branch prediction for a fetch address exceeds the clock cycle time of the microprocessor, performance of the microprocessor may be decreased. Because the branch prediction cannot be formed in a single clock cycle, \u201cbubbles\u201d are introduced into the instruction processing pipeline during clock cycles that instructions cannot be fetched due to a lack of a branch prediction corresponding to a previous fetch address. The bubble occupies various stages in the instruction processing pipeline during subsequent clock cycles, and no work occurs at the stage including the bubble because no instructions are included in the bubble. Performance of the microprocessor may thereby be decreased.</p><h4>SUMMARY OF THE INVENTION</h4><p>The problems outlined above are in large part solved by a branch prediction unit in accordance with the present invention. The branch prediction unit stores a set of branch selectors corresponding to each of a group of contiguous instruction bytes stored in an instruction cache. Each branch selector identifies the branch prediction to be selected if a fetch address corresponding to that branch selector is presented. Advantageously, time-consuming comparisons of fetch address offsets to branch instruction offsets may be eliminated. A more complex branch prediction mechanism may thereby be supported at a higher frequency than may have been previously achievable.</p><p>In order to minimize the number of branch selectors stored for a group of contiguous instruction bytes, the group is divided into multiple byte ranges. The largest byte range may include a number of bytes comprising the shortest branch instruction in the instruction set (exclusive of the return instruction). For example, the shortest branch instruction may be two bytes in one embodiment. Therefore, the largest byte range is two bytes in the example. Since the branch selectors as a group change value (i.e. indicate a different branch instruction) only at the end byte of a predicted-taken branch instruction, fewer branch selectors may be stored than the number of bytes within the group. Advantageously, the size of the branch prediction storage may be smaller than if a branch selector were stored for each byte. The smaller branch prediction storage may exhibit a faster access time, improving the clock cycle time achievable using the branch prediction mechanism. Additionally, cost may be reduced due to the reduced substrate area occupied by the branch prediction storage.</p><p>Broadly speaking, the present invention contemplates a branch prediction mechanism comprising a branch prediction storage and a selection device. Coupled to receive a fetch address corresponding to a group of contiguous instruction bytes being fetched from an instruction cache, the branch prediction storage is configured to store a plurality of branch selectors. The group of contiguous instruction bytes comprises a plurality of byte ranges, and each one of the plurality of branch selectors corresponds to a different one of the plurality of byte ranges. Furthermore, each one of the plurality of branch selectors identifies a branch prediction. The selection device is configured to select a selected one of the plurality of branch selectors. The selected one of the plurality of branch selectors corresponds to a selected one of the plurality of byte ranges. The selected one of the plurality of byte ranges includes a byte identified by the fetch address.</p><p>The present invention further contemplates a method for performing branch prediction. A plurality of branch selectors corresponding to a group of contiguous instruction bytes are stored. Each of the plurality of branch selectors corresponds to a different byte range within the group of contiguous instruction bytes and identifies a branch prediction to be selected if a byte within that byte range is fetched. One or more of the group of contiguous instruction bytes are fetched from an instruction cache using a fetch address. In response to the fetch address, one of the plurality of branch selectors is selected. Subsequently, the branch prediction identified by the one of the plurality of branch selectors is selected.</p><p>Moreover, the present invention contemplates a microprocessor comprising an instruction cache and a branch prediction unit. The instruction cache is coupled to receive a fetch address and to provide a group of contiguous instruction bytes in response to the fetch address. Coupled to receive the fetch address concurrently with the instruction cache, the branch prediction unit is configured to store a plurality of branch selectors. The plurality of branch selectors corresponds to the group of contiguous instruction bytes. Furthermore, each of the plurality of branch selectors corresponds to a corresponding one of a plurality of byte ranges within the group of contiguous instruction bytes. The branch prediction unit is configured to select one of the plurality of branch selectors in response to the fetch address and is further configured to predict a subsequent fetch address using a branch prediction identified by the one of the plurality of branch selectors.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4><p>Other objects and advantages of the invention will become apparent upon reading the following detailed description and upon reference to the accompanying drawings in which:</p><p>FIG. 1 is a block diagram of one embodiment of a superscalar microprocessor.</p><p>FIG. 2 is a block diagram of one embodiment of a pair of decode units shown in FIG. <b>1</b>.</p><p>FIG. 3 is a block diagram of a group of contiguous instruction bytes and a corresponding set of branch selectors, according to one embodiment of a branch prediction mechanism for the microprocessor shown in FIG. <b>1</b>.</p><p>FIG. 4 is a block diagram of a group of contiguous instruction bytes and a corresponding set of branch selectors, according to another embodiment of a branch prediction mechanism for the microprocessor shown in FIG. <b>1</b>.</p><p>FIG. 5 is a table illustrating one embodiment of byte ranges within a set of contiguous instruction bytes.</p><p>FIG. 6 is a first example of branch selectors for a first exemplary set of instructions.</p><p>FIG. 7 is a second example of branch selectors for a second exemplary set of instructions.</p><p>FIG. 8 is a third example of branch selectors for a third exemplary set of instructions.</p><p>FIG. 9 is a fourth example of branch selectors for a fourth exemplary set of instructions.</p><p>FIG. 10 is a block diagram of one embodiment of a branch prediction unit shown in FIG. <b>1</b>.</p><p>FIG. 11 is a block diagram of one embodiment of a branch prediction storage entry corresponding to a group of contiguous instruction bytes.</p><p>FIG. 12 is a table illustrating an exemplary branch selector encoding for one embodiment of the branch prediction unit shown in FIG. <b>1</b>.</p><p>FIG. 13 is a flowchart illustrating mask generation according to one embodiment of the microprocessor shown in FIG. <b>1</b>.</p><p>FIG. 14 is a flowchart illustrating one embodiment of branch selector update.</p><p>FIG. 15 is a block diagram of a group of contiguous instruction bytes and a corresponding set of branch selectors, according to yet another embodiment of a branch prediction mechanism for the microprocessor shown in FIG. <b>1</b>.</p><p>FIG. 16 is a table illustrating another embodiment of byte ranges within a set of contiguous instruction bytes.</p><p>FIG. 17 is a block diagram of one embodiment of a computer system including the microprocessor shown in FIG. <b>1</b>.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><p>While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.</p><h4>DETAILED DESCRIPTION OF THE INVENTION</h4><p>Turning now to FIG. 1, a block diagram of one embodiment of a microprocessor <b>10</b> is shown. Microprocessor <b>10</b> includes a prefetch/predecode unit <b>12</b>, a branch prediction unit <b>14</b>, an instruction cache <b>16</b>, an instruction alignment unit <b>18</b>, a plurality of decode units <b>20</b>A-<b>20</b>C, a plurality of reservation stations <b>22</b>A-<b>22</b>C, a plurality of functional units <b>24</b>A-<b>24</b>C, a load/store unit <b>26</b>, a data cache <b>28</b>, a register file <b>30</b>, a reorder buffer <b>32</b>, and an MROM unit <b>34</b>. Elements referred to herein with a particular reference number followed by a letter will be collectively referred to by the reference number alone. For example, decode units <b>20</b>A-<b>20</b>C will be collectively referred to as decode units <b>20</b>.</p><p>Prefetch/predecode unit <b>12</b> is coupled to receive instructions from a main memory subsystem (not shown), and is further coupled to instruction cache <b>16</b> and branch prediction unit <b>14</b>. Similarly, branch prediction unit <b>14</b> is coupled to instruction cache <b>16</b>. Still further, branch prediction unit <b>14</b> is coupled to decode units <b>20</b> and functional units <b>24</b>. Instruction cache <b>16</b> is further coupled to MROM unit <b>34</b> and instruction alignment unit <b>18</b>. Instruction alignment unit <b>18</b> is in turn coupled to decode units <b>20</b>. Each decode unit <b>20</b>A-<b>20</b>C is coupled to load/store unit <b>26</b> and to respective reservation stations <b>22</b>A-<b>22</b>C. Reservation stations <b>22</b>A-<b>22</b>C are further coupled to respective functional units <b>24</b>A-<b>24</b>C. Additionally, decode units <b>20</b> and reservation stations <b>22</b> are coupled to register file <b>30</b> and reorder buffer <b>32</b>. Functional units <b>24</b> are coupled to load/store unit <b>26</b>, register file <b>30</b>, and reorder buffer <b>32</b> as well. Data cache <b>28</b> is coupled to load/store unit <b>26</b> and to the main memory subsystem. Finally, MROM unit <b>34</b> is coupled to decode units <b>20</b>.</p><p>Generally speaking, branch prediction unit <b>14</b> employs a cache-line based branch prediction mechanism for predicting branch instructions. Multiple branch predictions may be stored for each cache line. Additionally, the cache line is divided into multiple byte ranges and a branch selector is stored for each byte range within the cache line. The branch selector for a particular byte range indicates which of the branch predictions which may be stored with respect to the cache line is the branch prediction appropriate for an instruction fetch address which fetches any byte within the particular byte range. As used herein, a byte range is one or more contiguous bytes within a cache line (or portion thereof, if less than a fill cache line is provided at the output of instruction cache <b>16</b> as described below). The appropriate branch prediction is the branch prediction for the first predicted-taken branch instruction encountered within the cache line subsequent to the particular byte. As used herein, the terms \u201csubsequent\u201d and \u201cprior to\u201d refer to an ordering of bytes within the cache line. A byte stored at a memory address which is numerically smaller than the memory address at which a second byte is stored is prior to the second byte. Conversely, a byte stored at a memory address which is numerically larger than the memory address of a second byte is subsequent to the second byte. Similarly, a first instruction is prior to a second instruction in program order if the first instruction is encountered before the second instruction when stepping one at a time through the sequence of instructions forming the program.</p><p>In one embodiment, microprocessor <b>10</b> employs a microprocessor architecture in which the instruction set is a variable byte length instruction set (e.g. the x86 microprocessor architecture). When a variable byte length instruction set is employed, any byte within the cache line may be identified as the first byte to be fetched by a given fetch address. For example, a branch instruction may have a target address at byte position two within a cache line. In such a case, the bytes at byte positions zero and one are not being fetched during the current cache access. Additionally, bytes subsequent to a predicted-taken branch which is subsequent to the first byte are not fetched during the current cache access. The branch prediction for the predicted taken branch can be located by selecting the branch selector corresponding to the byte range including the first byte to be fetched from the cache line. The branch selector is used to select the appropriate branch prediction, which is then provided to the instruction fetch logic in instruction cache <b>16</b>. During the succeeding clock cycle, the branch prediction is used as the fetch address. Advantageously, the process of comparing the byte position of the first byte being fetched to the byte positions of the predicted-taken branch instructions is eliminated from the generation of a branch prediction in response to a fetch address. The amount of time required to form a branch prediction may be reduced accordingly, allowing the branch prediction mechanism to operate at higher clock frequencies (i.e. shorter clock cycles) while still providing a single cycle branch prediction.</p><p>It is noted that, although the term \u201ccache line\u201d has been used in the preceding discussion, some embodiments of instruction cache <b>16</b> may not provide an entire cache line at its output during a given clock cycle. For example, in one embodiment instruction cache <b>16</b> is configured with 32 byte cache lines. However, only 16 bytes are fetched in a given clock cycle (either the upper half or the lower half of the cache line). The branch prediction storage locations and branch selectors are allocated to the portion of the cache line being fetched. As used herein, the term \u201cgroup of contiguous instruction bytes\u201d is used to refer to the instruction bytes which are provided by the instruction cache in a particular clock cycle in response to a fetch address. A group of contiguous instruction bytes may be a portion of a cache line or an entire cache line, according to various embodiments. When a group of contiguous instruction bytes is a portion of a cache line, it is still an aligned portion of a cache line. For example, if a group of contiguous instruction bytes is half a cache line, it is either the upper half of the cache line or the lower half of the cache line. A number of branch prediction storage locations are allocated to each group of contiguous instruction bytes, and branch selectors indicate one of the branch prediction storage locations associated with that group. Furthermore, branch selectors may indicate a return stack address from a return stack structure or a sequential address if no branch instructions are encountered between the corresponding byte and the last byte in the group of contiguous instruction bytes.</p><p>Instruction cache <b>16</b> is a high speed cache memory provided to store instructions. Instructions are fetched from instruction cache <b>16</b> and dispatched to decode units <b>20</b>. In one embodiment, instruction cache <b>16</b> is configured to store up to 64 kilobytes of instructions in a 4 way set associative structure having 32 byte lines (a byte comprises 8 binary bits). Alternatively, 2 way set associativity may be employed as well as any other desired associativity. Instruction cache <b>16</b> may additionally employ a way prediction scheme in order to speed access times to the instruction cache. Instead of accessing tags identifying each line of instructions and comparing the tags to the fetch address to select a way, instruction cache <b>16</b> predicts the way that is accessed. In this manner, the way is selected prior to accessing the instruction storage. The access time of instruction cache <b>16</b> may be similar to a direct-mapped cache. A tag comparison is performed and, if the way prediction is incorrect, the correct instructions are fetched and the incorrect instructions are discarded. It is noted that instruction cache <b>16</b> may be implemented as a fully associative, set associative, or direct mapped configuration.</p><p>Instructions are fetched from main memory and stored into instruction cache <b>16</b> by prefetch/predecode unit <b>12</b>. Instructions may be prefetched prior to the request thereof from instruction cache <b>16</b> in accordance with a prefetch scheme. A variety of prefetch schemes may be employed by prefetch/predecode unit <b>12</b>. As prefetch/predecode unit <b>12</b> transfers instructions from main memory to instruction cache <b>16</b>, prefetch/predecode unit <b>12</b> generates three predecode bits for each byte of the instructions: a start bit, an end bit, and a functional bit. The predecode bits form tags indicative of the boundaries of each instruction. The predecode tags may also convey additional information such as whether a given instruction can be decoded directly by decode units <b>20</b> or whether the instruction is executed by invoking a microcode procedure controlled by MROM unit <b>34</b>, as will be described in greater detail below. Still further, prefetch/predecode unit <b>12</b> may be configured to detect branch instructions and to store branch prediction information corresponding to the branch instructions into branch prediction unit <b>14</b>.</p><p>One encoding of the predecode tags for an embodiment of microprocessor <b>10</b> employing a variable byte length instruction set will next be described. A variable byte length instruction set is an instruction set in which different instructions may occupy differing numbers of bytes. An exemplary variable byte length instruction set employed by one embodiment of microprocessor <b>10</b> is the x86 instruction set.</p><p>In the exemplary encoding, if a given byte is the first byte of an instruction, the start bit for that byte is set. If the byte is the last byte of an instruction, the end bit for that byte is set. Instructions which may be directly decoded by decode units <b>20</b> are referred to as \u201cfast path\u201d instructions. The remaining x86 instructions are referred to as MROM instructions, according to one embodiment. For fast path instructions, the functional bit is set for each prefix byte included in the instruction, and cleared for other bytes. Alternatively, for MROM instructions, the functional bit is cleared for each prefix byte and set for other bytes. The type of instruction may be determined by examining the functional bit corresponding to the end byte. If that functional bit is clear, the instruction is a fast path instruction. Conversely, if that functional bit is set, the instruction is an MROM instruction. The opcode of an instruction may thereby be located within an instruction which may be directly decoded by decode units <b>20</b> as the byte associated with the first clear functional bit in the instruction. For example, a fast path instruction including two prefix bytes, a Mod R/M byte, and an immediate byte would have start, end, and functional bits as follows:</p><p><tables id=\"TABLE-US-00001\"><table colsep=\"0\" frame=\"none\" rowsep=\"0\"><tgroup align=\"left\" cols=\"3\" colsep=\"0\" rowsep=\"0\"><colspec align=\"left\" colname=\"OFFSET\" colwidth=\"49PT\"></colspec><colspec align=\"left\" colname=\"1\" colwidth=\"49PT\"></colspec><colspec align=\"center\" colname=\"2\" colwidth=\"119PT\"></colspec><thead valign=\"bottom\"><row><entry morerows=\"0\" valign=\"top\"></entry><entry align=\"center\" morerows=\"0\" nameend=\"2\" namest=\"OFFSET\" rowsep=\"1\" valign=\"top\"></entry></row></thead><tbody valign=\"top\"><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">Start bits</entry><entry morerows=\"0\" valign=\"top\">10000</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">End bits</entry><entry morerows=\"0\" valign=\"top\">00001</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">Functional bits</entry><entry morerows=\"0\" valign=\"top\">11000</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry align=\"center\" morerows=\"0\" nameend=\"2\" namest=\"OFFSET\" rowsep=\"1\" valign=\"top\"></entry></row></tbody></tgroup></table></tables></p><p>According to one particular embodiment, early identification of an instruction that includes a scale-index-base (SIB) byte is advantageous for MROM unit <b>34</b>. For such an embodiment, if an instruction includes at least two bytes after the opcode byte, the functional bit for the Mod R/M byte indicates the presence of an SIB byte. If the functional bit for the Mod R/M byte is set, then an SIB byte is present. Alternatively, if the functional bit for the Mod R/M byte is clear, then an SIB byte is not present.</p><p>MROM instructions are instructions which are determined to be too complex for decode by decode units <b>20</b>. MROM instructions are executed by invoking MROM unit <b>34</b>. More specifically, when an MROM instruction is encountered, MROM unit <b>34</b> parses and issues the instruction into a subset of defined fast path instructions to effectuate the desired operation. MROM unit <b>34</b> dispatches the subset of fast path instructions to decode units <b>20</b>. A listing of exemplary x86 instructions categorized as fast path instructions will be provided further below.</p><p>Microprocessor <b>10</b> employs branch prediction in order to speculatively fetch instructions subsequent to conditional branch instructions. Branch prediction unit <b>14</b> is included to perform branch prediction operations. In one embodiment, up to two branch target addresses are stored with respect to each 16 byte portion of each cache line in instruction cache <b>16</b>. Prefetch/predecode unit <b>12</b> determines initial branch targets when a particular line is predecoded. Subsequent updates to the branch targets corresponding to a cache line may occur due to the execution of instructions within the cache line. Instruction cache <b>16</b> provides an indication of the instruction address being fetched, so that branch prediction unit <b>14</b> may determine which branch target addresses to select for forming a branch prediction. Decode units <b>20</b> and functional units <b>24</b> provide update information to branch prediction unit <b>14</b>. Because branch prediction unit <b>14</b> stores two targets per 16 byte portion of the cache line, some branch instructions within the line may not be stored in branch prediction unit <b>14</b>. Decode units <b>20</b> detect branch instructions which were not predicted by branch prediction unit <b>14</b>. Functional units <b>24</b> execute the branch instructions and determine if the predicted branch direction is incorrect. The branch direction may be \u201ctaken\u201d, in which subsequent instructions are fetched from the target address of the branch instruction. Conversely, the branch direction may be \u201cnot taken\u201d, in which subsequent instructions are fetched from memory locations consecutive to the branch instruction. When a mispredicted branch instruction is detected, instructions subsequent to the mispredicted branch are discarded from the various units of microprocessor <b>10</b>. A variety of suitable branch prediction algorithms may be employed by branch prediction unit <b>14</b>.</p><p>Instructions fetched from instruction cache <b>16</b> are conveyed to instruction alignment unit <b>18</b>. As instructions are fetched from instruction cache <b>16</b>, the corresponding predecode data is scanned to provide information to instruction alignment unit <b>18</b> (and to MROM unit <b>34</b>) regarding the instructions being fetched. Instruction alignment unit <b>18</b> utilizes the scanning data to align an instruction to each of decode units <b>20</b>. In one embodiment, instruction alignment unit <b>18</b> aligns instructions from three sets of eight instruction bytes to decode units <b>20</b>. Instructions are selected independently from each set of eight instruction bytes into preliminary issue positions. The preliminary issue positions are then merged to a set of aligned issue positions corresponding to decode units <b>20</b>, such that the aligned issue positions contain the three instructions which are prior to other instructions within the preliminary issue positions in program order. Decode unit <b>20</b>A receives an instruction which is prior to instructions concurrently received by decode units <b>20</b>B and <b>20</b>C (in program order). Similarly, decode unit <b>20</b>B receives an instruction which is prior to the instruction concurrently received by decode unit <b>20</b>C in program order.</p><p>Decode units <b>20</b> are configured to decode instructions received from instruction alignment unit <b>18</b>. Register operand information is detected and routed to register file <b>30</b> and reorder buffer <b>32</b>. Additionally, if the instructions require one or more memory operations to be performed, decode units <b>20</b> dispatch the memory operations to load/store unit <b>26</b>. Each instruction is decoded into a set of control values for functional units <b>24</b>, and these control values are dispatched to reservation stations <b>22</b> along with operand address information and displacement or immediate data which may be included with the instruction.</p><p>Microprocessor <b>10</b> supports out of order execution, and thus employs reorder buffer <b>32</b> to keep track of the original program sequence for register read and write operations, to implement register renaming, to allow for speculative instruction execution and branch misprediction recovery, and to facilitate precise exceptions. A temporary storage location within reorder buffer <b>32</b> is reserved upon decode of an instruction that involves the update of a register to thereby store speculative register states. If a branch prediction is incorrect, the results of speculatively-executed instructions along the mispredicted path can be invalidated in the buffer before they are written to register file <b>30</b>. Similarly, if a particular instruction causes an exception, instructions subsequent to the particular instruction may be discarded. In this manner, exceptions are \u201cprecise\u201d (i.e. instructions subsequent to the particular instruction causing the exception are not completed prior to the exception). It is noted that a particular instruction is speculatively executed if it is executed prior to instructions which precede the particular instruction in program order. Preceding instructions may be a branch instruction or an exception-causing instruction, in which case the speculative results may be discarded by reorder buffer <b>32</b>.</p><p>The instruction control values and immediate or displacement data provided at the outputs of decode units <b>20</b> are routed directly to respective reservation stations <b>22</b>. In one embodiment, each reservation station <b>22</b> is capable of holding instruction information (i.e., instruction control values as well as operand values, operand tags and/or immediate data) for up to three pending instructions awaiting issue to the corresponding functional unit. It is noted that for the embodiment of FIG. 1, each reservation station <b>22</b> is associated with a dedicated functional unit <b>24</b>. Accordingly, three dedicated \u201cissue positions\u201d are formed by reservation stations <b>22</b> and functional units <b>24</b>. In other words, issue position <b>0</b> is formed by reservation station <b>22</b>A and functional unit <b>24</b>A. Instructions aligned and dispatched to reservation station <b>22</b>A are executed by functional unit <b>24</b>A. Similarly, issue position <b>1</b> is formed by reservation station <b>22</b>B and functional unit <b>24</b>B; and issue position <b>2</b> is formed by reservation station <b>22</b>C and functional unit <b>24</b>C.</p><p>Upon decode of a particular instruction, if a required operand is a register location, register address information is routed to reorder buffer <b>32</b> and register file <b>30</b> simultaneously. Those of skill in the art will appreciate that the x86 register file includes eight 32 bit real registers (i.e., typically referred to as EAX, EBX, ECX, EDX, EBP, ESI, EDI and ESP). In embodiments of microprocessor <b>10</b> which employ the x86 microprocessor architecture, register file <b>30</b> comprises storage locations for each of the 32 bit real registers. Additional storage locations may be included within register file <b>30</b> for use by MROM unit <b>34</b>. Reorder buffer <b>32</b> contains temporary storage locations for results which change the contents of these registers to thereby allow out of order execution. A temporary storage location of reorder buffer <b>32</b> is reserved for each instruction which, upon decode, is determined to modify the contents of one of the real registers. Therefore, at various points during execution of a particular program, reorder buffer <b>32</b> may have one or more locations which contain the speculatively executed contents of a given register. If following decode of a given instruction it is determined that reorder buffer <b>32</b> has a previous location or locations assigned to a register used as an operand in the given instruction, the reorder buffer <b>32</b> forwards to the corresponding reservation station either: 1) the value in the most recently assigned location, or 2) a tag for the most recently assigned location if the value has not yet been produced by the functional unit that will eventually execute the previous instruction. If reorder buffer <b>32</b> has a location reserved for a given register, the operand value (or reorder buffer tag) is provided from reorder buffer <b>32</b> rather than from register file <b>30</b>. If there is no location reserved for a required register in reorder buffer <b>32</b>, the value is taken directly from register file <b>30</b>. If the operand corresponds to a memory location, the operand value is provided to the reservation station through load/store unit <b>26</b>.</p><p>In one particular embodiment, reorder buffer <b>32</b> is configured to store and manipulate concurrently decoded instructions as a unit. This configuration will be referred to herein as \u201cline-oriented\u201d. By manipulating several instructions together, the hardware employed within reorder buffer <b>32</b> may be simplified. For example, a line-oriented reorder buffer included in the present embodiment allocates storage sufficient for instruction information pertaining to three instructions (one from each decode unit <b>20</b>) whenever one or more instructions are dispatched by decode units <b>20</b>. By contrast, a variable amount of storage is allocated in conventional reorder buffers, dependent upon the number of instructions actually dispatched. A comparatively larger number of logic gates may be required to allocate the variable amount of storage. When each of the concurrently decoded instructions has executed, the instruction results are stored into register file <b>30</b> simultaneously. The storage is then free for allocation to another set of concurrently decoded instructions. Additionally, the amount of control logic circuitry employed per instruction is reduced because the control logic is amortized over several concurrently decoded instructions. A reorder buffer tag identifying a particular instruction may be divided into two fields: a line tag and an offset tag. The line tag identifies the set of concurrently decoded instructions including the particular instruction, and the offset tag identifies which instruction within the set corresponds to the particular instruction. It is noted that storing instruction results into register file <b>30</b> and freeing the corresponding storage is referred to as \u201cretiring\u201d the instructions. It is further noted that any reorder buffer configuration may be employed in various embodiments of microprocessor <b>10</b>.</p><p>As noted earlier, reservation stations <b>22</b> store instructions until the instructions are executed by the corresponding functional unit <b>24</b>. An instruction is selected for execution if: (i) the operands of the instruction have been provided; and (ii) the operands have not yet been provided for instructions which are within the same reservation station <b>22</b>A-<b>22</b>C and which are prior to the instruction in program order. It is noted that when an instruction is executed by one of the functional units <b>24</b>, the result of that instruction is passed directly to any reservation stations <b>22</b> that are waiting for that result at the same time the result is passed to update reorder buffer <b>32</b> (this technique is commonly referred to as \u201cresult forwarding\u201d). An instruction may be selected for execution and passed to a functional unit <b>24</b>A-<b>24</b>C during the clock cycle that the associated result is forwarded. Reservation stations <b>22</b> route the forwarded result to the functional unit <b>24</b> in this case.</p><p>In one embodiment, each of the functional units <b>24</b> is configured to perform integer arithmetic operations of addition and subtraction, as well as shifts, rotates, logical operations, and branch operations. The operations are performed in response to the control values decoded for a particular instruction by decode units <b>20</b>. It is noted that a floating point unit (not shown) may also be employed to accommodate floating point operations. The floating point unit may be operated as a coprocessor, receiving instructions from MROM unit <b>34</b> and subsequently communicating with reorder buffer <b>32</b> to complete the instructions. Additionally, functional units <b>24</b> may be configured to perform address generation for load and store memory operations performed by load/store unit <b>26</b>.</p><p>Each of the functional units <b>24</b> also provides information regarding the execution of conditional branch instructions to the branch prediction unit <b>14</b>. If a branch prediction was incorrect, branch prediction unit <b>14</b> flushes instructions subsequent to the mispredicted branch that have entered the instruction processing pipeline, and causes fetch of the required instructions from instruction cache <b>16</b> or main memory. It is noted that in such situations, results of instructions in the original program sequence which occur after the mispredicted branch instruction are discarded, including those which were speculatively executed and temporarily stored in load/store unit <b>26</b> and reorder buffer <b>32</b>.</p><p>Results produced by functional units <b>24</b> are sent to reorder buffer <b>32</b> if a register value is being updated, and to load/store unit <b>26</b> if the contents of a memory location are changed. If the result is to be stored in a register, reorder buffer <b>32</b> stores the result in the location reserved for the value of the register when the instruction was decoded. A plurality of result buses <b>38</b> are included for forwarding of results from functional units <b>24</b> and load/store unit <b>26</b>. Result buses <b>38</b> convey the result generated, as well as the reorder buffer tag identifying the instruction being executed.</p><p>Load/store unit <b>26</b> provides an interface between functional units <b>24</b> and data cache <b>28</b>. In one embodiment, load/store unit <b>26</b> is configured with a load/store buffer having eight storage locations for data and address information for pending loads or stores. Decode units <b>20</b> arbitrate for access to the load/store unit <b>26</b>. When the buffer is full, a decode unit must wait until load/store unit <b>26</b> has room for the pending load or store request information. Load/store unit <b>26</b> also performs dependency checking for load memory operations against pending store memory operations to ensure that data coherency is maintained. A memory operation is a transfer of data between microprocessor <b>10</b> and the main memory subsystem. Memory operations may be the result of an instruction which utilizes an operand stored in memory, or may be the result of a load/store instruction which causes the data transfer but no other operation. Additionally, load/store unit <b>26</b> may include a special register storage for special registers such as the segment registers and other registers related to the address translation mechanism defined by the x86 microprocessor architecture.</p><p>In one embodiment, load/store unit <b>26</b> is configured to perform load memory operations speculatively. Store memory operations are performed in program order, but may be speculatively stored into the predicted way. If the predicted way is incorrect, the data prior to the store memory operation is subsequently restored to the predicted way and the store memory operation is performed to the correct way. In another embodiment, stores may be executed speculatively as well. Speculatively executed stores are placed into a store buffer, along with a copy of the cache line prior to the update. If the speculatively executed store is later discarded due to branch misprediction or exception, the cache line may be restored to the value stored in the buffer. It is noted that load/store unit <b>26</b> may be configured to perform any amount of speculative execution, including no speculative execution.</p><p>Data cache <b>28</b> is a high speed cache memory provided to temporarily store data being transferred between load/store unit <b>26</b> and the main memory subsystem. In one embodiment, data cache <b>28</b> has a capacity of storing up to sixteen kilobytes of data in an eight way set associative structure. Similar to instruction cache <b>16</b>, data cache <b>28</b> may employ a way prediction mechanism. It is understood that data cache <b>28</b> may be implemented in a variety of specific memory configurations, including a set associative configuration.</p><p>In one particular embodiment of microprocessor <b>10</b> employing the x86 microprocessor architecture, instruction cache <b>16</b> and data cache <b>28</b> are linearly addressed. The linear address is formed from the offset specified by the instruction and the base address specified by the segment portion of the x86 address translation mechanism. Linear addresses may optionally be translated to physical addresses for accessing a main memory. The linear to physical translation is specified by the paging portion of the x86 address translation mechanism. It is noted that a linear addressed cache stores linear address tags. A set of physical tags (not shown) may be employed for mapping the linear addresses to physical addresses and for detecting translation aliases. Additionally, the physical tag block may perform linear to physical address translation.</p><p>Turning now to FIG. 2, a block diagram of one embodiment of decode units <b>20</b>B and <b>20</b>C is shown. Each decode unit <b>20</b> receives an instruction from instruction alignment unit <b>18</b>. Additionally, MROM unit <b>34</b> is coupled to each decode unit <b>20</b> for dispatching fast path instructions corresponding to a particular MROM instruction. Decode unit <b>20</b>B comprises early decode unit <b>40</b>B, multiplexor <b>42</b>B, and opcode decode unit <b>44</b>B. Similarly, decode unit <b>20</b>C includes early decode unit <b>40</b>C, multiplexor <b>42</b>C, and opcode decode unit <b>44</b>C.</p><p>Certain instructions in the x86 instruction set are both fairly complicated and frequently used. In one embodiment of microprocessor <b>10</b>, such instructions include more complex operations than the hardware included within a particular functional unit <b>24</b>A-<b>24</b>C is configured to perform. Such instructions are classified as a special type of MROM instruction referred to as a \u201cdouble dispatch\u201d instruction. These instructions are dispatched to a pair of opcode decode units <b>44</b>. It is noted that opcode decode units <b>44</b> are coupled to respective reservation stations <b>22</b>. Each of opcode decode units <b>44</b>A-<b>44</b>C forms an issue position with the corresponding reservation station <b>22</b>A-<b>22</b>C and functional unit <b>24</b>A-<b>24</b>C. Instructions are passed from an opcode decode unit <b>44</b> to the corresponding reservation station <b>22</b> and further to the corresponding functional unit <b>24</b>.</p><p>Multiplexor <b>42</b>B is included for selecting between the instructions provided by MROM unit <b>34</b> and by early decode unit <b>40</b>B. During times in which MROM unit <b>34</b> is dispatching instructions, multiplexor <b>42</b>B selects instructions provided by MROM unit <b>34</b>. At other times, multiplexor <b>42</b>B selects instructions provided by early decode unit <b>40</b>B. Similarly, multiplexor <b>42</b>C selects between instructions provided by MROM unit <b>34</b>, early decode unit <b>40</b>B, and early decode unit <b>40</b>C. The instruction from MROM unit <b>34</b> is selected during times in which MROM unit <b>34</b> is dispatching instructions. During times in which the early decode unit within decode unit <b>20</b>A (not shown) detects a double dispatch instruction, the instruction from early decode unit <b>40</b>B is selected by multiplexor <b>42</b>C. Otherwise, the instruction from early decode unit <b>40</b>C is selected. Selecting the instruction from early decode unit <b>40</b>B into opcode decode unit <b>44</b>C allows a fast path instruction decoded by decode unit <b>20</b>B to be dispatched concurrently with a double dispatch instruction decoded by decode unit <b>20</b>A.</p><p>According to one embodiment employing the x86 instruction set, early decode units <b>40</b> perform the following operations:</p><p>(i) merge the prefix bytes of the instruction into an encoded prefix byte;</p><p>(ii) decode unconditional branch instructions (which may include the unconditional jump, the CALL, and the RETURN) which were not detected during branch prediction;</p><p>(iii) decode source and destination flags;</p><p>(iv) decode the source and destination operands which are register operands and generate operand size information; and</p><p>(v) determine the displacement and/or immediate size so that displacement and immediate data may be routed to the opcode decode unit.</p><p>Opcode decode units <b>44</b> are configured to decode the opcode of the instruction, producing control values for functional unit <b>24</b>. Displacement and immediate data are routed with the control values to reservation stations <b>22</b>.</p><p>Since early decode units <b>40</b> detect operands, the outputs of multiplexors <b>42</b> are routed to register file <b>30</b> and reorder buffer <b>32</b>. Operand values or tags may thereby be routed to reservation stations <b>22</b>. Additionally, memory operands are detected by early decode units <b>40</b>. Therefore, the outputs of multiplexors <b>42</b> are routed to load/store unit <b>26</b>. Memory operations corresponding to instructions having memory operands are stored by load/store unit <b>26</b>.</p><p>Turning now to FIG. 3, a diagram of an exemplary group of contiguous instruction bytes <b>50</b> and a corresponding set of branch selectors <b>52</b> are shown. In FIG. 3, each byte within an instruction is illustrated by a short vertical line (e.g. reference number <b>54</b>). Additionally, the vertical lines separating instructions in group <b>50</b> delimit bytes (e.g. reference number <b>56</b>). The instructions shown in FIG. 3 are variable in length, and therefore the instruction set including the instructions shown in FIG. 3 is a variable byte length instruction set. In other words, a first instruction within the variable byte length instruction set may occupy a first number of bytes which is different than a second number of bytes occupied by a second instruction within the instruction set. Other instruction sets may be fixed-length, such that each instruction within the instruction set occupies the same number of bytes as each other instruction.</p><p>As illustrated in FIG. 3, group <b>50</b> includes non-branch instructions IN<b>0</b>-IN<b>5</b>. Instructions IN<b>0</b>, IN<b>3</b>, IN<b>4</b>, and IN<b>5</b> are two byte instructions. Instruction IN<b>1</b> is a one byte instruction and instruction IN<b>2</b> is a three byte instruction. Two predicted-taken branch instructions PB<b>0</b> and PB<b>1</b> are illustrated as well, each shown as occupying two bytes. It is noted that both non-branch and branch instructions may occupy various numbers of bytes.</p><p>The end byte of each predicted-taken branch PB<b>0</b> and PB<b>1</b> provides a division of group <b>50</b> into three regions: a first region <b>58</b>, a second region <b>60</b>, and a third region <b>62</b>. If a fetch address identifying group <b>50</b> is presented, and the offset of the fetch address within the group identifies a byte position within first region <b>58</b>, then the first predicted-taken branch instruction to be encountered is PB<b>0</b> and therefore the branch prediction for PB<b>0</b> is selected by the branch prediction mechanism. Similarly, if the offset of the fetch address identifies a byte within second region <b>60</b>, the appropriate branch prediction is the branch prediction for PB<b>1</b>. Finally, if the offset of the fetch address identifies a byte within third region <b>62</b>, then there is no predicted-taken branch instruction within the group of instruction bytes and subsequent to the identified byte. Therefore, the branch prediction for third region <b>62</b> is sequential. The sequential address identifies the group of instruction bytes which immediately follows group <b>50</b> within main memory.</p><p>As used herein, the offset of an address comprises a number of least significant bits of the address. The number is sufficient to provide different encodings of the bits for each byte within the group of bytes to which the offset relates. For example, group <b>50</b> is 16 bytes. Therefore, four least significant bits of an address within the group form the offset of the address. The remaining bits of the address identify group <b>50</b> from other groups of contiguous instruction bytes within the main memory. Additionally, a number of least significant bits of the remaining bits form an index used by instruction cache <b>16</b> to select a row of storage locations which are eligible for storing group <b>50</b>.</p><p>Set <b>52</b> is an exemplary set of branch selectors for group <b>50</b>. One branch selector is included for each byte within group <b>50</b>. The branch selectors within set <b>52</b> use the encoding shown in FIG. 12 below. In the example, the branch prediction for PB<b>0</b> is stored as the second of two branch predictions associated with group <b>50</b> (as indicated by a branch selector value of \u201c3\u201d). Therefore, the branch selector for each byte within first region <b>58</b> is set to \u201c3\u201d. Similarly, the branch prediction for PB<b>1</b> is stored as the first of the branch predictions (as indicated by a branch selector value of \u201c2\u201d). Therefore, the branch selector for each byte within second region <b>60</b> is set to \u201c2\u201d. Finally, the sequential branch prediction is indicated by the branch selectors for bytes within third region <b>62</b> by a branch selector encoding of \u201c0\u201d.</p><p>It is noted that, due to the variable byte length nature of the x86 instruction set, a branch instruction may begin within one group of contiguous instruction bytes and end within a second group of contiguous instruction bytes. In such a case, the branch prediction for the branch instruction is stored with the second group of contiguous instruction bytes. Among other things, the bytes of the branch instruction which are stored within the second group of contiguous instruction bytes need to be fetched and dispatched. Forming the branch prediction in the first group of contiguous instruction bytes would cause the bytes of the branch instruction which lie within the second group of instruction bytes not to be fetched.</p><p>Employing a set of branch selectors such as set <b>52</b> allows for a rapid determination of the predicted fetch address (i.e. by decoding the offset portion of the fetch address and selecting the corresponding selector from set <b>52</b>). However, a large number of branch selectors are stored (i.e. one for each byte). The amount of branch prediction storage employed for storing the branch selectors would correspondingly be large. Still further, a relatively wide selection device (such as a mux) would be needed to select the branch selector in response to the offset of the fetch address. The wider the selection device, in general, the greater the delay in propagating the selected value through the selection device (e.g. the selected branch selector).</p><p>FIG. 3 illustrates that the branch selector for each byte within a region is the same, and regions are delimited by branch instructions (more particularly, predicted-taken branch instructions). Branch instructions would generally include at least an opcode (identifying the branch instruction within the instruction set employed by microprocessor <b>10</b>) and a displacement to be added to the address of the branch instruction (or the address of the instruction immediately following the branch instruction) to form the branch target address. Therefore, a branch instruction occupies at least two bytes. By taking advantage of this fact, the number of branch selectors stored with respect to a group of contiguous instruction bytes may be reduced.</p><p>For the remainder of this description, the x86 microprocessor architecture will be used as an example. However, the branch selector technique described herein may be employed within any microprocessor architecture, and such embodiments are contemplated. It is noted that, in the x86 microprocessor architecture, a subroutine return instruction is defined (e.g. the RET instruction). The subroutine return instruction specifies that its branch target address is drawn from the top of the stack indicated by the ESP register. Therefore, the RET instruction is a single byte (i.e. an opcode byte). Handling of the single byte RET instruction with branch selectors taking advantage of the at least two byte per branch instruction general rule is illustrated in more detail below.</p><p>Turning next to FIG. 4, a diagram illustrating group <b>50</b>, regions <b>58</b>, <b>60</b>, and <b>62</b>, and one embodiment of a set of branch selectors <b>70</b> is illustrated. The branch selectors within set <b>70</b> correspond to byte ranges defined within group <b>50</b>. For the example shown in FIG. 4, nine branch selectors are used for a group of <b>16</b> contiguous instruction bytes. Set <b>70</b> therefore occupies less storage within a branch prediction storage than set <b>52</b> shown in FIG. 3 occupies, allowing the branch prediction storage to be made smaller. Still further, a narrower selection device may be used to select a branch selector in response to a fetch address. The selected branch selector may be provided more rapidly, and may thereby provide for a higher frequency implementation in which predicted fetch addresses are provided each clock cycle.</p><p>Generally, the largest byte range defined for a given branch selector may be made equal to the shortest branch instruction (excluding the return instruction as described in more detail below). The majority of the byte ranges are selected to be the largest size. However, to handle certain conditions, the embodiment shown in FIG. 4 employs two byte ranges which are smaller than the maximum size. In particular, the initial byte of the group <b>50</b> forms a byte range having a single byte (as explained in more detail below with respect to FIG. <b>6</b>). Since group <b>50</b> is an even number of bytes, the byte range corresponding to the initial byte includes only the initial byte, and the largest byte range is two bytes in this example, another byte range is defined to have a single byte as well. For set <b>70</b>, the byte within group <b>50</b> which is contiguous to the initial byte is selected to be a single byte range. This selection allows for a relatively simple decode of the offset of the fetch address to select a branch selector, as illustrated in FIG. <b>5</b>.</p><p>Since the byte ranges are selected to be no larger than the shortest branch instruction, a branch instruction may begin in one byte range and end in a subsequent byte range. However, at most one branch instruction ends in a particular byte range, even if branch instructions are consecutive within a particular group of contiguous instruction bytes. For the case of a branch instruction which ends within a particular byte range but not at the end of the byte range, the branch selector for that byte range is selected to be the branch selector corresponding to instruction bytes subsequent to the branch instruction. For example, the branch selector for byte range <b>72</b> (which includes bytes <b>3</b>-<b>4</b>, where the initial byte is numbered byte <b>0</b>) indicates the branch prediction corresponding to predicted branch PB<b>1</b>. The above rule is used because a fetch address within the byte range is not fetching the branch instruction (which begins in the preceding byte range). Therefore, the correct branch prediction is the prediction for the subsequent branch.</p><p>On the other hand, if the branch instruction ends at the last byte within the byte range, the branch selector for the byte range is the branch selector corresponding to the branch instruction (e.g. byte range <b>74</b>). Therefore, if a fetch address specifying predicted branch PB<b>1</b> (i.e. the offset is within byte range <b>74</b>), then the branch prediction used for the fetch is the branch prediction corresponding to branch PB<b>1</b>.</p><p>Turning now to FIG. 5, a table <b>76</b> is shown corresponding to the selection of byte ranges for branch selectors as illustrated in the example of FIG. <b>4</b>. The row of table <b>76</b> labeled \u201cByte Position\u201d lists the byte positions within group <b>50</b> which correspond to each byte range (i.e. the offset portion of the address for each byte which is within each byte range). The row labeled \u201cBranch Selector Position\u201d illustrates the branch selector position within the set <b>70</b> of the branch selector corresponding to each byte range. The row labeled \u201cRead Addresses\u201d lists the fetch address offsets (in binary) which are decoded to select the branch selector within the corresponding byte range (in order to form a predicted fetch address for the subsequent clock cycle). An \u201cx\u201d in the read addresses indicates a don't care position. Finally, the row labeled \u201cEncoding Addresses\u201d lists the fetch address offsets (in binary) at which a branch instruction can end and still have the branch selector for that byte range indicate the branch prediction corresponding to that branch instruction. For example, branch selector position <b>2</b> can indicate the branch prediction for a branch instruction which ends at either byte position <b>3</b> or <b>4</b>. More particularly, a branch instruction which ends at byte position <b>2</b> is not represented by the branch selector in branch selector position <b>2</b> (because the branch instruction begins in a different byte range than that associated with branch selector position <b>2</b>, and is therefore not being fetched if the fetch address offset is within the byte range associated with branch selector position <b>2</b>).</p><p>The \u201cRead Addresses\u201d row of table <b>76</b> illustrates that a relatively simple decoding of the fetch address offset can be used to select the appropriate branch selector for that fetch address. The decoding for branch selector positions <b>0</b> and <b>1</b> include each of the fetch address offset bits, but the decoding for the remaining positions may exclude the least significant bit (since it is a don't care). A rapid decode and branch selector selection may be achieved using the allocation of byte ranges illustrated in FIG. <b>4</b>.</p><p>Turning now to FIG. 6, a first example <b>80</b> of branch selectors for the byte ranges shown in FIGS. 4 and 5 is shown. Example <b>80</b> illustrates the use of the byte range including only byte <b>0</b> of a group of contiguous instruction bytes. Example <b>80</b> shows an instruction IN<b>0</b> ending at byte \u201cE\u201d of a first group of contiguous instruction bytes, a predicted branch PB<b>0</b> extended from byte \u201cF\u201d of the first group to byte <b>0</b> of a second group of contiguous instruction bytes which are sequential to the first group, and an instruction IN<b>1</b> beginning at byte \u201c1\u201d of the second group.</p><p>Since branch instruction PB<b>0</b> does not end until byte <b>0</b> of the second group, the second group needs to be fetched from instruction cache <b>16</b>. Therefore, the branch selector corresponding to bytes \u201cE\u201d and \u201cF\u201d of the first group indicates sequential, thereby causing the second group to be fetched. The sequential fetch address includes an offset portion set to zero (since bytes immediately subsequent to the last bytes of the first group are being fetched). Therefore, the branch selector corresponding to byte \u201c<b>0</b>\u201d of the second group is selected. The branch selector is coded to select the branch prediction corresponding to branch instruction PB<b>0</b>.</p><p>If a bytes <b>0</b> and <b>1</b> of the second group formed a byte range similar to the other byte ranges shown in FIGS. 4 and 5, branch instruction PB<b>0</b> would not be predictable. To allow for predictions of branches which extend across groups of instruction bytes, the byte ranges are defined to include a byte range consisting of byte \u201c<b>0</b>\u201d in the present embodiment.</p><p>Turning now to FIG. 7, a second example <b>82</b> of branch selectors for the byte ranges shown in FIGS. 4 and 5 is shown. Example <b>82</b> illustrates a situation in which a predicted branch instruction PB<b>0</b> is followed by a return instruction RET. Branch instruction PB<b>0</b> ends at byte \u201c4\u201d, which is within the byte range corresponding to branch selector position <b>3</b> (i.e. byte \u201c<b>4</b>\u201d is not the last byte in the byte range). Therefore, the branch selector at branch selector position <b>3</b> does not select the branch prediction for PB<b>0</b>, as noted above regarding a branch instruction which ends within a byte range. The RET instruction does end at the last byte of the byte range. Therefore, the branch selector for branch selector position <b>3</b> indicates the return instruction (i.e. an encoding of \u201c1\u201d in example <b>82</b>).</p><p>On the other hand, FIG. 8 illustrates an example <b>84</b> in which a return instruction is not predicted. Example <b>84</b> includes a predicted branch instruction PB<b>0</b>, a return instruction RET, and an instruction IN<b>1</b>. Branch instruction PB<b>0</b> ends at the last byte of the byte range corresponding to branch selector position <b>2</b>, and therefore the corresponding branch selector is encoded to select the branch prediction corresponding to branch instruction PB<b>0</b>. The return instruction ends within the byte range corresponding to branch selector position <b>3</b>, and therefore the corresponding branch selector does not indicate the return instruction. In this manner, if instruction IN<b>0</b> is indicated by the fetch address, the return instruction will not be erroneously predicted by the branch selector at branch selector position <b>3</b>. However, if the return instruction is the byte indicated by the fetch address, an incorrect prediction results.</p><p>It is noted that the code sequence shown in example <b>84</b> may be uncommon, because often times temporary variables are popped from the stack just prior to executing a return instruction. Therefore, a predicted taken branch would not often immediately precede a return instruction.</p><p>FIG. 9 illustrates an example <b>86</b> of in which a return instruction may be mispredicted. In example <b>86</b>, a return instruction is followed immediately by a predicted branch instruction PB<b>0</b>. This code sequence may again be infrequent, since the only way to execute branch instruction PB<b>0</b> is to branch directly to the instruction from elsewhere in the code sequence. Also, the return instruction is only mispredicted in example <b>86</b> if branched to directly. If instruction IN<b>0</b> is fetched and executed, the return instruction is correctly predicted.</p><p>Turning now to FIG. 10, a portion of one embodiment of branch prediction unit <b>14</b> is shown. Other embodiments of branch prediction unit <b>14</b> and the portion shown in FIG. 10 are contemplated. As shown in FIG. 10, branch prediction unit <b>14</b> includes a branch prediction storage <b>90</b>, a way multiplexor <b>92</b>, a branch selector multiplexor <b>94</b>, a branch prediction multiplexor <b>96</b>, a sequential/return multiplexor <b>98</b>, a final prediction multiplexor <b>100</b>, an update logic block <b>102</b>, and a decoder <b>104</b>. Branch prediction storage <b>90</b> and decoder <b>104</b> are coupled to a fetch address bus <b>106</b> from instruction cache <b>16</b>. A fetch address concurrently provided to instruction cache <b>16</b> is conveyed upon fetch address bus <b>106</b>. Decoder block <b>104</b> provides selection controls to branch selector multiplexor <b>94</b>. Prediction controls for way multiplexor <b>92</b> are provided via a way selection bus <b>108</b> from instruction cache <b>16</b>. Way selection bus <b>108</b> provides the way of instruction cache <b>16</b> which is storing the cache line corresponding to the fetch address provided on fetch address bus <b>106</b>. Additionally, a selection control is provided by decoder <b>104</b> based upon which portion of the cache line is being fetched. Way multiplexor <b>92</b> is coupled to receive the contents of each storage location within the row of branch prediction storage <b>90</b> which is indexed by the fetch address upon fetch address bus <b>106</b>. Branch selector multiplexor <b>94</b> and branch prediction multiplexor <b>96</b> are coupled to receive portions of the output of way multiplexor <b>92</b> as inputs. Additionally, the output of branch selector multiplexor <b>94</b> provides selection controls for multiplexors <b>96</b>, <b>98</b>, and <b>100</b>. Sequential/return multiplexor <b>98</b> selects between a sequential address provided upon a sequential address bus <b>110</b> from instruction cache <b>16</b> and a return address provided upon a return address bus <b>112</b> from a return stack. The output of multiplexors <b>96</b> and <b>98</b> is provided to final prediction multiplexor <b>100</b>, which provides a branch prediction bus <b>114</b> to instruction cache <b>16</b>. Instruction cache <b>16</b> uses the branch prediction provided upon branch prediction bus <b>114</b> as the fetch address for the subsequent clock cycle. Update logic block <b>102</b> is coupled to branch prediction storage <b>90</b> via an update bus <b>116</b> used to update branch prediction information stored therein. Update logic block <b>102</b> provides updates in response to a misprediction signalled via a mispredict bus <b>118</b> from functional units <b>24</b> and decode units <b>20</b>. Additionally, update logic block <b>102</b> provides updates in response to newly predecoded instruction indicated by prefetch/predecode unit <b>12</b> upon a predecode bus <b>120</b>.</p><p>In the present embodiment, branch prediction storage <b>90</b> is arranged with a number of ways equal to the number of ways in instruction cache <b>16</b>. For each way, a branch prediction entry is stored for each group of contiguous instruction bytes existing within a cache line. In the embodiment of FIG. 10, two groups of instruction bytes are included in each cache line. Therefore, branch prediction entry P<sub>00 </sub>is the branch prediction entry corresponding to the first group of contiguous instruction bytes in the first way and branch prediction entry P<sub>01 </sub>is the branch prediction entry corresponding to the second group of contiguous instruction bytes in the first way. Similarly, branch prediction entry P<sub>10 </sub>is the branch prediction entry corresponding to the first group of contiguous instruction bytes in the second way and branch prediction entry P<sub>11 </sub>is the branch prediction entry corresponding to the second group of contiguous instruction bytes in the second way, etc. Each branch prediction entry P<sub>00 </sub>to P<sub>31 </sub>in the indexed row is provided as an output of branch prediction storage <b>90</b>, and hence as an input to way multiplexor <b>92</b>. The indexed row is similar to indexing into a cache: a number of bits which are not part of the offset portion of the fetch address are used to select one of the rows of branch prediction storage <b>90</b>. It is noted that branch prediction storage <b>90</b> may be configured with fewer rows than instruction cache <b>16</b>. For example, branch prediction storage <b>90</b> may include \u00bc the number of rows of instruction cache <b>16</b>. In such a case, the address bits which are index bits of instruction cache <b>16</b> but which are not index bits of branch prediction storage <b>90</b> may be stored with the branch prediction information and checked against the corresponding bits of the fetch address to confirm that the branch prediction information is associated with the row of instruction cache <b>16</b> which is being accessed.</p><p>Way multiplexor <b>92</b> selects one of the sets of branch prediction information P<sub>00</sub>-P<sub>31 </sub>based upon the way selection provided from instruction cache <b>16</b> and the group of instruction bytes referenced by the fetch address. In the embodiment shown, for example, a 32 byte cache line is divided into two 16 byte groups. Therefore, the fifth least significant bit of the fetch address is used to select which of the two groups contains the fetch address. If the fifth least significant bit is zero, then the first group of contiguous instruction bytes is selected. If the fifth least significant bit is one, then the second group of contiguous instruction bytes is selected. It is noted that the way selection provided upon way selection bus <b>108</b> may be a way prediction produced by a branch prediction from the previous clock cycle, according to one embodiment. Alternatively, the way selection may be generated via tag comparisons between the fetch address and the address tags identifying the cache lines stored in each way of the instruction cache. It is noted that an address tag is the portion of the address which is not an offset within the cache line nor an index into the instruction cache.</p><p>The selected branch prediction entry provided by way multiplexor <b>92</b> includes a set of branch selectors corresponding to the group of contiguous instruction bytes, as well as branch predictions BP<b>1</b> and BP<b>2</b>. The branch selectors are provided to branch selector multiplexor <b>94</b>, which selects one of the branch selectors based upon selection controls provided by decoder <b>104</b>. Decoder <b>104</b> decodes the offset of the fetch address into the group of contiguous instruction bytes to select the corresponding branch selector (for example, according to the \u201cread address\u201d row of table <b>76</b>, in one embodiment). For example, if a group of contiguous instruction bytes is 16 bytes, then decoder <b>104</b> decodes the four least significant bits of the fetch address. In this manner, a branch selector is chosen.</p><p>The selected branch selector is used to provide selection controls to branch prediction multiplexor <b>96</b>, sequential/return multiplexor <b>98</b>, and final prediction multiplexor <b>100</b>. In one embodiment, the encoding of the branch selector can be used directly as the multiplexor select controls. In other embodiments, a logic block may be inserted between branch selector multiplexor <b>94</b> and multiplexors <b>96</b>, <b>98</b>, and <b>100</b>. For the embodiment shown, branch selectors comprise two bits. One bit of the selected branch selector provides the selection control for prediction multiplexor <b>96</b> and sequential/return multiplexor <b>98</b>. The other bit provides a selection control for final prediction multiplexor <b>100</b>. A branch prediction is thereby selected from the multiple branch predictions stored in branch prediction storage <b>90</b> corresponding to the group of contiguous instruction bytes being fetched, the sequential address of the group of contiguous instruction bytes sequential to the group of contiguous instruction bytes being fetched, and a return stack address from a return stack structure. It is noted that multiplexors <b>96</b>, <b>98</b>, and <b>100</b> may be combined into a single <b>4</b> to <b>1</b> multiplexor for which the selected branch selector provides selection controls to select between the two branch predictions from branch prediction storage <b>90</b>, the sequential address, and the return address.</p><p>The return stack structure (not shown) is used to store return addresses corresponding to subroutine call instructions previously fetched by microprocessor <b>10</b>. In one embodiment, the branch predictions stored by branch prediction storage <b>90</b> include an indication that the branch prediction corresponds to a subroutine call instruction. Subroutine call instructions are a subset of branch instructions which save the address of the sequential instruction (the return address) in addition to redirecting the instruction stream to the target address of the subroutine call instruction. For example, the in the x86 microprocessor architecture, the subroutine call instruction (CALL) pushes the return address onto the stack indicated by the ESP register.</p><p>A subroutine return instruction is another subset of the branch instructions. The subroutine return instruction uses the return address saved by the most recently executed subroutine call instruction as a target address. Therefore, when a branch prediction includes an indication that the branch prediction corresponds to a subroutine call instruction, the sequential address to the subroutine call instruction is placed at the top of the return stack. When a subroutine return instruction is encountered (as indicted by a particular branch selector encoding), the address nearest the top of the return stack which has not previously been used as a prediction is used as the prediction of the address. The address nearest the top of the return stack which has not previously been used as a prediction is conveyed by the return stack upon return address bus <b>112</b> (along with the predicted way of the return address, provided to the return stack similar to its provision upon way selection bus <b>108</b>. Branch prediction unit <b>14</b> informs the return stack when the return address is selected as the prediction. Additional details regarding an exemplary return stack structure may be found in the commonly assigned, co-pending patent application entitled: \u201cSpeculative Return Address Prediction Unit for a Superscalar Microprocessor\u201d, Ser. No. 08/550,296, filed Oct. 30, 1995 by Mahalingaiah, et al. The disclosure of the referenced patent application is incorporated herein by reference in its entirety.</p><p>The sequential address is provided by instruction cache <b>16</b>. The sequential address identifies the next group of contiguous instruction bytes within main memory to the group of instruction bytes indicated by the fetch address upon fetch address bus <b>106</b>. It is noted that, according to one embodiment, a way prediction is supplied for the sequential address when the sequential address is selected. The way prediction may be selected to be the same as the way selected for the fetch address. Alternatively, a way prediction for the sequential address may be stored within branch prediction storage <b>90</b>.</p><p>As mentioned above, update logic block <b>102</b> is configured to update a branch prediction entry upon detection of a branch misprediction or upon detection of a branch instruction while predecoding the corresponding group of contiguous instruction bytes in prefetch/predecode unit <b>12</b>. The branch prediction entry corresponding to each branch prediction may be stored in update logic block <b>102</b> as the prediction is performed. A branch tag is conveyed along with the instructions being fetched (via a branch tag bus <b>122</b>), such that if a misprediction is detected or a branch instruction is detected during predecoding, the corresponding branch prediction entry can be identified via the branch tag. In one embodiment, the branch prediction entry as shown in FIG. 11 is stored, as well as the index of the fetch address which caused the branch prediction entry to be fetched and the way in which the branch prediction entry is stored.</p><p>When a branch misprediction is detected, the corresponding branch tag is provided upon mispredict bus <b>118</b> from either the functional unit <b>24</b> which executes the branch instruction or from decode units <b>20</b>. If decode units <b>20</b> provide the branch tag, then the misprediction is of the previously undetected type (e.g. there are more branch instructions in the group than can be predicted using the corresponding branch predictions). Decode units <b>20</b> detect mispredictions of unconditional branch instructions (i.e. branch instructions which always select the target address). Functional units <b>24</b> may detect a misprediction due to a previously undetected conditional branch instruction or due to an incorrect taken/not-taken prediction. Update logic <b>102</b> selects the corresponding branch prediction entry out of the aforementioned storage. In the case of a previously undetected branch instruction, one of the branch predictions within the branch prediction entry is assigned to the previously undetected branch instruction. According to one embodiment, the algorithm for selecting one of the branch predictions to store the branch prediction for the previously undetected branch instruction is as follows: If the branch instruction is a subroutine return instruction, the branch selector for the instruction is selected to be the value indicating the return stack. Otherwise, a branch prediction which is currently predicted not-taken is selected. If each branch prediction is currently predicted-taken, then a branch prediction is randomly selected.</p><p>The branch selector for the newly detected branch instruction is set to indicate the selected branch prediction. Additionally, the branch selectors corresponding to byte ranges between the first branch instruction prior to the newly detected branch instruction and the newly detected branch instruction are set to the branch selector corresponding to the new prediction. FIG. 14 below describes one method for updating the branch selectors. For a mispredicted taken prediction which causes the prediction to become predicted not-taken, the branch selectors corresponding to the mispredicted prediction are set to the branch selector corresponding to the byte subsequent to the mispredicted branch instruction. In this manner, a prediction for a subsequent branch instruction will be used if the instructions are fetched again at a later clock cycle.</p><p>When prefetch/predecode unit <b>12</b> detects a branch instruction while predecoding a group of contiguous instruction bytes, prefetch/predecode unit <b>12</b> provides the branch tag for the group of contiguous instruction bytes if the predecoding is performed because invalid predecode information is stored in the instruction cache for the cache line (case (i)). Alternatively, if the predecoding is being performed upon a cache line being fetched from the main memory subsystem, prefetch/predecode unit <b>12</b> provides the address of the group of contiguous instruction bytes being predecoded, the offset of the end byte of the branch instruction within the group, and the way of the instruction cache selected to store the group (case (ii)). In case (i), the update is performed similar to the branch misprediction case above. In case (ii), there is not yet a valid branch prediction entry stored in branch prediction storage <b>90</b> for the group of instructions. For this case, update logic block <b>102</b> initializes the branch selectors prior to the detected branch to the branch selector selected for the detected branch. Furthermore, the branch selectors subsequent to the detected branch are initialized to the sequential value. Alternatively, each of the branch selectors may be initialized to sequential when the corresponding cache line in instruction cache <b>16</b> is allocated, and subsequently updated via detection of a branch instructions during predecode in a manner similar to case (i).</p><p>Upon generation of an update, update logic block <b>102</b> conveys the updated branch prediction entry, along with the fetch address index and corresponding way, upon update bus <b>116</b> for storage in branch prediction storage <b>90</b>. It is noted that, in order to maintain branch prediction storage <b>90</b> as a single ported storage, branch prediction storage <b>90</b> may employ a branch holding register. The updated prediction information is stored into the branch holding register and updated into the branch prediction storage upon an idle cycle on fetch address bus <b>106</b>. An exemplary cache holding register structure is described in the commonly assigned, co-pending patent application entitled: \u201cDelayed Update Register for an Array\u201d, Ser. No. 08/481,914, filed Jun. 7, 1995, now abandoned, by Tran, et al., incorporated herein by reference in its entirety.</p><p>It is noted that a correctly predicted branch instruction may result in an update to the corresponding branch prediction as well. A counter indicative of previous executions of the branch instruction (used to form the taken/not-taken prediction of the branch instruction) may need to be incremented or decremented, for example. Such updates are performed upon retirement of the corresponding branch prediction. Retirement is indicated via a branch tag upon retire tag bus <b>124</b> from reorder buffer <b>32</b>.</p><p>It is noted that the structure of FIG. 10 may be further accelerated through the use of a predicted branch selector. The predicted branch selector is stored with each branch prediction entry and is set to the branch selector selected in a previous fetch of the corresponding group of contiguous instruction bytes. The predicted branch selector is used to select the branch prediction, removing branch selector multiplexor <b>94</b> from the path of branch prediction generation. Branch selector multiplexor <b>94</b> is still employed, however, to verify the selected branch selector is equal to the predicted branch selector. If the selected branch selector and the predicted branch selector are not equal, then the selected branch selector is used to provide the correct branch prediction during the succeeding clock cycle and the fetch of the incorrect branch prediction is cancelled.</p><p>Turning now to FIG. 11, an exemplary branch prediction entry <b>130</b> employed by one embodiment of the branch prediction unit <b>14</b> as shown in FIG. 10 is shown Branch prediction entry <b>130</b> includes a set of branch selectors <b>136</b>, a first branch prediction (BP<b>1</b>) <b>132</b>, and a second branch prediction (BP<b>2</b>) <b>134</b>. Set of branch selectors <b>136</b> includes a branch selector for each byte range of the group of contiguous instruction bytes corresponding to branch prediction entry <b>130</b>.</p><p>First branch prediction <b>132</b> is shown in an exploded view in FIG. <b>11</b>. Second branch prediction <b>134</b> may be configured similarly. First branch prediction <b>132</b> includes an index <b>140</b> for the cache line containing instruction bytes corresponding to the target address, and a way selection <b>144</b> for the cache line as well. According to one embodiment, index <b>140</b> includes the offset portion of the target address, as well as the index. Index <b>140</b> is concatenated with the tag of the way indicated by way selection <b>144</b> to form the branch target address. Alternatively, the entire branch target address may be stored in index field <b>140</b>. Way prediction may be provided in addition to the entire branch target address, or way selection may be performed using tag comparisons against the tags in the indexed row of instruction cache <b>16</b>.</p><p>Additionally, a predictor <b>146</b> is stored for each branch prediction. Predictor <b>146</b> is incremented each time the corresponding branch instruction is executed and is taken, and is decremented each time the corresponding branch instruction is executed and is not-taken. The most significant bit of predictor <b>146</b> is used as the taken/not-taken prediction. If the most significant bit is set, the branch instruction is predicted taken. Conversely, the branch instruction is predicted not-taken if the most significant bit is clear. In one embodiment, the prediction counter is a two bit saturating counter. The counter saturates when incremented at binary \u201811\u2019 and saturates when decremented at a binary \u201801\u2019. In another embodiment, the predictor is a single bit which indicates a strong (a binary one) or a weak (a binary zero) taken prediction. If a strong taken prediction is mispredicted, it becomes a weak taken prediction. If a weak taken prediction is mispredicted, the branch becomes predicted not taken and the branch selector is updated (i.e. the case of a mispredicted branch that becomes not-taken). Finally, a call bit <b>148</b> is included in first branch prediction <b>132</b>. Call bit <b>148</b> is indicative, when set, that the corresponding branch instruction is a subroutine call instruction. If call bit <b>148</b> is set, the current fetch address and way are stored into the return stack structure mentioned above.</p><p>Turning next to FIG. 12, a table <b>138</b> illustrating an exemplary branch selector encoding is shown. A binary encoding is listed (most significant bit first), followed by the branch prediction which is selected when the branch selector is encoded with the corresponding value. As table <b>138</b> illustrates, the least significant bit of the branch selector can be used as a selection control for branch prediction multiplexor <b>96</b> and sequential/return multiplexor <b>98</b>. If the least significant bit is clear, then the first branch prediction is selected by branch prediction multiplexor <b>96</b> and the sequential address is selected by sequential/return multiplexor <b>98</b>. On the other hand, the second branch prediction is selected by branch prediction multiplexor <b>96</b> and the return address is selected by sequential/return multiplexor <b>98</b> if the least significant bit is clear. Furthermore, the most significant bit of the branch selector can be used as a selection control for final prediction multiplexor <b>100</b>. If the most significant bit is set, the output of branch prediction multiplexor <b>96</b> is selected. If the most significant bit is clear, the output of sequential/return multiplexor <b>98</b> is selected.</p><p>Turning next to FIG. 13, a flowchart is shown illustrating the generation of a valid mask for a group of contiguous instruction bytes fetched from instruction cache <b>16</b> according to the byte ranges defined in FIGS. 4 and 5. The valid mask includes a bit for each instruction byte within the group, indicating whether or not the byte is part of the predicted instruction stream. Valid bits within the mask are set between the byte selected by the offset portion of the fetch address and the branch instruction being predicted by the selected branch prediction. Those bytes comprise the instructions being fetched from the group of contiguous instruction bytes read from instruction cache <b>16</b>. Bytes prior to the offset of the fetch address are not being fetched, and bytes subsequent to the predicted taken branch instruction are not being fetched either. The end of the branch instruction is approximately located by the last instance of the corresponding branch selector. However, an adjustment may be made to cover the last byte of the branch instruction in cases in which the branch instruction ends within a byte range.</p><p>The current branch selector (i.e. the branch selector selected by branch prediction unit <b>14</b> by decoding the fetch address) is XNOR'd with the branch selectors corresponding to the group of contiguous instruction bytes (step <b>150</b>), thereby creating a preliminary mask including one bit per byte range. Each byte range corresponding to a branch selector equal to the current branch selector is represented by a set bit in the preliminary mask, and byte ranges including different branch selectors than the current branch selector are represented by a clear bit within the preliminary mask. A first mask is created from the preliminary mask by duplicating each bit in the preliminary mask which corresponds to a byte range having more than one byte (i.e. two bytes in the present embodiment\u2014step <b>152</b>). Generally, the bit is copied until the total number of bits representing the byte range is equal to the number of bytes within that byte range. Additionally, a second mask is created by right shifting the first mask (step <b>154</b>).</p><p>If the predicted taken branch instruction ends within a byte range (as opposed to the end of the byte range), then the valid mask is created by ORing the first mask and the second mask (decision block <b>156</b> and step <b>158</b>). In this manner, bytes within the byte range in which the branch instruction ends which are part of the branch instruction are validated. On the other hand, if the branch instruction ends at the end of a byte range then the branch selector for that byte range indicates the branch instruction. In this case, the first mask is correct without modification using the second mask. Therefore, the first mask is selected as the valid mask (step <b>160</b>).</p><p>Turning now to FIG. 14, a flowchart depicting the steps employed to update the branch selectors of a group of contiguous instruction bytes in response to a mispredicted branch instruction is shown. Updating due to a branch instruction discovered during predecoding may be performed similarly. The misprediction may be the result of detecting a branch instruction for which prediction information is not stored in branch prediction storage <b>90</b>, or may be the result of an incorrect taken/not-taken prediction which causes the corresponding predictor to indicate not-taken.</p><p>Upon detection of the misprediction, branch prediction unit <b>14</b> uses an \u201cend pointer\u201d: the offset of the end byte of the mispredicted branch instruction within the corresponding group of contiguous instruction bytes. Additionally, the branch prediction entry is selected for update using the branch tag received in response to the misprediction. Branch prediction unit <b>14</b> decodes the end pointer into an update mask (step <b>170</b>). The update mask comprises a bit for each byte range within the group of contiguous instruction bytes. Bits corresponding to byte ranges prior to the byte range including the branch instruction's end byte are set (and the bit corresponding to the byte range including the branch instruction's end byte is set if the end byte is the last byte within the byte range), and the remaining bits are clear. Therefore, the update mask identifies each byte range prior to and including the branch instruction.</p><p>Branch prediction unit <b>14</b> identifies the current branch selector. For mispredicted taken/not-taken predictions, the current branch selector is the branch selector corresponding to the mispredicted branch instruction. For misprediction due to an undetected branch, the current branch selector is the branch selector corresponding to the byte range including the end byte of the undetected branch instruction. The current branch selector is XNOR'd with each of the branch selectors to create a branch mask (step <b>172</b>). The branch mask includes bits which are set for each byte range having a branch selector which matches the current branch selector and bits which are clear for each byte range having a branch selector which does not match the current branch selector.</p><p>The update mask created in step <b>170</b> and the branch mask created in step <b>172</b> are subsequently ANDed, producing a final update mask (step <b>174</b>). The final update mask includes bits which are set for each byte range of the group of contiguous instruction bytes which is to be updated to the new branch selector. For a mispredicted taken branch, the new branch selector is the branch selector of the byte range subsequent to the mispredicted taken branch instruction. For an undetected branch, the new branch selector is the branch selector indicating the branch prediction storage assigned to the previously undetected branch by update logic block <b>102</b>.</p><p>An extended mask is also generated (steps <b>176</b> and <b>178</b>). The extended mask indicates which branch selectors are to be erased because the branch prediction corresponding to the branch selector has been reallocated to the newly discovered branch instruction or because the branch prediction now indicates not taken. The extended mask is generated by first creating a second branch mask similar to the branch mask, except using the new branch selector instead of the current branch selector (i.e. the mask is created by XNORing the branch selectors corresponding to the group of contiguous instruction bytes with the new branch selector (step <b>176</b>)). The resulting mask is then ANDed with the inversion of the final update mask to create the extended mask (step <b>178</b>). Branch selectors corresponding to bits in the extended mask which are set are updated to indicate the branch selector of the byte range immediately subsequent to the last byte range for which a bit in the extended mask is set. In this manner, the branch prediction formerly indicated by the branch selector is erased and replaced with the following branch selector. During a step <b>180</b>, the branch selectors are updated in response to the final update mask and the extended mask.</p><p>Turning next to FIG. 15, a diagram illustrating instruction bytes <b>50</b>, regions <b>58</b>, <b>60</b>, and <b>62</b>, and another embodiment of a set of branch selectors <b>190</b> is illustrated. Set <b>190</b> corresponds to a set of byte ranges in which the initial byte range and final byte range each include a single byte, and other ranges include two bytes. Set <b>190</b> may be used as an alternative byte range allocation to the byte ranges allocated in FIG. <b>4</b>. Many other byte range allocations are possible and contemplated in various embodiments. FIG. 16 is a table <b>192</b> similar to table <b>76</b>. Table <b>192</b> illustrates byte positions, branch selector positions, read addresses and encoding addresses for the byte ranges illustrated in FIG. <b>15</b>.</p><p>Turning now to FIG. 17, a computer system <b>200</b> including microprocessor <b>10</b> is shown. Computer system <b>200</b> further includes a bus bridge <b>202</b>, a main memory <b>204</b>, and a plurality of input/output (I/O) devices <b>206</b>A-<b>206</b>N. Plurality of I/O devices <b>206</b>A-<b>206</b>N will be collectively referred to as I/O devices <b>206</b>. Microprocessor <b>10</b>, bus bridge <b>202</b>, and main memory <b>204</b> are coupled to a system bus <b>208</b>. I/O devices <b>206</b> are coupled to an I/O bus <b>210</b> for communication with bus bridge <b>202</b>.</p><p>Bus bridge <b>202</b> is provided to assist in communications between I/O devices <b>206</b> and devices coupled to system bus <b>208</b>. I/O devices <b>206</b> typically require longer bus clock cycles than microprocessor <b>10</b> and other devices coupled to system bus <b>208</b>. Therefore, bus bridge <b>202</b> provides a buffer between system bus <b>208</b> and input/output bus <b>210</b>. Additionally, bus bridge <b>202</b> translates transactions from one bus protocol to another. In one embodiment, input/output bus <b>210</b> is an Enhanced Industry Standard Architecture (EISA) bus and bus bridge <b>202</b> translates from the system bus protocol to the EISA bus protocol. In another embodiment, input/output bus <b>210</b> is a Peripheral Component Interconnect (PCI) bus and bus bridge <b>202</b> translates from the system bus protocol to the PCI bus protocol. It is noted that many variations of system bus protocols exist. Microprocessor <b>10</b> may employ any suitable system bus protocol.</p><p>I/O devices <b>206</b> provide an interface between computer system <b>200</b> and other devices external to the computer system. Exemplary I/O devices include a modem, a serial or parallel port, a sound card, etc. I/O devices <b>206</b> may also be referred to as peripheral devices. Main memory <b>204</b> stores data and instructions for use by microprocessor <b>10</b>. In one embodiment, main memory <b>204</b> includes at least one Dynamic Random Access Memory (DRAM) and a DRAM memory controller.</p><p>It is noted that although computer system <b>200</b> as shown in FIG. 17 includes one bus bridge <b>202</b>, other embodiments of computer system <b>200</b> may include multiple bus bridges <b>202</b> for translating to multiple dissimilar or similar I/O bus protocols. Still further, a cache memory for enhancing the performance of computer system <b>200</b> by storing instructions and data referenced by microprocessor <b>10</b> in a faster memory storage may be included. The cache memory may be inserted between microprocessor <b>10</b> and system bus <b>208</b>, or may reside on system bus <b>208</b> in a \u201clookaside\u201d configuration. It is still further noted that the functions of bus bridge <b>202</b>, main memory <b>204</b>, and the cache memory may be integrated into a chipset which interfaces to microprocessor <b>10</b>.</p><p>It is still further noted that the present discussion may refer to the assertion of various signals. As used herein, a signal is \u201casserted\u201d if it conveys a value indicative of a particular condition. Conversely, a signal is \u201cdeasserted\u201d if it conveys a value indicative of a lack of a particular condition. A signal may be defined to be asserted when it conveys a logical zero value or, conversely, when it conveys a logical one value. Additionally, various values have been described as being discarded in the above discussion. A value may be discarded in a number of manners, but generally involves modifying the value such that it is ignored by logic circuitry which receives the value. For example, if the value comprises a bit, the logic state of the value may be inverted to discard the value. If the value is an n-bit value, one of the n-bit encodings may indicate that the value is invalid. Setting the value to the invalid encoding causes the value to be discarded. Additionally, an n-bit value may include a valid bit indicative, when set, that the n-bit value is valid. Resetting the valid bit may comprise discarding the value. Other methods of discarding a value may be used as well.</p><p>Table 1 below indicates fast path, double dispatch, and MROM instructions for one embodiment of microprocessor <b>10</b> employing the x86 instruction set:</p><p><tables id=\"TABLE-US-00002\"><table colsep=\"0\" frame=\"none\" rowsep=\"0\"><tgroup align=\"left\" cols=\"1\" colsep=\"0\" rowsep=\"0\"><colspec align=\"center\" colname=\"1\" colwidth=\"217PT\"></colspec><thead valign=\"bottom\"><row><entry morerows=\"0\" nameend=\"1\" namest=\"1\" rowsep=\"1\" valign=\"top\">TABLE 1</entry></row></thead><tbody valign=\"top\"><row><entry align=\"center\" morerows=\"0\" nameend=\"1\" namest=\"1\" rowsep=\"1\" valign=\"top\"></entry></row><row><entry morerows=\"0\" valign=\"top\">x86 Fast Path, Double Dispatch, and MROM Instructions</entry></row></tbody></tgroup><tgroup align=\"left\" cols=\"3\" colsep=\"0\" rowsep=\"0\"><colspec align=\"left\" colname=\"OFFSET\" colwidth=\"28PT\"></colspec><colspec align=\"left\" colname=\"1\" colwidth=\"84PT\"></colspec><colspec align=\"left\" colname=\"2\" colwidth=\"105PT\"></colspec><tbody valign=\"top\"><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">X86 Instruction</entry><entry morerows=\"0\" valign=\"top\">Instruction Category</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry align=\"center\" morerows=\"0\" nameend=\"2\" namest=\"OFFSET\" rowsep=\"1\" valign=\"top\"></entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">AAA</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">AAD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">AAM</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">AAS</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">ADC</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">ADD</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">AND</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">ARPL</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">BOUND</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">BSF</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">BSR</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">BSWAP</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">BT</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">BTC</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">BTR</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">BTS</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CALL</entry><entry morerows=\"0\" valign=\"top\">fast path/double dispatch</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CBW</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CWDE</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CLC</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CLD</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CLI</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CLTS</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CMC</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CMP</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CMPS</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CMPSB</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CMPSW</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CMPSD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CMPXCHG</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CMPXCHG8B</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CPUID</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CWD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">CWQ</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">DDA</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">DAS</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">DEC</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">DW</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">ENTER</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">HLT</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">IDIV</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">IMUL</entry><entry morerows=\"0\" valign=\"top\">double dispatch</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">IN</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">INC</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">INS</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">INSB</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">INSW</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">INSD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">INT</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">INTO</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">INVD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">INVLPG</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">IRET</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">IRETD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">Jcc</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">JCXZ</entry><entry morerows=\"0\" valign=\"top\">double dispatch</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">JECXZ</entry><entry morerows=\"0\" valign=\"top\">double dispatch</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">JMP</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LAHF</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LAR</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LDS</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LES</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LFS</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LGS</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LSS</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LEA</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LEAVE</entry><entry morerows=\"0\" valign=\"top\">double dispatch</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LGDT</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LIDT</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LLDT</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LMSW</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LODS</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LODSB</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LODSW</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LODSD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LOOP</entry><entry morerows=\"0\" valign=\"top\">double dispatch</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LOOPcond</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LSL</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">LTR</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">MOV</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">MOVCC</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">MOV.CR</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">MOV.DR</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">MOVS</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">MOVSB</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">MOVSW</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">MOVSD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">MOVSX</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">MQVZX</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">MUL</entry><entry morerows=\"0\" valign=\"top\">double dispatch</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">NEG</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">NOP</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">NOT</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">OR</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">OUT</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">OUTS</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">OUTSB</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">OUTSW</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">OUTSD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">POP</entry><entry morerows=\"0\" valign=\"top\">double dispatch</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">POPA</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">POPAD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">POPF</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">POPFD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">PUSH</entry><entry morerows=\"0\" valign=\"top\">fast path/double dispatch</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">PUSHA</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">PUSHAD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">PUSHF</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">PUSHFD</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">RCL</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">RCR</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">ROL</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">ROR</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">RDMSR</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">REP</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">REPE</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">REPZ</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">REPNE</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">REPNZ</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">RET</entry><entry morerows=\"0\" valign=\"top\">double dispatch</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">RSM</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SAHF</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SAL</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SAR</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SHL</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SHR</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SBB</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SCAS</entry><entry morerows=\"0\" valign=\"top\">double dispatch</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SCASB</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SCASW</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SCASD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SETcc</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SGDT</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SDT</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SHLD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SHRD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SLDT</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SMSW</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">STC</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">STD</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">STI</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">STOS</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">STOSB</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">STOSW</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">STOSD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">STR</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">SUB</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">TEST</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">VERR</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">VERW</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">WBINVD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">WRMSR</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">XADD</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">XCHG</entry><entry morerows=\"0\" valign=\"top\">MROM</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">XLAT</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">XLATB</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry morerows=\"0\" valign=\"top\">XOR</entry><entry morerows=\"0\" valign=\"top\">fast path</entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry align=\"center\" morerows=\"0\" nameend=\"2\" namest=\"OFFSET\" rowsep=\"1\" valign=\"top\"></entry></row><row><entry morerows=\"0\" valign=\"top\"></entry><entry align=\"left\" morerows=\"0\" nameend=\"2\" namest=\"OFFSET\" valign=\"top\">Note: Instructions including an SIB byte are also considered double dispatch instructions. </entry></row></tbody></tgroup></table></tables></p><p>In accordance with the above disclosure, a microprocessor has been described which uses branch selectors to select a branch prediction for use in creating a subsequent fetch address. In order to provide a rapid selection of branch selectors, each branch selector is associated with a byte range, wherein the largest byte range is equal to the shortest branch instruction (in one embodiment). Therefore, a relatively minimal number of branch selectors may be provided while still providing for a highly accurate and rapid branch prediction.</p><p>Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.</p><?DETDESC description=\"Detailed Description\" end=\"tail\"?></description>"}], "inventors": [{"first_name": "Thang M.", "last_name": "Tran", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "ADVANCED MICRO DEVICES, INC."}, {"first_name": "", "last_name": "GLOBALFOUNDRIES U.S. INC.", "name": ""}, {"first_name": "", "last_name": "GLOBALFOUNDRIES INC.", "name": ""}, {"first_name": "", "last_name": "AMD TECHNOLOGIES HOLDINGS, INC.", "name": ""}], "ipc_classes": [{"primary": true, "label": "G06F   9/305"}, {"primary": false, "label": "G06F   9/38"}, {"primary": false, "label": "G06F   9/42"}, {"primary": false, "label": "G06F   9/32"}], "locarno_classes": [], "ipcr_classes": [{"label": "G06F   9/38        20060101A I20051008RMEP"}], "national_classes": [{"primary": true, "label": "712239"}, {"primary": false, "label": "712E09051"}, {"primary": false, "label": "712245"}, {"primary": false, "label": "712236"}, {"primary": false, "label": "711125"}, {"primary": false, "label": "712E09057"}, {"primary": false, "label": "712240"}], "ecla_classes": [{"label": "G06F   9/38B2B"}, {"label": "G06F   9/38E2D"}], "cpc_classes": [{"label": "G06F   9/30054"}, {"label": "G06F   9/3806"}, {"label": "G06F   9/30054"}, {"label": "G06F   9/3806"}, {"label": "G06F   9/3844"}, {"label": "G06F   9/3844"}, {"label": "G06F   9/3806"}, {"label": "G06F   9/30058"}, {"label": "G06F   9/3844"}], "f_term_classes": [], "legal_status": "Expired - Lifetime", "priority_date": "1996-11-19", "application_date": "2000-09-02", "family_members": [{"ucid": "US-6141748-A", "titles": [{"lang": "EN", "text": "Branch selectors associated with byte ranges within an instruction cache for rapidly identifying branch predictions"}]}, {"ucid": "WO-1999022293-A1", "titles": [{"lang": "EN", "text": "BRANCH SELECTORS ASSOCIATED WITH BYTE RANGES WITHIN AN INSTRUCTION CACHE FOR RAPIDLY IDENTIFYING BRANCH PREDICTIONS"}, {"lang": "FR", "text": "SELECTEURS DE BRANCHEMENT ASSOCIES A DES GAMMES D'OCTETS DANS UNE ANTEMEMOIRE D'INSTRUCTION POUR L'IDENTIFICATION RAPIDE DE PREDICTIONS DE BRANCHEMENTS"}]}, {"ucid": "DE-69802209-T2", "titles": [{"lang": "EN", "text": "BRANCH SECTORS TIED TO BYTE AREAS WITHIN A COMMAND CACHE FOR QUICK IDENTIFICATION OF BRANCH PREDICTORS"}, {"lang": "DE", "text": "AN BYTEBEREICHE INNERHALB EINES BEFEHLSCACHES GEBUNDENE VERZWEIGUNGSSELEKTOREN ZUR SCHNELLEN IDENTIFIZIERUNG VON VERZWEIGUNGSPR\u00c4DIKTOREN"}]}, {"ucid": "EP-1025488-B1", "titles": [{"lang": "FR", "text": "SELECTEURS DE BRANCHEMENT ASSOCIES A DES GAMMES D'OCTETS DANS UNE ANTEMEMOIRE D'INSTRUCTION POUR L'IDENTIFICATION RAPIDE DE PREDICTIONS DE BRANCHEMENTS"}, {"lang": "EN", "text": "BRANCH SELECTORS ASSOCIATED WITH BYTE RANGES WITHIN AN INSTRUCTION CACHE FOR RAPIDLY IDENTIFYING BRANCH PREDICTIONS"}, {"lang": "DE", "text": "AN BYTEBEREICHE INNERHALB EINES BEFEHLSCACHES GEBUNDENE VERZWEIGUNGSSELEKTOREN ZUR SCHNELLEN IDENTIFIZIERUNG VON VERZWEIGUNGSPR\u00c4DIKTOREN"}]}, {"ucid": "KR-100577445-B1", "titles": [{"lang": "KO", "text": "\ubd84\uae30 \uc608\uce21\ub4e4\uc744 \uc2e0\uc18d\ud558\uac8c \ud2b9\uc815\ud558\uae30 \uc704\ud574 \uba85\ub839 \uce90\uc2dc \ub0b4\uc758 \ubc14\uc774\ud2b8 \ubc94\uc704\ub4e4\uacfc \uad00\ub828\ub418\ub294 \ubd84\uae30 \uc120\ud0dd\uc790\ub4e4"}, {"lang": "EN", "text": "BRANCH SELECTORS ASSOCIATED WITH BYTE RANGES WITHIN AN INSTRUCTION CACHE FOR RAPIDLY IDENTIFYING BRANCH PREDICTIONS"}]}, {"ucid": "KR-20010031396-A", "titles": [{"lang": "EN", "text": "BRANCH SELECTORS ASSOCIATED WITH BYTE RANGES WITHIN AN INSTRUCTION CACHE FOR RAPIDLY IDENTIFYING BRANCH PREDICTIONS"}, {"lang": "KO", "text": "\uc2e0\uc18d\ud558\uac8c \ubd84\uae30 \uc608\uce21\ub4e4\uc744 \uc2dd\ubcc4\ud558\uae30\uc704\ud574\uc11c \uba85\ub839\uce90\uc2dc \ub0b4\ubd80\uc758\ubc14\uc774\ud2b8 \ubc94\uc704\ub4e4\uacfc \uacb0\ud569\ub41c \ubd84\uae30 \uc120\ud0dd\uae30\ub4e4"}]}, {"ucid": "US-5978906-A", "titles": [{"lang": "EN", "text": "Branch selectors associated with byte ranges within an instruction cache for rapidly identifying branch predictions"}]}, {"ucid": "JP-3794917-B2", "titles": [{"lang": "JA", "text": "\u5206\u5c90\u4e88\u6e2c\u3092\u8fc5\u901f\u306b\u7279\u5b9a\u3059\u308b\u305f\u3081\u306e\u547d\u4ee4\u30ad\u30e3\u30c3\u30b7\u30e5\u5185\u306e\u30d0\u30a4\u30c8\u7bc4\u56f2\u306b\u95a2\u9023\u3059\u308b\u5206\u5c90\u30bb\u30ec\u30af\u30bf"}, {"lang": "EN", "text": "Branch selectors associated with byte ranges in the instruction cache to quickly identify branch predictions"}]}, {"ucid": "JP-2001521241-A", "titles": [{"lang": "JA", "text": "\u5206\u5c90\u4e88\u6e2c\u3092\u8fc5\u901f\u306b\u7279\u5b9a\u3059\u308b\u305f\u3081\u306e\u547d\u4ee4\u30ad\u30e3\u30c3\u30b7\u30e5\u5185\u306e\u30d0\u30a4\u30c8\u7bc4\u56f2\u306b\u95a2\u9023\u3059\u308b\u5206\u5c90\u30bb\u30ec\u30af\u30bf"}, {"lang": "EN", "text": "Branch selectors related to byte ranges in the instruction cache to quickly identify branch predictions"}]}, {"ucid": "EP-1025488-A1", "titles": [{"lang": "DE", "text": "AN BYTEBEREICHE INNERHALB EINES BEFEHLSCACHES GEBUNDENE VERZWEIGUNGSSELEKTOREN ZUR SCHNELLEN IDENTIFIZIERUNG VON VERZWEIGUNGSPR\u00c4DIKTOREN"}, {"lang": "EN", "text": "BRANCH SELECTORS ASSOCIATED WITH BYTE RANGES WITHIN AN INSTRUCTION CACHE FOR RAPIDLY IDENTIFYING BRANCH PREDICTIONS"}, {"lang": "FR", "text": "SELECTEURS DE BRANCHEMENT ASSOCIES A DES GAMMES D'OCTETS DANS UNE ANTEMEMOIRE D'INSTRUCTION POUR L'IDENTIFICATION RAPIDE DE PREDICTIONS DE BRANCHEMENTS"}]}, {"ucid": "DE-69802209-D1", "titles": [{"lang": "EN", "text": "BRANCH SECTORS TIED TO BYTE AREAS WITHIN A COMMAND CACHE FOR QUICK IDENTIFICATION OF BRANCH PREDICTORS"}, {"lang": "DE", "text": "AN BYTEBEREICHE INNERHALB EINES BEFEHLSCACHES GEBUNDENE VERZWEIGUNGSSELEKTOREN ZUR SCHNELLEN IDENTIFIZIERUNG VON VERZWEIGUNGSPR\u00c4DIKTOREN"}]}, {"ucid": "US-6279107-B1", "titles": [{"lang": "EN", "text": "Branch selectors associated with byte ranges within an instruction cache for rapidly identifying branch predictions"}]}]}