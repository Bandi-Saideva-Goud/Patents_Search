{"patent_number": "US-5455925-A", "publication_id": 71138477, "family_id": 17063745, "publication_date": "1995-10-03", "titles": [{"lang": "EN", "text": "Data processing device for maintaining coherency of data stored in main memory, external cache memory and internal cache memory"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA37466146\"><p>A fetching operation break unit breaks a fetching operation of a block data from a main memory, when a system bus is released during the fetching of the block data and also when data written due to a write access by an external device into the main memory coincides with the fetching of one block data. Further, a notification means notifies the state of the fetching operation to an external cache memory. Therefore, the external cache memory can confirm whether a block-in operation of the microprocessor is broken or not, and the contents of the external cache can correctly coincide with the contents of the internal cache and the main memory by carrying out a steal operation, so that the operational reliability of a computer system can be increased.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"1\"><claim-text>1. A data processing device connected through a system bus to a main memory having contents, an external cache memory storing a selected part of the contents of said main memory and an external device for accessing the system bus, said data processing device including an internal cache memory for storing another selected part of the contents of said main memory, said data processing device comprising:<claim-text>block-in means for fetching one block data from said main memory containing needed data when the needed data is not stored in said internal cache memory;</claim-text><claim-text>bus release means for releasing said system bus in accordance with a bus request signal output from said external device;</claim-text><claim-text>block-in break means for stopping the fetching by said block-in means, when said system bus is released during the fetching of said one block data and when write data to be written, due to a write access by said external device, into said main memory coincides with said one block data being fetched; and</claim-text><claim-text>notification means for determining whether the fetching is being continuously carried out and generating a notification signal indicative of the fetching by the block-in means being stopped by the block-in break means, and said external cache memory stopping subsequent store operations in response to receipt of the notification signal.</claim-text></claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"2\"><claim-text>2. A data processing device as claimed in claim 1, wherein said external cache memory stores the one block data transferred to said internal cache memory through said system bus.</claim-text></claim>"}, {"num": 3, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"3\"><claim-text>3. A data processing device as claimed in claim 1, wherein said bus release means, said block-in break means and said notification means comprise an address monitor control and block access portion of bus control means.</claim-text></claim>"}, {"num": 4, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"4\"><claim-text>4. A data processing device as claimed in claim 1, wherein said external device is a direct memory access controller.</claim-text></claim>"}, {"num": 5, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"5\"><claim-text>5. A data processing device as claimed in claim 1, wherein said data are written into said internal cache memory by using a block transfer process.</claim-text></claim>"}, {"num": 6, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"6\"><claim-text>6. A data processing device as claimed in claim 1, wherein said block-in means comprises a register and a sequencer connected to said register.</claim-text></claim>"}, {"num": 7, "parent": 6, "type": "dependent", "paragraph_markup": "<claim num=\"7\"><claim-text>7. A data processing device as claimed in claim 6, wherein said register is divided into four word blocks.</claim-text></claim>"}, {"num": 8, "parent": 6, "type": "dependent", "paragraph_markup": "<claim num=\"8\"><claim-text>8. A data processing device as claimed in claim 6, wherein said sequencer includes counters, a decoder connected to one of said counters, flip-flops connected to said counters, and logic gates connected between said counters and said flip-flops.</claim-text></claim>"}, {"num": 9, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"9\"><claim-text>9. A data processing device as claimed in claim 1, wherein said block-in break means comprises a comparator and logic gates connected to said comparator.</claim-text></claim>"}, {"num": 10, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"10\"><claim-text>10. A data processing device as claimed in claim 1, wherein said internal cache memory comprises a cache data portion, a write circuit for said cache data portion, a block address portion, and a write circuit for said block address portion.</claim-text></claim>"}, {"num": 11, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"11\"><claim-text>11. A data processing device as claimed in claim 1, wherein said block-in means and said internal cache memory comprise memory management means.</claim-text></claim>"}, {"num": 12, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"12\"><claim-text>12. A monolithic microprocessor formed in a single semiconductor body, connected to a main memory having contents, an external cache memory and an external device through a system bus, said monolithic microprocessor comprising:<claim-text>instruction control means for controlling fetching, decoding, and executing of instructions;</claim-text><claim-text>instruction execution means for calculating a operand address and executing an operand operation;</claim-text><claim-text>memory management means including;</claim-text><claim-text>an internal cache memory for storing a part of the contents of said main memory; and</claim-text><claim-text>block-in means for fetching one block data containing needed data from said main memory when the needed data is not stored in said internal cache memory; and</claim-text><claim-text>bus control means for transferring data among an external device, said external cache memory, said main memory and said monolithic microprocessor through said system bus, said bus control means including:</claim-text><claim-text>bus release means for releasing said system bus in accordance with a bus request signal output from said external device;</claim-text><claim-text>block-in break means for stopping the fetching by said block-in means when said system bus is released during the fetching of said one block data and when write data to be written, due to a write access by said external device, into said main memory coincides with said one block data being fetched; and</claim-text><claim-text>notification means for notifying said external cache memory whether the fetching is being continuously carried out.</claim-text></claim-text></claim>"}, {"num": 13, "parent": 12, "type": "dependent", "paragraph_markup": "<claim num=\"13\"><claim-text>13. A monolithic microprocessor as claimed in claim 12, wherein said external cache memory stores the one block data transferred to said internal cache memory through said system bus.</claim-text></claim>"}, {"num": 14, "parent": 13, "type": "dependent", "paragraph_markup": "<claim num=\"14\"><claim-text>14. A monolithic microprocessor as claimed in claim 13, wherein said external cache memory stops subsequent store operations in accordance with a notification signal output from said notification means.</claim-text></claim>"}, {"num": 15, "parent": 12, "type": "dependent", "paragraph_markup": "<claim num=\"15\"><claim-text>15. A monolithic microprocessor as claimed in claim 12, wherein said external device comprises a direct memory access controller.</claim-text></claim>"}, {"num": 16, "parent": 12, "type": "dependent", "paragraph_markup": "<claim num=\"16\"><claim-text>16. A monolithic microprocessor as claimed in claim 12, wherein said one block data are written into said internal cache memory by using a block transfer process.</claim-text></claim>"}, {"num": 17, "parent": 12, "type": "dependent", "paragraph_markup": "<claim num=\"17\"><claim-text>17. A monolithic microprocessor as claimed in claim 12, wherein said block-in means comprises a register and a sequencer connected to said register.</claim-text></claim>"}, {"num": 18, "parent": 17, "type": "dependent", "paragraph_markup": "<claim num=\"18\"><claim-text>18. A monolithic microprocessor as claimed in claim 17, wherein said register is divided into four word blocks.</claim-text></claim>"}, {"num": 19, "parent": 17, "type": "dependent", "paragraph_markup": "<claim num=\"19\"><claim-text>19. A monolithic microprocessor, as claimed in claim 17, wherein said sequencer includes counters, a decoder connected to one of said counters, flip-flops connected to said counter, and logic gates connected between said counter and said flip-flops.</claim-text></claim>"}, {"num": 20, "parent": 12, "type": "dependent", "paragraph_markup": "<claim num=\"20\"><claim-text>20. A monolithic microprocessor as claimed in claim 12, wherein said block-in break means comprises a comparator and logic gates connected to said comparator.</claim-text></claim>"}, {"num": 21, "parent": 12, "type": "dependent", "paragraph_markup": "<claim num=\"21\"><claim-text>21. A monolithic microprocessor as claimed in claim 12, wherein said internal cache memory comprises a cache data portion, a write circuit for said cache data portion, a block address portion, and a write circuit for said block address portion.</claim-text></claim>"}, {"num": 22, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"22\"><claim-text>22. A data processing device comprising:<claim-text>a main memory;</claim-text><claim-text>an external cache memory;</claim-text><claim-text>an external device;</claim-text><claim-text>a system bus; and</claim-text><claim-text>a microprocessing unit including an internal cache memory for storing a part of a contents of said main memory, and connected to said main memory, said external cache memory and said external device through said system bus, said microprocessing unit comprising:</claim-text><claim-text>block-in means for fetching one block data from said main memory containing needed data when the needed data is not stored in said internal cache memory;</claim-text><claim-text>bus release means for releasing said system bus in accordance with a bus request signal output from said external device;</claim-text><claim-text>block-in break means for stopping the fetching by said block-in means, when said system bus is released during the fetching of said one block data, and when write data to be written, due to a write access by said external device, into said main memory coincides with said one block data being fetched; and</claim-text><claim-text>notification means for notifying said external cache means whether the fetching is being continuously carried out.</claim-text></claim-text></claim>"}, {"num": 23, "parent": 22, "type": "dependent", "paragraph_markup": "<claim num=\"23\"><claim-text>23. A data processing system as claimed in claim 22, wherein said external cache memory stores the one block data transferred to said internal cache memory through said system bus.</claim-text></claim>"}, {"num": 24, "parent": 23, "type": "dependent", "paragraph_markup": "<claim num=\"24\"><claim-text>24. A data processing device as claimed in claim 23, wherein said external cache memory stops subsequent store operations in accordance with a notification signal output from said notification means.</claim-text></claim>"}, {"num": 25, "parent": 22, "type": "dependent", "paragraph_markup": "<claim num=\"25\"><claim-text>25. A data processing device as claimed in claim 22, wherein said external device comprises a direct memory access controller.</claim-text></claim>"}, {"num": 26, "parent": 22, "type": "dependent", "paragraph_markup": "<claim num=\"26\"><claim-text>26. A data processing device as claimed in claim 22, wherein said one block data are written into said internal cache memory by a block transfer process.</claim-text></claim>"}, {"num": 27, "parent": 22, "type": "dependent", "paragraph_markup": "<claim num=\"27\"><claim-text>27. A data processing device as claimed in claim 22, wherein said block-in means and said internal cache memory comprise a memory management means.</claim-text></claim>"}, {"num": 28, "parent": 22, "type": "dependent", "paragraph_markup": "<claim num=\"28\"><claim-text>28. A data processing device as claimed in claim 22, wherein said bus release means, said block-in break means and said notification means comprise an address monitor control and block access portion of bus control means.</claim-text></claim>"}, {"num": 29, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"29\"><claim-text>29. A cache control method of avoiding inconsistency among an internal cache memory provided in a microprocessor unit, an external cache memory and a main memory during writing by an external device, where said external cache memory and said main memory are connected to said internal cache memory through a system bus and said external cache memory stores data transferred thereto by said system bus, said cache control method comprising the steps of:<claim-text>fetching one block data from said main memory containing needed data when the needed data is not stored in said internal cache memory;</claim-text><claim-text>releasing said system bus if not released in accordance with a bus request signal output from said external device;</claim-text><claim-text>stopping the fetching of said one block data when said system bus is released during the fetching of said one block data, and when write data to be written due to a write access by said external device into said main memory coincides with said one block data being fetched;</claim-text><claim-text>notifying said external cache memory whether the fetching is being continuously carried; and</claim-text><claim-text>stopping a store operation by said external cache.</claim-text></claim-text></claim>"}, {"num": 30, "parent": 29, "type": "dependent", "paragraph_markup": "<claim num=\"30\"><claim-text>30. A cache control method as claimed in claim 29, wherein said one block data are written into said internal cache memory by a block transfer process.</claim-text></claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES66716553\"><?RELAPP description=\"Other Patent Relations\" end=\"lead\"?><p>This application is a continuation of application Ser. No. 07/584,692, filed Sep. 19, 1990, now abandoned.</p><?RELAPP description=\"Other Patent Relations\" end=\"tail\"?><?BRFSUM description=\"Brief Summary\" end=\"lead\"?><h4>BACKGROUND OF THE INVENTION</h4><p>1. Field of the Invention</p><p>The present invention relates to a data processing device, more particularly, to a microprocessor including an internal cache memory for storing a part of the contents of a main memory. The microprocessor is applied to a computer system having a mass storage external cache memory and an external device such as a direct memory access controller, and is used to control the external cache memory.</p><p>2. Description of the Related Art</p><p>Recently, in a data processing system (computer system) having an internal cache memory (which may be simply called an internal cache) provided in a microprocessor (microprocessor unit: MPU), an external cache memory (which may be simply called an external cache), an external device such as a direct memory access controller, and a main memory, a block transfer process for transferring data is carried out. In this data processing system, when data for an operand access or an instruction fetch for executing an instruction is not stored in the internal cache, that is, when the data for the instruction fetch or the operand access do not exist (which may be called a \"miss-hit\"), the microprocessor fetches block unit data (block data) from an external main memory and inputs the block data into the internal cache (which may be called a block-in operation). Therefore, a part of the internal cache memory is changed, and a cache control for coinciding the contents of the external cache with the contents of the internal cache should be carried out.</p><p>In one aspect of a previously known cache control system, when a block transfer operation is carried out by a microprocessor through a system bus, block data transferred through the system bus is fetched by the external cache such that the external cache steals the block data on the system bus, so that the contents of the internal cache and the external cache coincide with each other. In another aspect of a previously known cache control system, when a block-in operation is carried out through a system bus and a part of a main memory is rewritten by an external device through the system bus, and also when data corresponding to the rewritten part of the main memory coincides with the block data of being fetched by the block-in operation, a microprocessor controls the cache control system to break the block-in operation thereof.</p><p>Nevertheless, when the external cache carries out a steal operation, the block-in operation is broken by the microprocessor and another block-in operation following the broken block-in operation is started, as a result of which the external cache cannot discriminate whether the block-in operation is a new block-in operation or not, and thus an error in operation may be caused in the external cache.</p><h4>SUMMARY OF THE INVENTION</h4><p>It is an object of the present invention to provide a data processing device for maintaining coherency of data stored in a main memory, an external cache memory and an internal cache memory, and also to provide a data processing device having high operational reliability for a data processing system.</p><p>According to the present invention, there is provided a data processing device, connected to a main memory, an external cache memory and an external device through a system bus, and including an internal cache memory for storing a part of the contents of the main memory, wherein the data processing device comprises a block-in unit for fetching one block data from the main memory, when data for an operand access or an instruction fetch for executing an instruction is not stored in the internal cache memory; a bus release unit, for releasing the system bus in accordance with a bus request signal output from the external device; a block-in break unit for breaking the fetching operation of the block-in unit, when the system bus is released during the fetching of the one block data and also when data written due to a write access by the external device into the main memory coincides with the fetching of one block data and a notification unit for notifying the state of the fetching operation as to whether it is being continuously carried out or not, to the external cache memory.</p><p>The external cache memory may steal the data transferred to the internal cache memory through the system bus. The external cache memory may stop the subsequent steal operations in accordance with a notification signal output from the notification unit. The external device may be a direct memory access controller. The data may be written into the internal cache memory by using a block transfer process.</p><p>The block-in unit may comprise a register and a sequencer. The register may be divided into four word blocks. The sequencer may include counters, a decoder, flip-flops, and logic gates. The block-in break unit may comprise a comparator and logic gates. The internal cache memory may comprise a cache data portion, a write circuit for the cache data portion, a block address portion, and a write circuit for the block address portion. The block-in unit and the internal cache memory may be provided in a memory management unit. The bus release unit, the block-in break unit and the notification unit may be provided in an address monitor control and block access portion of a bus control unit.</p><p>According to the present invention, there is also provided a monolithic microprocessor formed in a single semiconductor body, connected to a main memory, an external cache memory and an external device through a system bus, wherein the monolithic microprocessor comprises an instruction control unit for controlling fetching, decoding, and executing of instructions; an instruction execution unit for calculating an operand address and executing an operand operation; a memory management unit including an internal cache memory for storing a part of the contents of the main memory, and a block-in unit for fetching one block data from the main memory, when data for an operand access or an instruction fetch for executing an instruction is not stored in the internal cache memory; and a bus control unit for transferring data among an external I/O, the external device, the external cache memory, the main memory and the monolithic microprocessor through the system bus. Further, the bus control unit, comprises a bus release unit for releasing the system bus in accordance with a bus request signal output from the external device; a block-in break unit, for breaking the fetching operation of the block-in unit, when the system bus is released during the fetching of the one block data and also when data written due to a write access by the external device into the main memory coincides with the fetching of one block data; and a notification unit for notifying the state of the fetching operation, as to whether it is being continuously carried out or not, to the external cache memory.</p><p>Furthermore, according to the present invention, there is provided a data processing system comprising a main memory; an external cache memory; an external device; a system bus; and a microprocessing unit including an internal cache memory for storing a part of the contents of the main memory, which is connected to the main memory, the external cache memory and the external device through the system bus. Further the microprocessing unit comprises a block-in unit for fetching one block data from the main memory when data for an operand access or an instruction fetch for executing an instruction is not stored in the internal cache memory; a bus release unit for releasing the system bus in accordance with a bus request signal output from the external device; a block-in break unit for breaking the fetching operation of the block-in unit, when the system bus is released during the fetching of the one block data and also when data written due to a write access by the external device into the main memory coincides with the fetching of one block data; and a notification unit for notifying the state of the fetching operation, as to whether it is being continuously carried out or not, to the external cache memory.</p><p>Additionally, according to the present invention, there is also provided a cache control method of avoiding inconsistency among an internal cache memory provided in a microprocessor unit, an external cache memory and a main memory connected to the internal cache memory through a system bus, wherein the cache control method comprises a step of fetching one block data from the main memory when data for an operand access or an instruction fetch for executing an instruction is not stored in the internal cache memory; a step of releasing the system bus in accordance with a bus request signal output from the external device; a step of breaking the fetching operation of the data, when the system bus is released during the fetching of the one block data and also when data written due to a write access by the external device into the main memory coincides with the fetching of one block data; a step of notifying the state of the fetching operation, as to whether it is being continuously carried out or not, to the external cache memory; and a step of stopping a steal operation of the external cache for fetching the data transferred from the main memory to the internal cache through the system bus.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4><p>The present invention will be more clearly understood from the description of the preferred embodiments as set forth below with reference to the accompanying drawings, wherein:</p><p>FIG. 1 is a block diagram illustrating a principle of a data processing device according to the present invention;</p><p>FIG. 2 is a block diagram illustrating an example of a computer system which utilizes an embodiment of the present invention;</p><p>FIG. 3, consisting of FIGS. 3A and 3B, is a block diagram illustrating an example of an entire data processing device according to the present invention;</p><p>FIG. 4, consisting of FIGS. 4A and 4B, is a block circuit diagram illustrating main portions of a data processing device according to the present invention;</p><p>FIG. 5 is a block circuit diagram illustrating a sequencer shown in FIG. 4;</p><p>FIG. 6 is a timing chart indicating an example of the operation of a data processing device according to the present invention; and</p><p>FIG. 7 is a timing chart indicating another example of the operation of a data processing device according to the present invention.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>DESCRIPTION OF THE PREFERRED EMBODIMENTS</h4><p>Below, the preferred embodiments of a data processing device according to the present invention will be explained, with reference to the accompanying drawings.</p><p>FIG. 1 is a diagram illustrating a principle of a data processing device according to the present invention. As shown in FIG. 1, the data processing device of the present invention is connected to a main memory 20, an external cache (memory) 30, and an external device 40 through a system bus SB, and the data processing device includes an internal cache (memory) 11 for storing a part of the contents of the main memory.</p><p>Furthermore, the data processing device of the present invention comprises a block-in unit 1, a bus release unit 2, a block-in break unit 3, and a notification unit 4. The block-in unit 1 is used to fetch one block data BLK from the main memory 20, when data for an operand access or an instruction fetch for executing an instruction is not stored in the internal cache 11. The bus release unit 2 is used to release the system bus SB in accordance with a bus request signal RQ output from the external device 40. The block-in break unit 3 is used to break the fetching operation of the block-in unit 1, when the system bus SB is released during the fetching of the one block of data (one block data) and also when write data to be written, due to a write access AC by the external device 40, into the main memory 20 coincide with the fetching of one block data. The notification unit 4 is used to notify the state of the fetching operation, as to whether it is being continuously carried out or not, to the external cache 30.</p><p>In accordance with the above described configuration, the external cache 30 can discriminate whether a fetching operation (block-in operation) of one block data is executed or not by a notification signal output from the notification unit 4, that is, the external cache 30 can determine whether the block-in operation is broken or not. Consequently, when a block-in operation (e.g., a first block in operation) is broken and another block-in operation is started, the external cache 30 can correctly discriminate whether a second block-in operation, following the first block-in operation, is continued or a new block-in operation (another block-in operation) is started.</p><p>Therefore, the data processing device can control the external cache 30 so as to causes the contents of the external cache 30 to coincide with the contents of the internal cache 11 and the main memory 20, and so that operational reliability of a computer systems using the data processing device can be increased.</p><p>Below, characteristics of the configuration and detailed descriptions of the mode of operation in the present invention will be explained with reference to accompanying drawings.</p><p>FIG. 2 is a block diagram illustrating an example of a computer system utilizing an embodiment of the present invention. In FIG. 2, reference SB denotes a system bus, which consists of an address bus ADD for transferring address information, a data bus DB for transferring data, and a control bus CTL for transferring control signals (HREQ*, HACK*, and the like). As shown in FIG. 2, a microprocessor unit (MPU) 10, a main memory 20, an external cache 30, and an external bus master (external device) 40 are connected to one another through the system bus SB. The microprocessor (unit) 10 includes an internal cache 11 for storing (copying) a part of the contents of the main memory 20, and a cache control circuit 12 for controlling the internal cache and the external cache 30. Note, the external cache 30 includes a memory having a higher speed and larger scale capacity than the internal cache 11.</p><p>The microprocessor 10 (mainly, the cache control circuit 12) implements the following control functions: 1 a function for fetching data (block-in operation) of a plurality of words as a block unit transferred from the main memory 20 through the system bus SB, when the data for an instruction fetch or an operand access are not stored in the internal cache 11 (miss-hit); 2 a function for releasing (HACK*) the system bus in accordance with a bus request signal (HREQ*) output by the external bus master 40; 3 a function for breaking the block-in operation of the function 1, when the system bus SB is released during the block-in operation, and also when write data to be written due to a write access (corresponding to a signal line which is indicated by a broken line in FIG. 2) by the external bus master 40, into the main memory 20 coincide with the data of the block-in operation; and 4 a function for notifying the state of the fetching operation as to whether it is being continuously carried out or not, to the external cache 30.</p><p>In this embodiment, when a block transfer operation is carried out by the microprocessor 10 through the system bus SB, the block data transferred through the system bus SB is fetched by the external cache 30 such that the external cache 30 stores the block data on the system bus SB, and so that the contents of the external cache 30 coincide with the contents of the internal cache 11.</p><p>Note, in FIG. 2, portions A illustrated by hatching in the internal cache 11, the external cache 30 and the main memory 20, indicate the same information (data), specifically, the same information is written into the internal cache 11, the external cache 30 and the main memory 20. Namely, the portions A of the internal cache 11 are transferred from the main memory 20 through the system bus SB, and the portions A of the external cache 30 are fetched by a store operation from the bus such that the data corresponding to the portions A transferred to the internal cache 11 on the system bus SB are stored by the external cache 30 and essentially fetched into the external cache 30.</p><p>Therefore, the data corresponding to the portions A are stored in the main memory 20, the external cache 30 and the internal cache 11 while maintaining coherency thereof. In FIG. 2, a portion B, illustrated by hatching in the main memory 20, indicates data written into the main memory 20 in accordance with an access of the external bus master 40. In this case, that is, when the system bus SB is released during the block-in operation, and also when write data to be written due to the write access (indicated by a broken line in FIG. 2) by the external bus master 40 into the main memory 20 coincide with the data of the block-in operation or the fetching of one block data (BLK), the block-in operation is broken as described above, and thus writing operations to the corresponding memory areas of the internal cache 11 and the external cache 30 are stopped. Therefore, when the block-in operation of the microprocessor 10 is broken, that is, when the system bus SB is released during the fetching of the one block data and also when data written, due to a write access by the external device, into the main memory coincide with the fetching of one block data, the external cache 30 stops the subsequent steal operations in accordance with a notification signal MVIN* output from the cache control circuit 12.</p><p>In the above descriptions, when the write access by the external bus master 40 into the main memory 20 is completed, the required data (corresponding to the data of the portions A and B) may not be fetched until a new block-in operation is executed. Namely, the internal cache 11 and the external cache 30 may only stop (or invalidate) the block-in operation of the data corresponding to the portions A and B. After this, when data (corresponding to the portions A and B) for an operand access or an instruction fetch for executing an instruction is not stored in the internal cache 11, the data corresponding to the portions A and B are transferred from the main memory 20 to the internal cache 11 through the system bus SB. Note, the external cache 30 also steals the data (portions A and B) transferred to the internal cache 11 on the system bus SB. In this case, the data corresponding to the portion B are already rewritten by the external bus master 40, and the fetched data of the portions A and B by the internal cache 11 and the external cache 30 correctly coincides with the data stored in the main memory.</p><p>FIG. 3 is a block diagram illustrating an example of the whole data processing device according to the present invention. As shown in FIG. 3, a data processing device (microprocessing unit MPU) 10, which is a monolithic microprocessor formed in a single semiconductor body, comprises an instruction control unit 41, an instruction execution unit 42, a memory management unit 43, and a bus control unit 44.</p><p>The instruction control unit 41, which is used to control fetching, decoding, and executing instructions, comprises an instruction buffer 411, an instruction decoder 412, a pipeline control portion 413, and a microprogram (ROM) 414. The instruction buffer 411, which is an instruction queue, is used to efficiently process a variable length instruction. A prefetching operation for instructions is continuously carried out until the instruction buffer (instruction queue) 411 has no vacant buffer area. Note, this instruction prefetching operation is independently carried out without executing the instructions. Further, when a required instruction is stored in the instruction buffer 411, an access of an external memory (main memory) 20 is not carried out. In the instruction decoder 412, an instruction format, an instruction type, and an addressing mode are analyzed, and information for controlling pipeline processing, calculating an operand address, and starting a microprogram is output therefrom. In the pipeline control portion 413, an instruction is, for example, divided into five independent stages (five-stage pipeline processing) in one machine cycle, and is continuously executed. The microprogram 414, which is constituted by a read only memory (ROM), outputs detailed control information to an arithmetic portion 423 which will be described below.</p><p>The instruction execution unit 42, which is used to calculate an operand address and carry out an operand operation, comprises an address generation portion 421, a register file 422, and the arithmetic portion 423. In the address generation portion 421, an address calculation operation is carried out in accordance with the addressing mode, and the generated address is transferred to the memory management unit 43. The arithmetic portion 423, in which basic operations are carried out, has exclusive circuits for bit field manipulation instructions, multiply-divide calculation instructions, and decimal operation advancing instructions, and whereby operand processings for these instructions are efficiently carried out. The register file 422 includes general purpose registers, work registers, and stack pointers.</p><p>The memory management unit 43 comprises the internal cache memory 11 and the block-in unit (cache control circuit 12). The internal cache memory 11 includes an instruction access control portion 431 and an operand access control portion 432. The instruction access control portion 431 includes an instruction cache memory, a TLB (translation look-aside buffer), and a memory protection function (memory check). Similarly, the operand access control portion 432 includes an operand cache memory, a TLB, a memory protection function, and a store buffer 4321. The instruction access control portion 431 and the operand access control portion 432 can operate independently in accordance with control signals output from the instruction execution unit 42. Note, the TLBs need not be included in the internal cache memory 11, and the store buffer 4321 corresponds to a register in FIG. 5. Further, the process of writing instruction execution data is carried out by using a store-through method. When a system bus SB is used, the address and the data are stored in a store buffer 4321 until the data can be output. In the case that an area indicated by a write address is stated in the instruction cache, an entry corresponding to the area in the instruction cache is invalidated at the timing of writing to the main memory 20.</p><p>The bus control unit 44, which transfers data among an external I/O, the main memory 20, the external cache 30, the external device 40, and the microprocessing unit 10 through the system bus SB, comprises an address control portion 441, an address monitor control and block access portion 442, and a data transferring portion 443. The bus control unit 44 has a block access function for transferring one block data (for example, 16 bytes of data) to the cache memory at high speed, and an address monitoring function for making the contents of the internal cache 11 and the main memory 20 coincide by monitoring a write address on the system bus SB. Note, the bus release unit 2, the block-in unit 3 and the notification unit 4 shown in FIG. 1 are provided in the address monitor control and block access portion 442 of the bus control unit 44. Furthermore, control signals BS*, DS*, BLOCK*, DC*, BLACKF*, BLACKS*, which are indicated also in FIGS. 6 and 7, are output from the address monitor control and block access portion 442 through time control bus CTL of the system bus SB.</p><p>The present invention is mainly concerned with the memory management unit 43 and the bus control unit 44 in the monolithic microprocessor unit MPU (data processing device 10).</p><p>FIG. 4 is a block circuit diagram illustrating main portions of a data processing device according to the present invention. As shown in FIG. 4, the internal cache 11 includes a cache data portion 111, a write circuit 112 for the cache data portion 111, a block address portion 113, and a write circuit 114 for the block address portion 113. The block-in unit 1 (cache control circuit 12) includes a register 101, a sequencer 102, a comparator 121, and a NAND gate 122.</p><p>Note, a data width of the cache data portion 111 is, for example, 16 bytes suitable for one block data of four words 0 to 3 (four words of 4 bytes blocks), and the register 101 of the block-in unit 1 is divided into four word blocks 101<sub>o</sub>, 101<sub>1</sub>, 101<sub>2</sub>, 101<sub>3</sub>. The block-in break unit 3 comprises a comparator 31, an inverter 32, and an AND gate 33. As described with reference to FIG. 3, the internal cache 11, the block-in unit 1 and a register (store bufer) 4321 are included in the memory management unit 43, and the block-in break unit 3 is included in the bus control unit 44.</p><p>In this data processing device, when data for an operand access or an instruction fetch for executing an instruction exists in the internal cache 11 (which may be called a \"hit\"), that is, when an address of the required data is matched with an address of the data stored (existing) in the block address portion 113 by using the comparator 121 and a validity bit of the data in the block address portion 113 is valid, the NAND gate 122 outputs a low level signal to the sequencer 102, so that the data stored in the cache data portion 111 are output and used. Conversely, when data for an operand access or an instruction fetch for executing an instruction is not stored in the internal cache 11 (miss-hit), that is, when an address of the required data is not matched with an address of the data in the block address portion 113 by the comparator 121, or when a validity bit of the data in the block address portion 113 is invalid even when an address of the required data is matched with an address of the data stored in the block address portion 113, the NAND gate 122 outputs a high level signal (signal of request to fetch block) to the sequencer 102, so that one block data BLK is fetched from the main memory 20 into the cache data portion 111 (block-in operation). Namely, the sequencer 102, in order outputs latch enable signals LEO, LE1, LE2, LE3 of a high level (enable state) to the corresponding word blocks 101<sub>0</sub>, 101<sub>1</sub>, 101<sub>2</sub>, 101<sub>3</sub>, and then the one block data BLK is latched into the register 101 (four word blocks 101<sub>0</sub>, 101<sub>1</sub>, 101<sub>2</sub>, 101<sub>3</sub>) and written into the cache portion 111 by the write circuit 112. Note, the order of latching of one block data BLK into the register 101 is not only carried out from a first word block 101<sub>0</sub>, but also from a second word block 101<sub>1</sub>, a third word block 101<sub>2</sub>, or a fourth word block 101<sub>3</sub> by an access address. Concretely, the one block data BLK is not only latched in the order of the four word blocks 101<sub>0</sub> \u2192101<sub>1</sub> \u2192101<sub>2</sub> \u2192101<sub>3</sub>, but also 101<sub>1</sub> \u2192101<sub>2</sub> \u2192101<sub>3</sub> \u2192101<sub>0</sub>, 101<sub>2</sub> \u2192101<sub>3</sub> \u2192101<sub>0</sub> \u2192101<sub>1</sub>, or 101<sub>3</sub> \u2192101<sub>0</sub> \u2192101<sub>1</sub> \u2192101<sub>2</sub>. Further, a write enable signal is only output from the sequencer 102 to the write circuit 112, when all of the four word blocks 101<sub>0</sub>, 101<sub>1</sub>, 101<sub>2</sub>, 101<sub>3</sub> are filled by the one block data BLK.</p><p>In the case of carrying out the block-in operation, when a bus request signal RQ is output from the external device 40, the address monitor control and block access portion 442 of the bus control unit 44 (which is shown in FIG. 3) releases the system bus SB for changing the right to access a bus master to the external device 40.</p><p>Furthermore, in this state, when data written due to a write access AC by the external device 40 into the main memory 20 coincides with the fetching of one block data, that is, when the system bus SB is released during the fetching of the one block data, and also when data written due to the write access AC bey the external device 40 into the main memory 20 coincides with the fetching of one block data, the sequencer 102 outputs a notification signal MVIN* to the external cache 30. Namely, the address of the one block data: (block address) stored in the register 4321 is supplied to the comparator 31 and compared with an address of the data written due to the write access AC of the external device 40 by the comparator 31. When these addresses are matched by the comparator 31, and also when a read/write* strobe signal supplied to the inverter 32 is at a low level (write mode), the AND gate 33 outputs a high level signal (stop fetching block signal) to the sequencer 102, so that the sequencer 102, in order, outputs latch enable signals LEO, LE1, LE2, LE3 of a low level (disable state) to the corresponding word blocks 101<sub>0</sub>, 101<sub>1</sub>, 101<sub>2</sub>, 101<sub>3</sub>. Therefore, for example, when the stop fetching block signal is output the timing between fetching the word 1 and the word 2, only two words 0 and 1 are latched into the word blocks 101<sub>0</sub>, 101<sub>1</sub>, and the following two words 2 and 3 are not latched into the word blocks 101<sub>2</sub>, 101<sub>3</sub>.</p><p>In the above descriptions, when the write access by the external device (bus master) 40 is completed, the fetched data in the register 101 (word blocks 101<sub>0</sub>, 101<sub>1</sub>, 101<sub>2</sub>, 101<sub>3</sub>) are invalidated and the required data (including the fetched data) are newly fetched from the first address of the data, and the same processes carried out in the internal cache 11 are also carried out in the external cache 30. For example, with reference to FIG. 2, if the stop fetching block signal is output when the timing of fetching is between the word blocks 101<sub>2</sub> and 101<sub>3</sub>, the portions A correspond to the word 0 and 1 (word blocks 101<sub>0</sub>, 101<sub>1</sub>) and the portion B corresponds to the word 2, or words 2 and 3 (word block 101<sub>2</sub>, or word blocks 101<sub>2</sub>, 101<sub>3</sub>). In the above data processing device, when the same data (corresponding to the portions A and B) for an operand access or an instruction fetch for executing an instruction (new instruction) are not stored in the internal cache 11, the data (portions A and B) are transferred again from the main memory 20 to the internal cache 11 through the system bus SB, and the external cache 30 steals the data transferred to the internal cache 11 on the system bus SB. In this case, the data corresponding to the portion B are already rewritten by the external device 40, and the fetched data of the portions A and B by the internal cache 11 and the external cache 30 correctly coincide with the data stored in the main memory.</p><p>FIG. 5 is a block circuit diagram illustrating a sequencer shown in FIG. 4. As shown in FIG. 5, the sequencer 102 comprises counters 51, 53, a decoder 53, flip-flops 52, 55, inverters 56, 58, and an AND gate 57. The clock signal (CLOCK) is supplied to clock terminals CLK of the counters 51, 54, the flip-flop 55, and a gate terminal GATE of the decoder 53. The least significant 2 bits of the word address are supplied to terminals D0 and D1 of the counter 51, and a request signal to fetch a block output from the NAND gate 122 (shown in FIG. 4) is supplied to a load terminal LOAD* (i.e., LOAD in FIG. 4) of the counter 51 through the inverter 56 and a set terminal S of the S-R flip-flop 52. The stop fetching block signal is supplied to a reset terminal R of the flip-flop 52 and an output signal Q of the flip-flop 52 is supplied to a count enable terminal CE of the counter 51 and a load terminal LOAD of the counter 54.</p><p>Output signals Q0, Q1 of the counter 51 are supplied to the decoder 53, and the decoder 53 outputs latch enable signals LE0, LE1, LE2, LE3. Note, the counter 51 is operated when the signal of the request to fetch a block is at a high level and the count enable signal (output signal of the flip-flop 52) is at a high level. Further, the latch enable signals LEO, LE1, LE2, LE3 are sequentially output in the order of a first latch enable signal LE0, a second latch enable signal LE1, a third latch enable signal LE2, or a fourth latch enable signal LE3. Therefore, one block data BLK is latched into the register 101 including four word blocks in the order of a first word block 101<sub>0</sub>, a second word block 101<sub>1</sub>, a third word block 101<sub>2</sub>, or a fourth word block 101<sub>3</sub>.</p><p>Output signals Q0, Q1, Q2 of the counter 54 are supplied to the AND gate 57, and the output signal Q2 of the counter 54 is inverted by the inverter 58 and designated as a notification signal MVIN*. Note, a high potential (high level) is applied to terminals D0, D1 of the counter 54, and a ground potential (low level) is applied to a terminal D2 of the counter 54. An output signal of the AND gate 57 is supplied to a terminal D of the flip-flop 55, and an output signal Q of the flip-flop 55 is determined as a write enable signal. Further, the write enable signal is only changed to a high level (enable,, state), when all of the four latch enable signals LE0, LE1, LE2, LE3 are output, or when four words (one block data) are latched into the register 101 (four word blocks 101<sub>0</sub>, 101<sub>1</sub>, 101<sub>2</sub>, 101<sub>3</sub>). Furthermore, the notification signal MVIN* is changed to a low level after fetching a second word data (word 1).</p><p>In the above descriptions, when the stop fetching block signal output from the AND gate 33 (shown in FIG. 3) is changed to a high level, the count enable signal (output signal of the flip-flop 52) is at a low level, so that the latch enable signals LE0, LE1, LE2, LE3 are changed to low levels (disable state). In this case, the notification signal MVIN* is returned to a starting state, where the notification signal MVIN* is changed to a low level after fetching a second word data.</p><p>FIGS. 6 and 7 are timing charts indicating examples of an operation in the microprocessor unit 10.</p><p>In FIGS. 6 and 7, reference CLK denotes a system clock, ADD denotes address information, BS* denotes a bus strobe signal, DS* denotes a data strobe signal, BLOCK* denotes a signal for indicating the carrying out of a block transfer externally, D denotes data, DC* denotes a data clock, BLACKF* and BLACKS* denote signals indicating the state of transferring speed (high speed or low speed), MVIN* denotes a signal for instructing a fetching operation of the block data, HREQ* denotes a control signal for instructing a bus request output from the external bus master 40, and HACK* denotes a control signal for instructing an acknowledgement of the bus request. Note, the above control signals are active low types, and thus, when the control signals change to-low levels \"L\", various functions are activated. Further, the block transfer signal BLOCK* is used when data accessed by the microprocessor MPU (10) is not required to be fetched into the cache memory, for example, when microprocessor MPU accesses data for a bit set instruction.</p><p>FIG. 6 is a timing chart indicating an example of an operation where the microprocessor 10 is carrying out a block-in operation, and the external device (external bus master 40) does not output a bus request HREQ*, that is, the control signal HREQ* is maintained at a high level \"H\". In this example, it is indicated that one block data corresponding to four words of 1 to 4 is fetched into the internal cache 11 of the microprocessor 10. Therefore, in this case, data which is the same as the one block data fetched into the internal cache 11, is input into the external cache 30 by a steal operation thereof, and thus the contents of the external cache 30 coincide with the contents of the internal cache 11.</p><p>On the other hand, FIG. 7 is a timing chart indicating an example of an operation where the microprocessor 10 is carrying out a block-in operation, the external bus master 40 outputs a bus request signal HREQ*, that is, the bus request signal HREQ* is changed to a low level \"L\", and also a write access to the main memory 20 by the external device 40 overlaps the block-in operation. In this example, it is indicated that data (corresponding to two words 1 and 2) are fetched into the internal cache 11, and a fetching operation of the following data input into the internal cache 11 are broken. Therefore, in this case, the external cache 30 steals the data corresponding to two words, and the external cache 30 stops the following steal operation. Namely, the external cache 30 makes the contents thereof (data corresponding to two words) coincide with that of the internal cache 11 without causing an error in-operation.</p><p>As described above, the external cache 30 can confirm whether a block-in operation of the microprocessor 10 is broken or not by receiving a control signal from the microprocessor 10, and thus the contents of the external cache can correctly coincide with the contents of the internal cache 11 (and the main memory 20) by carrying out a steal (i.e. store) operation. Therefore, the operational reliability of the total system is increased.</p><p>Many widely differing embodiments of the present invention may be constructed without departing from the spirit and scope of the present invention, and it should be understood that the present invention is not limited to the specific embodiments described in this specification, except as defined in the appended claims.</p><?DETDESC description=\"Detailed Description\" end=\"tail\"?></description>"}], "inventors": [{"first_name": "Takeshi", "last_name": "Kitahara", "name": ""}, {"first_name": "Masato", "last_name": "Mitsuhashi", "name": ""}, {"first_name": "Atsushi", "last_name": "Fujihira", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "FUJITSU LIMITED"}], "ipc_classes": [{"primary": true, "label": "G06F  12/06"}, {"primary": false, "label": "G06F  13/00"}], "locarno_classes": [], "ipcr_classes": [{"label": "G06F  12/08        20060101A I20051008RMEP"}], "national_classes": [{"primary": true, "label": "711122"}, {"primary": false, "label": "711E12043"}, {"primary": false, "label": "711146"}, {"primary": false, "label": "711E12024"}], "ecla_classes": [{"label": "G06F  12/08B22L"}, {"label": "G06F  12/08B4L"}], "cpc_classes": [{"label": "G06F  12/08"}, {"label": "G06F  12/0811"}, {"label": "G06F  12/0897"}, {"label": "G06F  12/0811"}, {"label": "G06F  12/0897"}], "f_term_classes": [], "legal_status": "Expired - Lifetime", "priority_date": "1989-09-19", "application_date": "1993-08-23", "family_members": [{"ucid": "US-5455925-A", "titles": [{"lang": "EN", "text": "Data processing device for maintaining coherency of data stored in main memory, external cache memory and internal cache memory"}]}, {"ucid": "JP-2509344-B2", "titles": [{"lang": "JA", "text": "\u30c7\u2015\u30bf\u51e6\u7406\u88c5\u7f6e"}, {"lang": "EN", "text": "Data processing device"}]}, {"ucid": "DE-69032519-D1", "titles": [{"lang": "EN", "text": "Data processing device for maintaining coherence of stored data in main memory, external cache memory and internal cache memory"}, {"lang": "DE", "text": "Datenverarbeitungseinrichtung zur Koh\u00e4renzaufrechthaltung von gespeicherten Daten im Hauptspeicher, externem Cachespeicher und internem Cachespeicher"}]}, {"ucid": "JP-H03103946-A", "titles": [{"lang": "EN", "text": "DATA PROCESSOR"}]}, {"ucid": "EP-0418621-A3", "titles": [{"lang": "EN", "text": "DATA PROCESSING DEVICE FOR MAINTAINING COHERENCY OF DATA STORED IN MAIN MEMORY, EXTERNAL CACHE MEMORY AND INTERNAL CACHE MEMORY"}]}, {"ucid": "KR-910006848-A", "titles": [{"lang": "KO", "text": "\uba54\uc778 \uba54\ubaa8\ub9ac, \uc678\ubd80 \uce90\uc2dc(cache)\uba54\ubaa8\ub9ac \ubc0f \ub0b4\ubd80 \uce90\uc2dc \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ub41c \ub370\uc774\ud0c0\uc758 \ucf54\ud788\uc5b4\ub7f0\uc2a4\ub97c \uc720\uc9c0\ud558\uae30 \uc704\ud55c \ub370\uc774\ud0c0 \ucc98\ub9ac\uc7a5\uce58"}, {"lang": "EN", "text": "Data processing device for maintaining coherence of data stored in main memory, external cache memory and internal cache memory"}]}, {"ucid": "KR-930007672-B1", "titles": [{"lang": "KO", "text": "\uba54\uc778\uba54\ubaa8\ub9ac, \uc678\ubd80\uce90\uc2dc(cache)\uba54\ubaa8\ub9ac \ubc0f \ub0b4\ubd80\uce90\uc2dc\uba54\ub85c\ub9ac\uc5d0 \uc800\uc7a5\ub41c \ub370\uc774\ud0c0\uc758 \ucf54\ud788\uc5b4\ub7f0\uc2a4(coherence)\ub97c \uc720\uc9c0\ud558\uae30 \uc704\ud55c \ub370\uc774\ud0c0 \ucc98\ub9ac\ubc29\ubc95\uacfc \uadf8 \uc7a5\uce58"}, {"lang": "EN", "text": "DATA PROCESSOR AND ITS METHOD BETWEEN MAIN MEMORY AND CACHE MEMORY"}]}, {"ucid": "DE-69032519-T2", "titles": [{"lang": "EN", "text": "Data processing device for maintaining coherence of stored data in main memory, external cache memory and internal cache memory"}, {"lang": "DE", "text": "Datenverarbeitungseinrichtung zur Koh\u00e4renzaufrechthaltung von gespeicherten Daten im Hauptspeicher, externem Cachespeicher und internem Cachespeicher"}]}, {"ucid": "EP-0418621-B1", "titles": [{"lang": "FR", "text": "Dispositif de traitement de donn\u00e9es pour maintenir la coh\u00e9rence de donn\u00e9es emmagasin\u00e9es en m\u00e9moire principale, ant\u00e9m\u00e9moire externe et ant\u00e9m\u00e9moire interne"}, {"lang": "EN", "text": "Data processing device for maintaining coherency of data stored in main memory, external cache memory and internal cache memory"}, {"lang": "DE", "text": "Datenverarbeitungseinrichtung zur Koh\u00e4renzaufrechthaltung von gespeicherten Daten im Hauptspeicher, externem Cachespeicher und internem Cachespeicher"}]}, {"ucid": "EP-0418621-A2", "titles": [{"lang": "FR", "text": "Dispositif de traitement de donn\u00e9es pour maintenir la coh\u00e9rence de donn\u00e9es emmagasin\u00e9es en m\u00e9moire principale, ant\u00e9m\u00e9moire externe et ant\u00e9m\u00e9moire interne"}, {"lang": "EN", "text": "Data processing device for maintaining coherency of data stored in main memory, external cache memory and internal cache memory"}, {"lang": "DE", "text": "Datenverarbeitungseinrichtung zur Koh\u00e4renzaufrechthaltung von gespeicherten Daten im Hauptspeicher, externem Cachespeicher und internem Cachespeicher"}]}]}