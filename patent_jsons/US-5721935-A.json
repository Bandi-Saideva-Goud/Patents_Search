{"patent_number": "US-5721935-A", "publication_id": 71632310, "family_id": 24319352, "publication_date": "1998-02-24", "titles": [{"lang": "EN", "text": "Apparatus and method for entering low power mode in a computer system"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA37729690\"><p>A power management circuit for managing low power modes in a computer system, which implements four power modes, from highest power consumption to lowest power consumption: RUN mode, SLEEP mode, IDLE mode, and STANDBY mode. The computer system includes a PCI bus and an ISA bus, with a CPU-PCI bridge to connect the host bus and the PCI bus and a PCI-ISA bridge to connect the PCI bus and the ISA bus. The power management circuit transitions from SLEEP mode to IDLE mode by first determining if the CPU-PCI bridge is parked on the PCI bus and if it is in SLEEP mode. The power management circuit then waits for one refresh period and for all internal queues to empty before checking again to determine if the CPU-PCI bridge is still parked on the PCI bus and if it is still in SLEEP mode. If true, the CPU-PCI bridge transitions to IDLE mode. The power management circuit also performs low power refresh cycles when it is in IDLE or STANDBY mode. In those modes, the memory controller in the CPU-PCI bridge is disabled to conserve power. The power management circuit performs the refresh cycles based off an external asynchronous clock. Further, the power management circuit drives certain PCI bus signals to a certain state to avoid leakage current due to the existence of a mixture of 3.3-volt and 5-volt components connected to the PCI bus.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"1\"><claim-text>1. A method of managing power consumption in a computer system having a bus and having first and second power modes, the method performed by a bus device coupled to the bus, and the method comprising the steps of:<claim-text>detecting if the computer system is in the first power mode;</claim-text><claim-text>determining if the bus device is granted control of the bus without requesting control of the bus;</claim-text><claim-text>waiting for predetermined computer system activities to complete after it is detected that the computer system is in the first power mode and the bus device is granted control of the bus without requesting control of the bus; and</claim-text><claim-text>transitioning the computer system from the first power mode to the second power mode after said predetermined computer system activities have completed and if the bus device is still granted control of the bus without requesting control of the bus and the computer system is still in the first power mode.</claim-text></claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"2\"><claim-text>2. The method of claim 1, wherein the computer system further includes a memory device which requires refresh cycles, and wherein said predetermined computer system activities include a memory refresh cycle.</claim-text></claim>"}, {"num": 3, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"3\"><claim-text>3. The method of claim 1, wherein the bus is a preipheral component interface (PCI) bus.</claim-text></claim>"}, {"num": 4, "parent": 3, "type": "dependent", "paragraph_markup": "<claim num=\"4\"><claim-text>4. The method of claim 3, wherein the computer system further includes a memory device which requires refresh cycles, wherein the computer system further includes a microprocessor coupled to a host bus, wherein the bus device is a processor-PCI bridge connected between said host bus and said PCI bus, and wherein said predetermined computer system activities include a memory refresh cycle and emptying a posting queue.</claim-text></claim>"}, {"num": 5, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"5\"><claim-text>5. The method of claim 1, further comprising the step of:<claim-text>transitioning the computer system from the second power mode to the first power mode if the bus device becomes unparked.</claim-text></claim-text></claim>"}, {"num": 6, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"6\"><claim-text>6. The method of claim 1, wherein the first power mode is indicated if a first signal is asserted, and wherein said first signal continues to be asserted while the computer system is in the second power mode, the method further comprising the step of:<claim-text>transitioning the computer system from the second power mode to the first power mode if said first signal becomes deasserted.</claim-text></claim-text></claim>"}, {"num": 7, "parent": 6, "type": "dependent", "paragraph_markup": "<claim num=\"7\"><claim-text>7. The method of claim 6, wherein said second to first power mode transitioning step further transitions the computer system from the second power mode to the first power mode if the bus device becomes unparked.</claim-text></claim>"}, {"num": 8, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"8\"><claim-text>8. The method of claim 1, wherein the first power mode is a first low power state and the second power mode is a second, lower power state.</claim-text></claim>"}, {"num": 9, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"9\"><claim-text>9. A circuit for managing power consumption in a computer system having a bus and having first and second power modes, the circuit being located in a bus device coupled to the bus, the circuit comprising:<claim-text>a detector for detecting if the computer system is in the first power mode;</claim-text><claim-text>an analyzer coupled to the bus for determining if the bus device is granted control of the bus without requesting control of the bus;</claim-text><claim-text>a delay generator coupled to said detector and analyzer for waiting for predetermined computer system activities to complete after it is detected that the computer system is in the first power mode and the bus device is granted control of the bus without requesting control of the bus; and</claim-text><claim-text>a controller coupled to said delay generator for transitioning the computer system from the first power mode to the second power mode after said predetermined computer system activities have completed and if the bus device is still granted control of the bus without requesting control of the bus and the computer system is still in the first power mode.</claim-text></claim-text></claim>"}, {"num": 10, "parent": 9, "type": "dependent", "paragraph_markup": "<claim num=\"10\"><claim-text>10. The circuit of claim 9, wherein the computer system further includes a memory device which requires refresh cycles, and wherein said predetermined computer system activities include a memory refresh cycle.</claim-text></claim>"}, {"num": 11, "parent": 9, "type": "dependent", "paragraph_markup": "<claim num=\"11\"><claim-text>11. The circuit of claim 9, wherein the bus is a peripheral component interface (PCI) bus.</claim-text></claim>"}, {"num": 12, "parent": 11, "type": "dependent", "paragraph_markup": "<claim num=\"12\"><claim-text>12. The circuit of claim 11, wherein the computer system further has a microprocessor coupled to a host bus, and wherein the bus device is a processor-PCI bridge connected between said host bus and said PCI bus.</claim-text></claim>"}, {"num": 13, "parent": 12, "type": "dependent", "paragraph_markup": "<claim num=\"13\"><claim-text>13. The circuit of claim 12, wherein the computer system further includes a memory device which requires refresh cycles, and wherein said predetermined computer system activities include a memory refresh cycle.</claim-text></claim>"}, {"num": 14, "parent": 13, "type": "dependent", "paragraph_markup": "<claim num=\"14\"><claim-text>14. The circuit of claim 13, wherein said processor-PCI bridge includes a posting queue for posting bus cycles, and wherein said predetermined computer system activities further include emptying said posting queue.</claim-text></claim>"}, {"num": 15, "parent": 9, "type": "dependent", "paragraph_markup": "<claim num=\"15\"><claim-text>15. The circuit of claim 9, wherein the first power mode is a fist low power state and second power mode is a second, lower power state.</claim-text></claim>"}, {"num": 16, "parent": 9, "type": "dependent", "paragraph_markup": "<claim num=\"16\"><claim-text>16. The circuit of claim 9, further comprising:<claim-text>a sequencer coupled to said detector for transistioning the computer system from the second power mode to the first power mode if the bus device becomes unparked.</claim-text></claim-text></claim>"}, {"num": 17, "parent": 9, "type": "dependent", "paragraph_markup": "<claim num=\"17\"><claim-text>17. The circuit of claim 9, wherein the first power mode is indicated if a first signal is asserted, and wherein said first signal continues to be asserted while the computer system is in the second power mode, the circuit further comprising:<claim-text>a transition circuit responsive to said first signal for transitioning the computer system from the second power mode to the first power mode if said first signal becomes deasserted.</claim-text></claim-text></claim>"}, {"num": 18, "parent": 17, "type": "dependent", "paragraph_markup": "<claim num=\"18\"><claim-text>18. The circuit of claim 17, wherein said second to first power mode transition circuit further transitions the computer system from the second power mode to the first power mode if the bus device becomes unparked.</claim-text></claim>"}, {"num": 19, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"19\"><claim-text>19. A computer system having first and second power modes, comprising:<claim-text>a bus; and</claim-text><claim-text>a bus device coupled to said bus and including a power management circuit, said power management circuit comprising:<claim-text>a detector for detecting if the computer system is in the first power mode;</claim-text><claim-text>an analyzer coupled to the bus for determining if the bus device is granted control of the bus without requesting control of the bus;</claim-text><claim-text>a delay generator coupled to said detector and analyzer for waiting for predetermined computer system activities to complete after it is detected that the computer system is in the first power mode and the bus device is granted control of the bus without requesting control of the bus; and</claim-text><claim-text>a controller coupled to said delay generator for transitioning the computer system from the first power mode to the second power mode after said predetermined computer system activities have completed and if the bus device is still granted control of the bus without requesting control of the bus and the computer system is still in the first power mode.</claim-text></claim-text></claim-text></claim>"}, {"num": 20, "parent": 19, "type": "dependent", "paragraph_markup": "<claim num=\"20\"><claim-text>20. The computer system of claim 19, wherein the computer system further includes a memory device which requires refresh cycles, and wherein said predetermined computer system activities include a memory refresh cycle.</claim-text></claim>"}, {"num": 21, "parent": 19, "type": "dependent", "paragraph_markup": "<claim num=\"21\"><claim-text>21. The computer system of claim 19, wherein said bus is a preipheral component interface (PCI) bus.</claim-text></claim>"}, {"num": 22, "parent": 21, "type": "dependent", "paragraph_markup": "<claim num=\"22\"><claim-text>22. The computer system of claim 21, wherein the computer system further comprises:<claim-text>a host bus;</claim-text><claim-text>a microprocessor coupled to said host bus, and wherein said bus device is a processor-PCI bridge connected between said host bus and said PCI bus.</claim-text></claim-text></claim>"}, {"num": 23, "parent": 22, "type": "dependent", "paragraph_markup": "<claim num=\"23\"><claim-text>23. The computer system of claim 22, wherein the computer system further includes a memory device which requires refresh cycles, and wherein said predetermined computer system activities include a memory refresh cycle.</claim-text></claim>"}, {"num": 24, "parent": 23, "type": "dependent", "paragraph_markup": "<claim num=\"24\"><claim-text>24. The computer system of claim 23, wherein said processor-PCI bridge includes a posting queue for posting bus cycles, and wherein said predetermined computer system activities further include emptying said posting queue.</claim-text></claim>"}, {"num": 25, "parent": 19, "type": "dependent", "paragraph_markup": "<claim num=\"25\"><claim-text>25. The computer system of claim 19, wherein the first power mode is a first low power state and the second power mode is a second, lower power state.</claim-text></claim>"}, {"num": 26, "parent": 25, "type": "dependent", "paragraph_markup": "<claim num=\"26\"><claim-text>26. The computer system of claim 25, further comprising:<claim-text>a microprocessor coupled to said bus device; and</claim-text><claim-text>a cache memory coupled to said microprocessor and said bus device,</claim-text><claim-text>wherein said first low power state is a SLEEP<sub>--</sub>  state in which power consumption in said microprocessor is reduced, and</claim-text><claim-text>wherein said second low power state is an IDLE state in which power consumption in said microprocessor, said cache memory, and said bus device is reduced.</claim-text></claim-text></claim>"}, {"num": 27, "parent": 19, "type": "dependent", "paragraph_markup": "<claim num=\"27\"><claim-text>27. The computer system of claim 19, wherein said power management circuit further comprises:<claim-text>a sequencer coupled to said detector for transitioning the computer system from the second power mode to the first power mode if the bus device becomes unparked.</claim-text></claim-text></claim>"}, {"num": 28, "parent": 19, "type": "dependent", "paragraph_markup": "<claim num=\"28\"><claim-text>28. The computer system of claim 19, wherein the first power mode is indicated if a first signal is asserted, wherein said first signal continues to be asserted while the computer system is in the second power mode, and wherein said power management circuit further comprises:<claim-text>a transition circuit responsive to said first signal for transitioning the computer system from the second power mode to the first power mode if said first signal becomes deasserted.</claim-text></claim-text></claim>"}, {"num": 29, "parent": 28, "type": "dependent", "paragraph_markup": "<claim num=\"29\"><claim-text>29. The circuit of claim 28, wherein said second to first power mode transition circuit further transitions the computer system from the second power mode to the first power mode if the bus device becomes unparked.</claim-text></claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES67079861\"><?RELAPP description=\"Other Patent Relations\" end=\"lead\"?><p>This is a continuation of application Ser. No. 08/580,027, filed on Dec. 20, 1995, abandoned.</p><?RELAPP description=\"Other Patent Relations\" end=\"tail\"?><?BRFSUM description=\"Brief Summary\" end=\"lead\"?><h4>BACKGROUND OF THE INVENTION</h4><p>1. Field of the Invention</p><p>The invention relates to power management in a computer system, and more particularly, to an apparatus and method of entering a low power mode by detecting for a bus idle condition.</p><p>2. Description of the Related Art</p><p>Personal computers are constantly evolving to provide the user with the highest performance available at the lowest cost. Performance improvements in the microprocessor and memory systems have resulted in computers so powerful that they are now capable of performing tasks that before could only be performed by large mainframe computers. Technological change is especially exemplified in the area of portable computers where power consumption efficiency is balanced against features, cost, size, weight and performance. This is especially challenging since many computer users desire the portable computer to provide nothing less than what a desktop unit can provide. In this specification, the term \"portable computer\" is used broadly to denote the class of computers powered by battery or solar power. Those familiar with portable computers will recognize labels such as: portable, luggable, laptop, notebook and handheld which are used to designate certain marketing segments of the larger portable computer market.</p><p>Many options are available to the computer system designer. While simply designing around the highest performance processor available will go a long way towards providing a high performance product, in today's competitive market that is not enough. The processor must be supported by high performance components including a high performance I/O bus. Several standardized I/O buses are available to the system designer including: ISA (Industry Standard Architecture); EISA (Extended Industry Standard Architecture); and PCI (Peripheral Component Interface). Today's computers are typically designed with some combination of the three buses to provide the user with the performance of the PCI bus and backward compatibility to the ISA bus. These three buses are familiar to those skilled in the art and need not be described further here. However, more details on the PCI bus are found in the PCI Local Bus Specification, Production Version, Revision 2.1, dated Jun. 1, 1995, which is published by the PCI Special Interest Group of Hillsboro, Oreg., and which is hereby incorporated by reference in its entirety.</p><p>One of the problems associated with battery-powered portable computer systems is battery life. Many solutions have been proposed to reduce power consumption of a portable computer system, particularly when the system is not in use. For example, U.S. Pat. No. 4,980,836, entitled \"Apparatus for Reducing Computer System Power Consumption,\" describes power management circuitry which monitors for peripheral device inactivity. If a predetermined time elapses without any peripheral device activity, the computer system enters into standby mode to reduce power consumption.</p><p>With improved integrated circuit processing technology, system components have become ever more sophisticated. Increasingly, ASICs are used in computer systems to integrate bus control, bus arbitration, bus bridging, memory control, and cache control functions. As a result, power management logic can now be incorporated into these ASICs to achieve better power management schemes.</p><h4>SUMMARY OF THE PRESENT INVENTION</h4><p>A circuit according to the present invention performs power management functions in a computer system. The computer system has a PCI bus and an ISA bus and includes a CPU-PCI bridge connected between the host bus and the PCI bus and a PCI-ISA bridge connected between the PCI bus and the ISA bus. Preferably, the power management circuit is located in the CPU-PCI bridge. The computer system preferably implements four power levels: RUN mode for normal computer operation; SLEEP mode in which the clock to the central processing unit (CPU) is turned off; IDLE mode in which the internal clocks of the CPU, L2 cache memory, data buffers between the processor bus and the PCI bus, and the CPU-PCI bridge are turned off; and STANDBY mode which is the same as IDLE mode except that the internal clock of the PCI-ISA bridge is also turned off. RUN mode is the highest power consumption level and STANDBY mode is the lowest power consumption level.</p><p>According to one aspect of the present invention, the power management circuit transitions from SLEEP mode to IDLE mode by first determining if the CPU-PCI bridge is parked on the PCI bus and if it is in SLEEP mode. By default, if there are no other bus requests for the PCI bus, the PCI arbiter parks the CPU-PCI bridge on the PCI bus. The power management circuit then forces one refresh operation and then waits for all internal queues to empty before checking again to determine if the CPU-PCI bridge is still parked on the PCI bus and if it is still in SLEEP mode. If true, then the CPU-PCI bridge begins to transition to IDLE mode. By entering into IDLE mode this way, an extra pin is not needed to notify the power management circuit in the CPU-PCI bridge to enter IDLE mode. As a result, a pin is saved on the chip used to implement the CPU-PCI bridge.</p><p>Once the CPU-PCI bridge enters into IDLE mode, its core logic is shut off. Preferably, one portion of that core logic is the memory controller for controlling main memory, which is implemented with dynamic random access memories (DRAMs). As it is disabled in IDLE mode, the memory controller is no longer able to perform memory refresh cycles to main memory. Thus, according to another aspect of the present invention, the power management circuit performs memory refresh cycles based off an external asynchronous clock, which is preferably the clock signal used to run the real time clock (RTC). The advantage offered by the power management circuit according to this other aspect of the present invention is that the memory controller portion of the CPU-PCI bridge can be disabled to conserve power while still allowing refresh cycles to continue.</p><p>One characteristic of the PCI bus is that it is defined as a 5-volt bus. As more and more computer system peripheral components are now implemented as 3.3-volt parts, it is possible that a mixture of 3.3-volt and 5-volt parts are connected to the PCI bus. The 3.3-volt parts are capable of driving bus signals to a high of only about 3.3 volts, whereas the 5-volt parts contain input buffer circuitry which operate from the 5-volt power supply voltage. In the present computer system, the CPU-PCI bridge is preferably a 3.3-volt component with at least one other component on the PCI bus being a 5-volt part. In the IDLE and STANDBY modes, the CPU-PCI bridge is the owner of the PCI bus, and thus it has the responsibility of driving the PCI bus signals. As the input buffer circuitry in the 5-volt component works off a 5-volt supply voltage, leakage current would occur in the input buffer circuitry if received bus signals are at 3.3 volts. Thus, according to yet another aspect of the present invention, the power management circuit in the CPU-PCI bridge drives certain of the PCI bus signals to the zero state to prevent leakage current in the 5-volt component, thereby reducing power consumption in the IDLE and STANDBY modes.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4><p>A better understanding of the present invention can be obtained when the following detailed description of the preferred embodiment is considered in conjunction with the following drawings, in which:</p><p>FIG. 1 is a block diagram of an exemplary computer system incorporating the preferred embodiment of the present invention;</p><p>FIG. 2 is a block diagram of a CPU-PCI bridge in the computer system of FIG. 1;</p><p>FIGS. 3 and 4 are block diagrams of a memory controller in the CPU-PCI bridge of FIG. 2;</p><p>FIG. 5 is a state diagram of a state machine of a power management controller in the memory controller of FIGS. 3 and 4;</p><p>FIG. 6 is a logic diagram of the power management controller of FIG. 5;</p><p>FIG. 7 is a logic diagram of a low power refresh generator located in the memory controller of FIGS. 3 and 4;</p><p>FIG. 8 is a schematic diagram of circuitry used to drive PCI bus signals to predetermined states;</p><p>FIG. 9 is a state diagram of the refresh state machine in the memory controller of FIG. 4;</p><p>FIG. 10 is a schematic diagram of circuitry used to develop the RAS and CAS signals; and</p><p>FIG. 11 is a timing diagram of operation according to the present invention.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</h4><p>Referring to FIG. 1, there is illustrated a block diagram of an exemplary computer system utilizing the present invention. The computer system is shown divided into a portable portion P (hereinafter portable computer) and an expansion base unit portion B (hereinafter base). The portable computer P is an operationally autonomous apparatus which is detachable from the base B for remote computing operations. While the portable computer P is docked into the expansion base unit B, the portable computer P operates on AC power, and while the computer P is detached from the base B, the portable computer P operates from battery power. Mechanisms are also provided to operate the portable computer from AC power while removed from the base B. The base B typically provides expandability for functions not included in the portable portion P.</p><p>A central processing unit (CPU) 100 is provided in the portable computer P which is a conventional microprocessor such as an Intel Pentium (P54C or P24) or its equivalent. The CPU 100 can also be a 486 family microprocessor. The Pentium P54C microprocessor is a 64-bit processor while the P24 and 486 microprocessors are 32-bit processors. The CPU 100 couples to a processor or host bus 102 for communicating with system logic such as a cache memory 104, a CPU-PCI bridge 106 and a pair of data buffers 108. The cache memory 104 is a conventional cache memory for the CPU 100 and preferably is comprised of high speed synchronous burst static random access memories (RAM). The CPU-PCI bridge 106 provides an interface to the cache memory 104 which includes tag RAMs and other logic for creating various cache ways, size, and speed configurations of the cache memory 102. The CPU-PCI bridge 106 also includes a power management circuit according to the present invention, which is described below.</p><p>The CPU-PCI bridge 106 and the data buffers 108 also couple to a main memory 110 and a peripheral component interconnect (PCI) bus 112. The CPU-PCI bridge 106 provides address and control signals to the main memory 110, which is comprised of up to 256 MBytes of conventional dynamic random access memories (DRAMs). The data buffers 108 provide a 64-bit data path between the host bus 102 and the main memory 110 and provides a 32-bit data path to the PCI bus 112. The CPU-PCI bridge 106 and data buffers 108 are proprietary devices having three major functional interfaces: a processor/cache interface, a system memory interface, and a PCI bus interface. The data buffers 108 are responsible for buffering data between the three interfaces while the CPU-PCI bridge 106 is responsible for handling addressing, command and control. Each of these interfaces operate independently from the other and include queues for read and write posting between any two of the three interfaces. The processor/cache interface allows the CPU 100 to pipeline cycles into read cycles and allows snoop accesses to the tag RAM to occur while the pipeline cycles are executing. The memory interface controls the main memory 110 and generates control signals to the data buffers 108. The interface also allows read ahead operations for those PCI masters issuing a read multiple command.</p><p>The PCI bus 112 provides a communications conduit between the portable computer P and the base B. A portion 112a of the PCI bus 112 resides in the portable computer P and includes a Quickswitch 146 for each signal of the PCI bus 112. The Quickswitches 146 are low loss series in-line MOSFET devices with the gate connected to a docking detection means for providing hot plug capabilities. When the portable computer P is docked into the base B, a portion 112b of the PCI bus 112 in the base B is coupled to the portion 112a to provide an extended PCI bus 112.</p><p>In the portable computer P, the PCI bus 112a further couples to a video graphics controller 114, a Cardbus interface 116 (particularly 116a) and a mobile integrated system controller (MISC) 118 (particularly 118a). In the base B, the PCI bus 112b further couples to a second MISC 118 (particularly 118b), two PCI slots 148, and a second Cardbus interface 116 (particularly 116b). The video graphics controller 114 further couples to a low power liquid crystal display (LCD) 121 or alternatively a cathode ray tube (CRT) monitor. The Cardbus interface 116 is provided for communicating with PCMCIA or Cardbus add-on cards 120, such as networking cards, modem cards, solid state storage cards and rotating storage cards. The MISC or PCI-ISA bridge 118 provides an interface to an Industry Standard Architecture (ISA) bus 138 or 140, and an integrated drive electronics (IDE) hard drive interface for communicating with hard drives 122 and CD-ROM drives. The MISC 118 is configurable based on an input pin (LAP<sub>--</sub> EXT<sub>--</sub>) for use in both the portable computer P, as MISC-L 118a, and base B, as MISC-E 118b. Thus, two MISC devices, 118a and 118b are coupled to the PCI bus 112, with MISC-L 118a coupled to the PCI bus portion 112a and MISC-E 118b coupled to PCI bus portion 112b. MISC-L is further coupled to the internal ISA bus 138 while MISC-E is coupled to the external ISA bus 140.</p><p>As the general functionality of MISC-L 118a and MISC-E 118b are very similar, at this point they are discussed together for simplicity. The MISC 118 bridges the PCI bus 112 to the ISA bus 138/140 and acts as both a master and slave on the PCI bus 112 and a bus controller on the ISA bus 138/140. The MISC 118 further includes a PCI bus arbiter, an ISA bus arbiter, 8237 compatible direct memory access (DMA) controllers, an enhanced DMA controller for fast IDE hard drives, 8254 compatible timers, an 8259 compatible interrupt controller, hot docking support logic, system power management logic, and plug and play support (all not shown in FIG. 1). Some components will be disabled upon initialization by software to prevent conflicts or duplication. The MISC 118 also contains a serial interrupt interface 144 for serially passing interrupts from MISC-E 118b to MISC-L 118a which provides an interrupt architecture for supporting standard ISA interrupts in a PCI based system.</p><p>The MISC 118 and the ISA buses 138 and 140 provide support for standard ISA peripherals such as those combined in a Mobile Super Input/Output (MSIO) peripheral chip 124. The MSIO chip 124 is a proprietary chip having a combination of standard ISA peripherals, such as a real time clock (RTC) 119; a floppy controller for interfacing to standard floppy drives 130; an 8051 compatible microcontroller for communicating with a pointing device 150, for performing scanning and key code conversions on a keyboard 132, and for performing power management functions; a universal asynchronous receiver transmitter (UART) for providing standard serial ports 136; and parallel port logic for a parallel port 134. The RTC 119 provides real time clock functions and also provides a clock signal RFSHCLK, which is received by the CPU-PCI bridge 106 for performing low power asynchronous refresh cycles, as explained in detail below.</p><p>A read only memory (ROM) 126 couples to the MSIO 124 for providing code to the 8051 microcontroller. Additionally, the ROM 126 provides basic input/output services (BIOS) code to the CPU 100 which is copied from the ROM 126 and shadowed in system memory 110 upon system initialization so that thereafter the 8051 microcontroller may access the ROM 126.</p><p>In the portable computer P, a modem and audio peripheral chip 128 is also provided and coupled to the ISA bus 138. The modem and audio peripheral chip 128 includes a standard telephony communications port for coupling to a telephone T, and an interface for coupling to a pair of stereo speakers S. In the base B, three ISA expansion slots 142 are provided for standard ISA cards.</p><p>In the portable computer P, the components connected to the PCI bus 112a are all 3.3-volt parts except the video graphics controller 114, which is a 5-volt part. Thus, in the portable computer P, the CPU-PCI bridge 106, the data buffers 108, the MISC-L 118a, and the PCMCIA interface card 116a are 3.3-volt parts. In the base B, the MISC-E 118b and the PCMCIA interface card 116b are 3.3-volt parts. As a result, in the portable computer P, a mixture of 3.3-volt and 5-volt parts exist which are connected to the PCI bus 112a.</p><p>Referring to FIG. 2, various blocks in the CPU-PCI bridge 106 are shown. The three major functional interfaces in the CPU-PCI bridge 106 are the processor/L2 cache controller (PCON) 200, memory controller (MCON) 202, and PCI controller (ICON) 204. The PCON 200 controls the CPU interface, the L2 cache 104, and signals CPUDCD 2:0! provided to the data buffers 108. The control signals CPUDCD 2:0! control when the data buffers 108 should drive the processor bus 102, latch the processor bus 102, or increment internal queues. The PCON 200 also includes logic for arbitrating between CPU and PCI master requests for the L2 tag RAMs.</p><p>The MCON 202 controls the DRAMs 110 with RAS, CAS, WE and address signals. In particular, the MCON 202 provides address signals MA 11:0! to the DRAM, which are strobed in as either row or column addresses. The MCON 202 also provides row address strobe signals RASA 5:0!<sub>--</sub>  to control the upper 32 bits of the DRAMs 110 and signals RASB 5:0!<sub>--</sub>  to control the lower 32 bits of the DRAMs 110. In the present description, a signal name followed by the character \"<sub>--</sub> \" signifies that the signal is active low. The MCON 202 also provides column address strobe signals CASA 7:0!<sub>--</sub>  to control memory banks 0 and 1, which are preferably soldered to the system board, and column address strobe signals CASB 7:0!<sub>--</sub>  to control memory banks 2, 3, 4 and 5, which are optionally inserted in SIMM sockets. A memory write enable signal MWE<sub>--</sub>  provided to the DRAMs 110 is asserted to indicate a memory write cycle.</p><p>The MCON 202 also generates control signals MEMDCD 1:0! to the data buffers 108. The control signals MEMDCD 1:0! indicate when the data buffers 108 should drive to or read from the memory data bus MD. The control signals MEMDCD 1:0! also indicate whether the memory bus transaction is between memory and a PCI master or the CPU 100. The MCON 202 also contains arbitration logic for arbitrating requests to the main memory 110.</p><p>The ICON 204 controls the interface to the PCI bus 112 and also provides control signals PCIDCD 3:0! to the data buffers 108. When the CPU 100 accesses the PCI bus 112, the ICON 204 operates as a PCI master. When a PCI master accesses the main memory 110, the ICON 204 acts as a PCI slave. The control signals PCIDCD 3:0! control whether the data buffers 108 should drive to or read from the PCI data bus. The control signals PCIDCD 3:0! also control whether data is routed between the PCI bus 112 and the CPU 100 or memory 110.</p><p>The CPU-PCI bridge 106 also includes three sets of queues: a CPU-to-PCI queue (P2IQ) 208, a CPU-to-memory queue (P2MQ) 210, and a PCI-to-memory queue (I2MQ) 212. The P2MQ 210 handles posted writes from the CPU 100 to the main memory 110. The P2IQ 208 handles posted writes from the CPU 100 to the PCI bus 112. Finally, the I2MQ 212 handles writes from PCI masters to the memory 110 as well as reads by PCI masters from the memory 110. Preferably, the I2MQ 212 is a content addressable memory, which allows each entry in the I2MQ 212 to be snooped simultaneously. The P2IQ 208, P2MQ 210, and I2MQ 212 are used to post addresses for the various cycles. For processor-to-memory read cycles and processor-to-PCI read cycles, simple read registers 214 and 216, respectively, are used.</p><p>Also included in the CPU-PCI bridge 106 is a system map (SMAP) block 206, which controls various processor, PCI interface, and memory decode and timing parameters. Because only one master can run locked cycles to the PCI bus 112, the SMAP block 206 also provides a locked resource. The locked resource may be owned by either the CPU 100 or a PCI master, but not both. The locked resource is owned by a master while it runs a locked sequence. When the CPU 100 owns the locked resource, the CPU 100 can run locked cycles to the memory 110 or to the PCI bus 112. If the CPU 100 is locking memory, the PCI masters cannot access main memory 110. If the locked resource is owned by the CPU 100, the ICON 204 retries any PCI masters attempting to run locked cycles to the main memory 110. When a PCI master owns the locked resource, the CPU 100 cannot run a locked cycle to the PCI bus 112 or the memory 110. If the locked resource is owned by a PCI master, the PCON 200 stalls any CPU locked cycles.</p><p>The P2MQ 210 is a 43-bit wide queue which is 8 entries deep for storing addresses of posted CPU write cycles to the main memory 110. In the preferred embodiment, bits 35-42 indicate which memory bank is being addressed. Bit 34 indicates if an operation is atomic, e.g., locked cycles or allocate-write back cycles from the L2 cache 104. Bit 33 indicates that a cycle is a non-postable write. Bits 25-32 indicate which byte enables are asserted for a write transaction. Finally, bits 0-24 correspond to processor address signals PA 3:27!.</p><p>The P2IQ 210 is a 44-bit wide queue that is four entries deep for storing the addresses of CPU-to-PCI write cycles. Bit 43 of each entry indicates that the cycle is a PCI special cycle. Bit 42 indicates that the SMAP block 206 has decoded the address as being located on the ISA bus. Bit 41 indicates whether the cycle is an I/O cycle or a memory cycle. Bit 40 indicates if the write is to a non-postable address. Bit 39 indicates that an operation is atomic. Bit 38 indicates if the cycle is locked, which causes the ICON 204 to lock the accessed PCI slave. Bit 37 indicates if the cycle is a PCI configuration cycle. Bits 29-36 indicate which byte enables are asserted for a write transaction. Finally, bits 0-28 correspond to the processor address signals PA 3:31!.</p><p>The I2MQ 212 is 44 bits wide and two cache lines deep. If a Pentium P54C processor is used, the I2MQ 212 is eight entries deep. If the Pentium P24 or 486 processors are used, then the I2MQ 212 is four entries deep. Each entry in the I2MQ 212 stores an address. Bits 35-42 of the address indicate which memory bank is being addressed. Bit 34 indicates if the entry must be snooped. Bit 33 indicates if a cycle is locked. Bits 25-32 indicate which byte enables are asserted for a write transaction. Finally, bits 0-24 correspond to PCI write address signals PCIAD 3:27!.</p><p>The CPU-PCI bridge 106 also includes power management logic. The power management scheme used in the computer system of the preferred embodiment consists of four modes with varying degrees of power consumption. The CPU-PCI bridge 106 contains portions of the control logic necessary to transition between these modes. The four modes, in order from highest to lowest power consumption, are the RUN, SLEEP, IDLE and STANDBY modes. The RUN mode is the state of normal operation. The CPU-PCI bridge 106 remains in the RUN mode until it receives a request from the MISC 118 to enter the SLEEP mode. The MISC 118 makes such a request by asserting a signal SLEEP<sub>--</sub>  to the CPU-PCI bridge 106.</p><p>The MISC 118 asserts the signal SLEEP<sub>--</sub>  in response to its internal stop clock register being set to a predetermined value in response to certain conditions. First, the operating system detects for system idleness when all software applications and device drivers are inactive. If so, the operating system notifies the BIOS of the system idle condition. The BIOS then performs a write to the stop clock register, which then causes the MISC 118 to assert the signal SLEEP<sub>--</sub>.</p><p>In addition, the MISC 118 asserts the SLEEP<sub>--</sub>  signal in response to when no interrupt activity has occurred for a programmed period of time. When a timer in the MISC 118 times out, the MISC 118 generates a system management interrupt (SMI). In response, a SMI handler is invoked to shut down the hard drive 122 and floppy drive 130, and also to write to the stop clock register in the MISC 118, which causes the MISC 118 to assert the signal SLEEP<sub>--</sub>.</p><p>When the CPU-PCI bridge 106 detects that the signal SLEEP<sub>--</sub>  has been asserted by the MISC 118, the PCON 200 responds by asserting a signal STPCLK<sub>--</sub>  to the CPU 100. This is a request to the CPU 100 to enter the STOP GRANT state. In response to assertion of the signal STPCLK<sub>--</sub>, the CPU 100 generates a STOP GRANT cycle on the CPU bus 102 to indicate that the CPU 100 is entering the STOP GRANT state, in which the internal clock of the CPU 100 is disabled to conserve power. In the STOP GRANT state, the CPU 100 is still able to respond to snoop cycles as well as interprocessor interrupts in the case of the Pentium P54 processor.</p><p>The CPU-PCI bridge 106 remains in the SLEEP mode until one of the following two conditions occur. First, if the signal SLEEP<sub>--</sub>  is deasserted, the CPU-PCI bridge 106 returns to the RUN mode and removes STPCLK<sub>--</sub>. Alternatively, according to one aspect of the present invention, if the signal SLEEP<sub>--</sub>  is asserted while the CPU-PCI bridge 106 is parked on the PCI bus 112 (i.e., the PCI grant signal CPUGNT<sub>--</sub>  to the CPU-PCI bridge 106 is asserted while the PCI request signal CPUREQ<sub>--</sub>  driven by the ICON 204 is deasserted), if all posted memory writes have completed (i.e., all queues are emptied), and if any pending refresh requests have been serviced, when the above conditions are detected, the CPU-PCI bridge 106 begins the transition from SLEEP mode to IDLE mode. The CPU-PCI bridge 106 forces one refresh cycle to complete to guarantee adequate refreshing and to put the memory controller into an idle state. Following the refresh cycle the CPU-PCI bridge 106. determines if the above conditions are still true; if so, the CPU-PCI bridge 106 transitions from SLEEP mode to the IDLE mode.</p><p>In the IDLE mode, the internal clocks of the CPU 100, the CPU-PCI bridge 106, the data buffers 108, and the L2 cache 104 are disabled. A signal IDLEACK is provided by the CPU-PCI bridge 106 to the MISC 118 to indicate that IDLE mode has been reached. The signal IDLEACK is also provided to the L2 cache 104 and the data buffers 108 to disable their internal clocks. When the signal IDLFACK is asserted, the CPU-PCI bridge 106 acts as a PCI master and drives the PCI bus 112. While the signal IDLEACK is asserted, the MISC 118 does not grant the PCI bus 112 to any other PCI bus master. Further, while the signal IDLEACK is asserted by the CPU-PCI bridge 106, if the MISC 118 deasserts the signal CPUGNT<sub>--</sub>  to unpark the CPU-PCI bridge 106, or if the MISC 118 deasserts the signal SLEEP<sub>--</sub>, the signal IDLEACK will be deasserted by the CPU-PCI bridge 106. Once the signal IDLEACK is deasserted, the MISC 118 can grant the PCI bus 112 to other PCI masters after at least one PCI clock period.</p><p>To reduce current to other components on the system board during the IDLE mode, the CPU-PCI bridge 106 drives the memory address signals MA 11:0! to all 0s, drives the PCI address/data bus PCIAD 31:0! to all 0s, drives the PCI command/byte enable signals PCIBE 3:0!<sub>--</sub>  to all 0s, drives the signals PCIDCD 3:0! to all 1s, drives the signal CPUDCD 1! high for Pentium processors and low for 486 processors, and drives the signal CPUDCD 0! high for 33 MHz operation and low for 50, 60 and 66 MHz operation. The PCIDCD 3:0! signals are driven to these states because that reflects the pullup or pulldown condition for each line for each alternative, which condition is used during reset for configuration purposes. Driving to the pullup or pulldown condition minimizes the power lost in the pullup or pulldown resistors. The signals MEMDCD 1:0! remain in their idle states of all 0s. The signals PCIDCD 3:0! are driven to the hexadecimal value of 0\u00d7F to reflect a pullup condition used to configure the CPU-PCI bridge 106.</p><p>As discussed above, the video graphics controller 114 is a 5-volt part while the other components connected to the PCI bus 112 are 3.3-volt parts. As a result, the 3.3-volt parts drive PCI signals to a high value of about 3.3 volts. If an input signal to the 5-volt video graphics controller 114 is driven to 3.3 volts, the input buffer circuitry of the video graphics controller 114 will recognize the input as a high input, but leakage current will flow in the input buffer transistors because of the incomplete high input voltage. In IDLE mode, where minimal power consumption is desired, the power management circuit according to another aspect of the present invention in the CPU-PCI bridge 106 drives the PCI address/data signals PCIAD 31:0! and byte enable signals PCIBE 3:0! to all 0s to avoid as much as possible leakage current in the input buffer circuitry of the video graphics controller 114.</p><p>Referring to FIG. 8, a schematic diagram is shown of circuitry used to drive PCI bus signals PCIAD 31:0!and PCIBE 3:0!<sub>--</sub>. A simplified representation of an input buffer 800 in the 5-volt video graphics controller 114 is shown. The input buffer 800 includes a P-channel MOSFET 802 and an N-channel MOSFET 804 arranged as an inverter. The drain of the P-channel MOSFET 802 is connected to the 5-volt power supply voltage and the source of the N-channel MOSFET 804 is connected to ground. The gates of the MOSFETs 802 and 804 are connected to a PCI bus signal, and the common node is provided to the core logic of the video graphics controller 114. If the input bus signal is driven to 3.3 volts, the N-channel MOSFET 804 is turned on but the P-channel MOSFET 802 is not completely turned off because the drain-to-gate voltage is greater than the threshold voltage of the P-channel MOSFET 802. The P-channel MOSFET 802 does not get pinched off, which results in leakage current flow between the 5-volt supply and ground.</p><p>To prevent the leakage current, the PCI address/data signals PCIAD 31:0! and byte enable signals PCIBE 3:0!<sub>--</sub>  are driven low by the CPU-PCI bridge 106. The CPU-PCI bridge 106 drives signals PCIAD 31:0! via a tristate buffer 806, whose input is connected to the output of a 64:32 multiplexor 810. The tristate buffer 806 is enabled by the output of a NAND gate 812. The inputs of the NAND gate 812 receive a master logic output enable signal MASADDOE<sub>--</sub>, a target logic output enable signal TARADDOE<sub>--</sub>, and the signal |IDLEACK. The signal MASADDOE<sub>--</sub>  is provided by the PCI master logic in the ICON 204, and the signal TARADDOE<sub>--</sub>  is provided by the PCI slave logic in the ICON 204. The 0 input of the multiplexor 810 receives the normal PCI address from internal circuitry in the CPU-PCI bridge 106, while the 1 input is tied to 0s. The select input of the multiplexor 810 receives the signal IDLEACK. Thus, in IDLE or STANDBY mode, the signals PCIAD 31:0! are all driven low.</p><p>The signals PCIBE 3:0! are driven by a tristate buffer 808, whose input is connected to the output of an 8:4 multiplexor 814. The select input of the multiplexor 814 receives the signal IDLEACK, its 0 input receives the multiplexed command or byte enable signals in the CPU-PCI bridge 106, and the 1 input of the multiplexor 814 is tied to 0s. The enable input of the tristate buffer receives a byte enable output enable signal |BEOE<sub>--</sub>, which is asserted when the CPU-PCI bridge 106 is parked on the PCI bus 112. A signal name preceded by the character \"|\" indicates that the signal is inverted. Thus, in IDLE or STANDBY mode, the PCI bus signals PCIBE 3:0! are also driven low.</p><p>By driving the address/data and byte enable signals to all 0s, the amount of leakage current flowing through the input buffer circuitry of the video graphics controller 114 is significantly reduced. In this condition, the N-channel MOSFET 804 is off and the P-channel MOSFET 802 is also off because the drain-to-source voltage of the P-channel MOSFET 802 is about zero volts in steady state. A similar solution can be applied in a system where there exists a mixture of 3.3-volt and 2.5-volt components.</p><p>During IDLE mode, the clock to the core logic of the CPU-PCI bridge 106 is shut off. Consequently, the MCON 202 is unable to perform normal refresh cycles to the DRAMs 110. However, according to yet another aspect of the present invention, the CPU-PCI bridge 106 receives an asynchronous clock RFSHCLK from the MSIO chip 124, which is used to run the real time clock (RTC). The signal RFSHCLK preferably has a frequency of about 32 kHz with approximately a 50--50 duty cycle.</p><p>Based on the asynchronous refresh clock RFSHCLK, low power refresh logic in the MCON 202 that is not shut off in the IDLE mode generates CAS-before-RAS (CBR) refresh cycles. To generate the low power CBR refresh cycles, the MCON 202 maintains the CASA<sub>--</sub>  and CASB<sub>--</sub>  signals asserted during the IDLE mode, and the RASA<sub>--</sub>  and RASB<sub>--</sub> signals are pulsed low for a minimum of 80 nanoseconds (ns) every 15.625, 31.25, 62.5 or 125 microseconds, depending on the programmed refresh rate. The RASB<sub>--</sub>  signals are preferably delayed 10 ns from the RASA<sub>--</sub>  signals to lower current spikes on the system board. Using dedicated circuitry to perform refresh cycles based on an external asynchronous clock RFSHCLK during the IDLE or STANDBY mode allows the normal memory controller logic to all be disabled, thereby saving power consumption.</p><p>To transition to or from the IDLE mode, the CPU-PCI bridge 106 must turn off or on the internal clock tree cleanly. The CPU-PCI bridge 106 must also provide adequate RAS precharge time when switching between normal memory controller accesses and the asynchronous CBR refresh cycles generated from the asynchronous clock RFSHCLK. The MCON 202 has logic to handle these tasks. The MCON 202 is generally divided into two sections, a front end section and a back end section. The front end section is the interface to the PCON 200 and the ICON 204, while the back end section is the interface to the DRAMs 110.</p><p>Referring to FIG. 4, portions of the back end section of the MCON 202 are shown. The back end section includes an IDLE mode controller 402 that runs off an input reference clock signal CLKI to the CPU-PCI bridge 106. The signal CLKI is programmable to run either at 33, 50 or 66 MHz and is provided to a PLL block 404. The PLL block 404 generates at its output a clock signal MUXCLK2, which is programmable between 33 MHz or 66 MHz. An enable signal M<sub>--</sub> ENCLK2 is also fed into the PLL block 404. If the signal M<sub>--</sub> ENCLK2 is deasserted, the signal MUXCLK2 is disabled. The signal MUXCLK2 is fed to one input of a two-input AND gate 406, whose other input receives the signal M<sub>--</sub> ENCLK2. The output of the AND gate 406 is provided to the input of a clock driver block 408, whose output drives a clock signal CLK2 which is provided as the main clock signal to the core logic of the CPU-PCI bridge 106.</p><p>The enable signal M<sub>--</sub> ENCLK2 is provided by the IDLE mode controller 402, which also generates the signal IDLEACK provided to the data buffers 108, the L2 cache 104, and the MISC 118. The IDLE mode controller 402 also provides a signal FORCE<sub>--</sub> RFSH, which is driven to a refresh request block 304 (FIG. 3) to force a refresh cycle before the CPU-PCI bridge 106 enters the IDLE mode. The IDLE mode controller 402 includes a state machine 424 and peripheral logic 426. The controller provides various signals to a low power refresh generator 410, which in turn provides certain signals to a memory interface block 412. The memory interface block 412 generates signals M<sub>--</sub> MA 11:0! for driving memory address signals MA 11:0!, signals M<sub>--</sub> RASA 7:0!<sub>--</sub>  and M<sub>--</sub> RASB 7:0!<sub>--</sub>  for driving row address strobe signals RASA 7:0!<sub>--</sub> and RASB 7:0!<sub>--</sub>, respectively, and signals M<sub>--</sub> CASA 7:0!<sub>--</sub> and M<sub>--</sub> CASB 7:0!<sub>--</sub>  for driving column address strobe signals CASA 7:0!<sub>--</sub>  and CASB 7:0!<sub>--</sub>, respectively.</p><p>The signals generated by the low power refresh generator 410 include a signal RAS<sub>--</sub> IDLE<sub>--</sub> SETA for setting active the M<sub>--</sub> RASA signals driven by the memory interface block 412, a signal RAS<sub>--</sub> IDLE<sub>--</sub> SETB for setting active the M<sub>--</sub> RASB<sub>--</sub>  signals, and a signal RAS<sub>--</sub> IDLE<sub>--</sub> CLRAB for clearing the M<sub>--</sub> RASA and M<sub>--</sub> RASB signals.</p><p>The IDLE mode controller 402 also generates a signal CAS<sub>--</sub> IDLE<sub>--</sub> SETAB for asserting the M<sub>--</sub> CASA and M<sub>--</sub> CASB<sub>--</sub>  signals during IDLE and STANDBY modes, and a signal CAS<sub>--</sub> IDLE<sub>--</sub> CLRAB for deasserting the M<sub>--</sub> CASA<sub>--</sub>  and M<sub>--</sub> CASB<sub>--</sub> signals after the IDLE mode controller 402 transitions out of IDLE mode. During the IDLE and STANDBY modes, the CASA<sub>--</sub>  and CASB<sub>--</sub> signals are maintained continuously asserted to allow for the generation of CBR refresh cycles.</p><p>The signals provided by the IDLE mode controller 402 to the low power refresh generator 410 include the following: a signal EN<sub>--</sub> ARAS<sub>--</sub> IDLE, which is asserted to enable the low power refresh generator 410 to generate asynchronous pulses off the clock RFSHCLK to pulse the M<sub>--</sub> RASA and M<sub>--</sub> RASB<sub>--</sub>  signals; signals SRAS<sub>--</sub> IDLE<sub>--</sub> SETA and SRAS<sub>--</sub> IDLE<sub>--</sub> SETB for synchronously turning on the M<sub>--</sub> RASA<sub>--</sub>  and M<sub>--</sub> RASB<sub>--</sub>  signals, respectively, when the CPU-PCI bridge 106 is entering or exiting IDLE mode; a signal SRAS<sub>--</sub> IDLE<sub>--</sub> CLRAB which synchronously turns off the M<sub>--</sub> RASA<sub>--</sub>  and M<sub>--</sub> RASB<sub>--</sub>  signals when entering or exiting IDLE mode; a signal IDLE<sub>--</sub> RFSH<sub>--</sub> BSY, which when asserted is an indication that the CPU-PCI bridge 106 is parked, the MCON 202 is idle, and the CPU-PCI bridge 106 is ready to have its internal clock tree shut off; and a signal CAS<sub>--</sub> IDLE which indicates that the IDLE mode CBR refresh is active.</p><p>The low power refresh generator 410 routes back certain signals to the IDLE mode controller 402. These signals include a signal ARAS<sub>--</sub> PULSE which is generated from the clock RFSHCLK and a signal TURN<sub>--</sub> ON<sub>--</sub> CAS for turning on the CAS signals to the DRAMs 110 for generating the low power CBR refresh cycles.</p><p>The IDLE mode controller 402 receives a signal PARKED from the ICON 204, which when asserted indicates that the CPU-PCI bridge 106 is parked on the PCI bus 112. The IDLE mode controller 402 also receives the signal SLEEP<sub>--</sub>  from the MISC 118. The other input signals received by the IDLE mode controller 402 include the external reference clock input signals CLKI; the internal main clock signal CLK2; a signal P<sub>--</sub> STPGNT which when asserted indicates that the CPU 100 is currently in the STOP GRANT state; a signal ENDCOUNT provided by a refresh counter 316 (FIG. 3) to indicate that a refresh count interval has elapsed; and signals Q<sub>--</sub> I2MQEMPTY, Q<sub>--</sub> P2MQEMPTY, and Q<sub>--</sub> P2MQEMPTY which when asserted indicates that the I2MQ 212, P2MQ 210 and P2IQ 208 are empty, respectively.</p><p>The IDLE mode controller 402 also receives certain other signals. One of the signals is a signal RFSH<sub>--</sub> ON from a refresh state machine 414. Assertion of the signal RFSH<sub>--</sub> ON indicates that the MCON 202 is servicing a refresh request. The refresh state machine 414 receives a signal RFSH driven by a memory arbiter 302 (FIG. 3) in the front end section of the MCON 202. The signal RFSH is asserted high if the memory arbiter 302 grants access to the main memory 110 to a refresh request. The other signals driven by the refresh state machine 414 are a signal RFSH<sub>--</sub> MCAS to turn on the CAS signals and signals RFSH<sub>--</sub> MRASA and RFSH<sub>--</sub> MRASB to turn on the RASA<sub>--</sub>  and RASB<sub>--</sub> signals, respectively, to perform a normal CBR refresh cycle.</p><p>The IDLE mode controller 402 also receives a signal RASPCHG from a RAS precharge state machine 416. The RAS precharge state machine 416 determines how long the RAS precharge, i.e., RASA<sub>--</sub>  and the RASB<sub>--</sub>  high time, should be. Assertion of the signal RASPCHG indicates that all RAS signals are inactive and the RAS precharge time has elapsed. Depending upon whether the DRAMs used in the main memory 110 are 60 ns, 70 ns, or 80 ns parts, and depending on the frequency of the signal CLK2, the RAS precharge time is programmable between two through five CLK2 periods. The RAS precharge signal RFSHPCHG is also driven to the refresh state machine 414 to prevent assertion of the signals RFSH<sub>--</sub> MCAS, RFSH<sub>--</sub> MRASA and RFSH<sub>--</sub> MRASB while the signal RFSHPCHG is negated.</p><p>Other signals received by the IDLE mode controller 402 are signals MEMIDLE and ARBEN driven by a memory controller state machine 418. The signal MEMIDLE is asserted high when the memory controller state machine 418 is in its idle state, and the signal ARBEN is asserted high to enable an arbitration cycle in the memory arbiter 302. The memory controller state machine 418 also drives a signal MRAS to control signals RASA<sub>--</sub>  and RASB<sub>--</sub>  and a signal MCAS to control signals CASA<sub>--</sub>  and CASB<sub>--</sub>  during normal memory operations. The signals MRAS and MCAS are provided to the memory interface block 412 to control generation of the signals M<sub>--</sub> RASA 7:0!<sub>--</sub>, M<sub>--</sub> RASB 7:0!<sub>--</sub>, M<sub>--</sub> CASA 7:0!<sub>--</sub>, and M<sub>--</sub> CASB 7:0!<sub>--</sub>.</p><p>The fourth mode that the CPU-PCI bridge 106 can enter into is the STANDBY mode, which is the lowest power state of the computer system with the power supply voltages still applied. In the STANDBY mode, the external reference clock CLKI to the CPU-PCI bridge 106 is stopped. The CPU-PCI bridge 106 enters into the STANDBY mode in response to the clock CLKI being stopped while the CPU-PCI bridge 106 is asserting the signal IDLEACK, followed by the STANDBY<sub>--</sub>  input to the CPU-PCI bridge 106 being driven low. The signal STANDBY<sub>--</sub>  is driven by the MSIO 124.</p><p>The MSIO 124 checks for certain conditions to assert the signal STANDBY<sub>--</sub>. One condition is when the standby button on the portable computer P is pressed. The second condition is when a low-battery condition is detected and hibernation mode is disabled. If hibernation mode is enabled, the state of the computer system can be stored onto hard disk in response to certain conditions. When the MSIO 124 detects these conditions, it relays a SMI to the MISC 118 via the serial bus 152. The MISC 118 then responds by generating a SMI to the CPU 100. In response, a second SMI handler is invoked to perform the STANDBY power management functions. The second SMI handler writes a second predetermined value to the stop clock register in the MISC 118 for placing the MISC 118 into the low power state. If the signal SLEEP<sub>--</sub>  is not already asserted, the MISC 118 asserts the signal SLEEP<sub>--</sub>  to begin the transitions to the SLEEP<sub>--</sub>  and IDLE modes. When the CPU-PCI bridge 106 asserts the signal IDLEACK back to the MISC 118, an internal IDLE status register bit is set. The contents of this status register are shadowed in a register in the MSIO 124. Any change in the IDLE status register bit is transmitted over the serial bus 152 to be shadowed in the MSIO 124. When the MSIO 124 detects that the IDLE status register bit is set, it responds by asserting the signal STANDBY<sub>--</sub>  to the CPU-PCI bridge 106.</p><p>In STANDBY mode, the CPU-PCI bridge 106 continues to drive the signals MA 11:0!, PCIAD 31:0!, PCIBE 3:0!<sub>--</sub>, PCIDCD 3:0! and CPUDCD 1:0! to the same values as were driven during the IDLE mode. In STANDBY mode, the internal clocks of the PCI-ISA bridge or MISC 118 are also shut off. However, the asynchronous clock RFSHCLK continues to run in the STANDBY mode, so that the asynchronous CBR refresh cycles continue to refresh main memory 110.</p><p>To come out of STANDBY mode, the signal STANDBY<sub>--</sub>  is first deasserted, and then the external reference clock CLKI to the CPU-PCI bridge 106 is applied. This brings the CPU-PCI bridge 106 back to the IDLE mode. As the signal CLKI is deasserted and the PLL block 404 is shut off, the MISC 118 waits a minimum of 1 millisecond before deasserting either of signals SLEEP<sub>--</sub>  or CPUGNT<sub>--</sub>  after the external clock CLKI has been started. This allows time for the PLL block 404 to get synchronized to the input clock CLKI so that when the signal M<sub>--</sub> ENCLK2 is reasserted, the PLL block 404 is stable and running at is normal operating frequency.</p><p>The PCI clock on the PCI bus 112 is used by certain logic in the ICON 204. To be used properly, the PCI clock is synchronized to the signal CLK2. The internal synchronized PCI clock is designated as a signal PHASE, which is provided to one input of a two-input OR gate 420, whose other input receives the signal IDLEACK. The output of the OR gate 420 drives the input of an inverter 422, whose output is a signal PCICLK used by logic in the ICON 204. When the signal IDLEACK is driven high, indicating that the CPU-PCI bridge 106 is either in the IDLE mode or the STANDBY mode, the clock PCICLK is maintained low to conserve power.</p><p>Since the signal CLK2 is disabled in the IDLE mode, a second internal PCI clock signal PCICLK<sub>--</sub> IDLE is provided to the IDLE mode controller 402, which is synchronous to the external reference clock CLKI rather than to the internal clock CLK2. The signal PCICLK<sub>--</sub> IDLE is provided by a D-type flip flop 426, which is clocked by the signal CLKI. The D input of the flip flop 426 is connected to the output of a four-input AND gate 428, which receives at its inputs a signal DPWRGOOD1 (indicating power supply voltages are stable in the computer system), a signal PCICLKEN (indicating that the CPU-PCI bridge 106 is not in reset), the inverted state of a signal S<sub>--</sub> MHZ33 (indicating that the computer system is in 33 MHz mode), and the inverted state of the signal PCICLK<sub>--</sub> IDLE. Thus, in non-33 MHz mode, the signal PCICLK<sub>--</sub> IDLE is toggled with the rising edge of the signal CLKI. In 33 MHz mode, the signal PCICLK<sub>--</sub> IDLE is maintained low.</p><p>Referring to FIG. 3, portions of the front end section of the MCON 202 are shown. The front end section of the MCON 202 handles snooping of PCI cycles, refresh request generation, and arbitration of all CPU, PCI and refresh request cycles to the memory 110. The memory requests include: a CPU-to-memory write request indicated by a signal P2MREQ; a CPU-to-memory read request indicated by a signal M2PREQ; a refresh request indicated by signals REFREQ1 and REFREQ2; a PCI-to-memory read request indicated by a signal M2IREQ; and a PCI-to-memory write request indicated by a signal I2MREQ. The request signals are routed to the inputs of the memory arbiter 302. The refresh request signals REFREQ1 and REFREQ2, representing first and second refresh requests, respectively, are provided by a refresh request block 304. The refresh request block 304 receives a signal ENDCOUNT from a refresh counter 316, which when asserted indicates that a refresh count interval has elapsed and the refresh request block 304 should assert another refresh request. The refresh request block 304 also receives a signal FORCE<sub>--</sub> RFSH, which when asserted by the IDLE mode controller 402 (FIG. 4) will force the signal ENDCOUNT to be asserted.</p><p>The PCI read and write request signals M2IREQ and I2MREQ are received by a snoop filter block 306, which contains a line buffer storing the last line accessed by a PCI cycle. As long as a PCI request is directed to an address contained in the line buffer, snoops to the L1 cache in the CPU 100 or the L2 cache 104 are unnecessary. An I2MSNOOP block 312 prevents a PCI-to-memory write cycle from proceeding when a snoop to the L1 or L2 cache is needed by disabling an AND gate 314, whose other input is connected to the signal I2MREQ. The output of the AND gate 314 is connected to the PCI-to-memory write request input of the arbiter 302.</p><p>A PCI read cycle is snooped at the same time it is requested to the arbiter 302. If the PCI read cycle hits a modified line in either the L1 cache or the L2 cache, the PCI-to-memory read request is aborted and rerun at a later time. The PCI-to-memory read request is aborted by a M2ISNOOP block 308, which asserts a signal CLRI2M. The PCI-to-memory request is reasserted by the M2ISNOOP block 308 after a snoop write back cycle has occurred to ensure that the proper data is read from main memory 110. Thus, the signal M2IREQ and a signal REREAD from the M2ISNOOP block 308 are provided to the inputs of a two-input OR gate 310, whose output is connected to the PCI-to-memory read request input of the arbiter 302.</p><p>Depending upon which cycle has priority, the memory arbiter 302 asserts one of signals P2M, M2P, I2M, M2I, and RFSH. The memory arbiter 302 utilizes a fixed priority scheme with exceptions. The general priority is as follows in descending order: second refresh request, P2M write request, M2P read request, I2M write request, M2I read request, and first refresh request. The second refresh request indicates that two refreshes are outstanding. However, several exceptions exist to this general priority scheme. For an example of how such a modified fixed priority scheme can be implemented, refer to patent application Ser. No. 08/324,011, entitled \"System for Arbitrating Access to Memory,\" filed Oct. 14, 1994, which is hereby incorporated by reference.</p><p>Referring to FIG. 5, a state diagram of the state machine 424 in the IDLE mode controller 402 is shown. On assertion of the system reset signal RESET, the state machine 424 enters state AWAKE. On assertion of the signal RESET, the following signals are initialized low: IDLEACK, IDLE<sub>--</sub> RFSH<sub>--</sub> BSY, FORCE<sub>--</sub> RFSH, CAS<sub>--</sub> IDLE, SRAS<sub>--</sub> IDLE<sub>--</sub> SETA, SRAS<sub>--</sub> IDLE<sub>--</sub> SETB, and SRAS<sub>--</sub> IDLE<sub>--</sub> CLRAB. The signal M<sub>--</sub> ENCLK2 is initialized high.</p><p>The state machine 424 remains in state AWAKE until the signals PARKED, P<sub>--</sub> STPGNT, and |SLEEP<sub>--</sub>  are asserted high. In state AWAKE, the signal IDLE<sub>--</sub> RFSH<sub>--</sub> BSY is maintained low to indicate that the state machine 424 is not in IDLE or STANDBY mode. If the signals PARKED and P<sub>--</sub> STPGNT are asserted, which indicates that the CPU-PCI bridge 106 is parked on the PCI bus 112 and the CPU 100 is in STOP GRANT state, and the signal SLEEP<sub>--</sub>  is asserted low, the state machine 424 transitions to state MEM<sub>--</sub> WAIT. All state transitions occur on the rising edge of the signal CLKI if the signal PCICLK<sub>--</sub> IDLE is deasserted low. In the ensuing description of the state machine 424, the combination of the rising edge of the signal CLKI and the signal PCICLK<sub>--</sub> IDLE being deasserted low will be referred to as \"state machine clock\" for brevity.</p><p>In state MEM<sub>--</sub> WAIT, the state machine 424 waits for the MCON 202 to go idle and for all queues in the CPU-PCI bridge 106 to be emptied. The MCON 202 being idle is indicated by the signal MEMIDLE being asserted. The queues being empty is indicated by a signal QEMPTY being asserted, which is true if all three of the signals Q<sub>--</sub> I2MQEMPTY, Q<sub>--</sub> P2MQEMPTY and Q<sub>--</sub> P2IQEMPTY are asserted high. In state MEM<sub>--</sub> WAIT, the state machine 424 also waits for the assertion of the signal RFSH<sub>--</sub> ON by the refresh state machine 414 to indicate the occurrence of a refresh cycle. The state machine 424 also checks to determine if there are any pending requests for the main memory 110. If there are none, a signal NO<sub>--</sub> PENDING<sub>--</sub> REQS is asserted high. If a refresh request is not asserted and the signal ENDCOUNT is deasserted low, indicating that the refresh time interval has not yet elapsed, the state machine 424 drives the signal FORCE RFSH high to force a refresh request. Thus, if the state machine 424 is in state MEM<sub>--</sub> WAIT, the signals ENDCOUNT and RFSH<sub>--</sub> ON are deasserted low, and the signals NO<sub>--</sub> RFSH<sub>--</sub> REQS, ARBEN, QEMPTY and NO<sub>--</sub> PENDING<sub>--</sub> REQS are asserted high, the signal FORCE<sub>--</sub> RFSH is asserted high on the next rising edge of the signal CLKI.</p><p>If the signals PARKED, |SLEEP<sub>--</sub>, MEMIDLE, QEMPTY, RFSH<sub>--</sub> ON and NO<sub>--</sub> PENDING<sub>--</sub> REQS are asserted high, the state machine 424 transitions from state MEM<sub>--</sub> WAIT to state RFSH<sub>--</sub> WAIT on the next state machine clock. However, if the CPU-PCI bridge 106 is no longer parked or if the signal SLEEP<sub>--</sub>  is deasserted, the state machine 424 returns from state MEM<sub>--</sub> WAIT back to state AWAKE. Otherwise, if any of the signals MEMIDLE, QEMPTY, or RFSH<sub>--</sub> ON is deasserted low, the state machine 424 remains in state MEM<sub>--</sub> WAIT.</p><p>In state MEM<sub>--</sub> WAIT, the state machine 424 waits for a refresh request to be asserted to guarantee that any RAS signals which were left asserted in previous cycles for faster CPU reads get deasserted. In state RFSH<sub>--</sub> WAIT, the state machine 424 waits for the RAS precharge time to elapse, which is indicated by the signal RASPCHG transitioning from a low state to a high state. In state RFSH<sub>--</sub> WAIT, if either of the signals PARKED or SLEEP<sub>--</sub>  is deasserted, the state machine 424 transitions back to state AWAKE.</p><p>If, however, the signals PARKED and |SLEEP<sub>--</sub>  are both asserted high, and either the signal RFSH<sub>--</sub> ON is asserted high indicating that a refresh cycle is progressing or the signal RASPCHG is deasserted low indicating that the RAS precharge time has not elapsed yet, the state machine 424 remains in state RFSH<sub>--</sub> WAIT. However, if the second refresh request signal RFSHREQ2 is asserted high, and the signals |SLEEP<sub>--</sub>, PARKED, RASPCHRG, and |RFSH<sub>--</sub> ON are all driven high, the state machine 424 transitions from state RFSH<sub>--</sub> WAIT back to state MEM<sub>--</sub> WAIT to process the second refresh request.</p><p>If the signals PARKED, |SLEEP<sub>--</sub>, |RFSH<sub>--</sub> REQ2, RASPCHG, and |RFSH<sub>--</sub> ON are all asserted high, indicating that a second refresh request has not come in, the RAS precharge time has been satisfied, and the current refresh cycle has completed, the state machine 424 transitions from state RFSH<sub>--</sub> WAIT to state EDGE<sub>--</sub> WAIT. In the transition, the signal IDLE<sub>--</sub> RFSH<sub>--</sub> BSY is asserted high to indicate that the IDLE mode controller 402 is entering IDLE mode, and the signal IDLE<sub>--</sub> RFSH<sub>--</sub> BSY is provided to the memory controller state machine 418 to disable the ARBEN signal. Once the signal IDLE<sub>--</sub> RFSH<sub>--</sub> BSY is asserted high, it is maintained high by the state machine 424 until the state machine returns to state AWAKE.</p><p>From state EDGE<sub>--</sub> WAIT, the state machine 424 transitions back to state AWAKE if either of the signals |PARKED or SLEEP<sub>--</sub>  is deasserted. In state EDGE<sub>--</sub> WAIT, the state machine 424 waits for an edge of the clock RFSHCLK so that the state machine 424 can cleanly enable the asynchronous pulses which are generated off both the rising and falling edges of the clock RFSHCLK. While the signals PARKED and |SLEEP<sub>--</sub>  are asserted and a signal TURN<sub>--</sub> ON<sub>--</sub> CAS is deasserted, the state machine 424 remains in state EDGE<sub>--</sub> WAIT. If the signals PARKED and |SLEEP<sub>--</sub>  and the signal TURN<sub>--</sub> ON<sub>--</sub> CAS is asserted high, the state machine 424 transitions from state EDGE<sub>--</sub> WAIT to state CAS<sub>--</sub> ON. The signal TURN<sub>--</sub> ON<sub>--</sub> CAS indicates that an edge of the clock RFSH<sub>--</sub> CLK has occurred. Generation of the signal TURN<sub>--</sub> ON<sub>--</sub> CAS is shown in FIG. 7 below.</p><p>In the transition from state EDGE<sub>--</sub> WAIT to state CAS<sub>--</sub> ON, the signal CAS<sub>--</sub> IDLE is set high, which causes the signal CAS<sub>--</sub> IDLE<sub>--</sub> SETAB to pulse high for one state machine clock period for setting the M<sub>--</sub> CASA 7:0!<sub>--</sub>  and M<sub>--</sub> CASB 7:0!<sub>--</sub> signals low. The signals M<sub>--</sub> CASA 7:0!<sub>--</sub>  and M<sub>--</sub> CASB 7:0!<sub>--</sub>  remain asserted low to enable low power CBR refresh cycles. Once set high, the signal CAS<sub>--</sub> IDLE remains high until cleared.</p><p>In state CAS<sub>--</sub> ON, the signal M<sub>--</sub> ENCLK2 is set low while the signal PCICLK<sub>--</sub> IDLE is deasserted low to disable the clock CLK2. Once set low, the signal M<sub>--</sub> ENCLK2 remains low until set high again. On the next state machine clock, the state machine 424 transitions from state CAS<sub>--</sub> ON to state SRAS<sub>--</sub> ON1. In the transition, the signal SRAS<sub>--</sub> IDLE<sub>--</sub> SETA is driven high. In state SRAS<sub>--</sub> ON1, the signal SRAS<sub>--</sub> IDLE<sub>--</sub> SETA is maintained high. On the next state machine clock, the state machine 424 transitions from state SRAS<sub>--</sub> ON1 to state SRAS<sub>--</sub> ON2. In the transition, the signal SRAS<sub>--</sub> IDLE<sub>--</sub> SETB is set high. The SRAS<sub>--</sub> IDLE<sub>--</sub> SETA and SRAS<sub>--</sub> IDLE<sub>--</sub> SETB signals are apart by one state machine clock to reduce current spikes on the computer system board. The signals SRAS<sub>--</sub> IDLE<sub>--</sub> SETA and SRAS<sub>--</sub> IDLE<sub>--</sub> SETB are asserted high to generate the initial synchronous CBR refresh cycle before entering into IDLE mode.</p><p>The synchronous refresh cycle is generated because it is possible that the previous refresh cycle occurred 15.6 microseconds ago, in which case, another refresh cycle is needed.</p><p>On the next state machine clock, the state machine 424 transitions from state SRAS<sub>--</sub> ON2 to state SRAS<sub>--</sub> ON3. The signals SRAS<sub>--</sub> IDLE<sub>--</sub> SETA and SRAS<sub>--</sub> IDLE<sub>--</sub> SETB are maintained asserted in state SRAS<sub>--</sub> ON3. In the transition from state SRAS<sub>--</sub> ON2 to state SRAS<sub>--</sub> ON3, the signal EN<sub>--</sub> ARAS<sub>--</sub> IDLE is cleared low if it was originally high. The signal EN<sub>--</sub> RAS<sub>--</sub> IDLE may be set high if the state machine 424 had transitioned to state SRAS<sub>--</sub> ON1 from state USE<sub>--</sub> ARAS rather than state CAS<sub>--</sub> ON. As explained earlier, assertion of the signal EN<sub>--</sub> ARAS<sub>--</sub> IDLE enables the assertion of internal asynchronous RAS set signals ARAS<sub>--</sub> IDLE<sub>--</sub> SETA, ARAS<sub>--</sub> IDLE<sub>--</sub> SETB, and ARAS<sub>--</sub> IDLE<sub>--</sub> CLRAB in the low power refresh generator 410. The signals ARAS<sub>--</sub> IDLE<sub>--</sub> SETA, ARAS<sub>--</sub> IDLE<sub>--</sub> SETB, and ARAS<sub>--</sub> IDLE<sub>--</sub> CLRAB are used to generate the RAS set signals RAS<sub>--</sub> IDLE<sub>--</sub> SETA, RAS<sub>--</sub> IDLE<sub>--</sub> SETB, and RAS<sub>--</sub> IDLE<sub>--</sub> CLRAB, respectively, for generating RAS pulses for low power CBR refresh cycles.</p><p>On the next state machine clock, the state machine 424 transitions from state SRAS<sub>--</sub> ON3 to state SRAS<sub>--</sub> OFF. In this transition, the synchronous RAS set signals SRAS<sub>--</sub> IDLE<sub>--</sub> SETA and SRAS<sub>--</sub> IDLE<sub>--</sub> SETB are cleared low. On the next state machine clock, the state machine 424 transitions from state SRAS<sub>--</sub> OFF to state SRAS<sub>--</sub> PCHG1. In the transition, the synchronous RAS clear signal SRAS<sub>--</sub> IDLE<sub>--</sub> CLRAB is asserted high. This causes the low power refresh generator 410 to assert the signal RAS<sub>--</sub> IDLE<sub>--</sub> CLRAB to the memory interface block 412 for clearing the RAS signals M<sub>--</sub> RASA 7:0!<sub>--</sub>  and M<sub>--</sub> RASB 7:0!<sub>--</sub>. State SRAS<sub>--</sub> PCHG1 begins the RAS precharge period for the initial synchronous CBR refresh cycle.</p><p>From state SRAS<sub>--</sub> PCHG1, the state machine 424 transitions to state SRAS<sub>--</sub> PCHG2 on the next state machine clock. In the transition, the synchronous RAS clear signal SRAS<sub>--</sub> IDLE<sub>--</sub> CLRAB is cleared low. State SRAS<sub>--</sub> PCHG2 extends the RAS precharge period. In state SRAS<sub>--</sub> PCHG2, if either of the signals PARKED or SLEEP<sub>--</sub>  is deasserted, the state machine 424 transitions from state SRAS<sub>--</sub> PCHG2 back to state AWAKE to exit from IDLE mode. In the transition from state SRAS<sub>--</sub> PCHG2 back to state AWAKE, the signal M<sub>--</sub> ENCLK2 is asserted high to re-enable the clock CLK2, the signal IDLEACK is cleared low to come out of IDLE mode, and the signal CAS<sub>--</sub> IDLE is deasserted high to pulse the signal CAS<sub>--</sub> IDLE<sub>--</sub> CLRAB high for one state machine clock period to deassert the M<sub>--</sub> CASA 7:0!<sub>--</sub>  and M<sub>--</sub> CASB 7:0! signals. States SRAS<sub>--</sub> PCHG1 and SRAS<sub>--</sub> PCHG2 guarantee RAS precharge time in case the state machine 424 needs to exit and relinquish control back to the main memory controller.</p><p>Otherwise, if the signal PARKED and the signal |SLEEP<sub>--</sub>  are asserted, the state machine 424 remains in state SRAS<sub>--</sub> PCHG2 while the signal ARAS<sub>--</sub> SYNC is asserted high. The signal ARAS<sub>--</sub> SYNC is delayed from the signal ARAS<sub>--</sub> PULSE by two CLKI periods. The signal ARAS<sub>--</sub> PULSE is asserted by the low power refresh generator 410 in response to the assertion of the refresh clock RFSHCLK.</p><p>When the signal ARAS<sub>--</sub> SYNC drops low, the state machine 424 transitions to state USE<sub>--</sub> ARAS. In the transition, the signal IDLEACK is driven high. The state machine 424 remains in state USE<sub>--</sub> ARAS while the signals PARKED and |SLEEP<sub>--</sub>  are asserted, indicating that the IDLE mode controller 402 continues to remain in IDLE mode. In response to the state machine 424 being in state USE<sub>--</sub> ARAS, the signal EN<sub>--</sub> ARAS<sub>--</sub> IDLE is set high to enable the generation of asynchronous RAS pulses from the refresh clock RFSHCLK. The signal EN<sub>--</sub> ARAS<sub>--</sub> IDLE remains set high until the CPU-PCI bridge 106 gets unparked from PCI bus 112 or the signal SLEEP<sub>--</sub>  is deasserted.</p><p>While the state machine 424 is in state USE<sub>--</sub> ARAS, it is possible that the signal STANDBY<sub>--</sub>  is asserted to cause the computer system to transition to STANDBY mode. In STANDBY mode, the external reference clock CLKI is disabled. As a result, the state of the state machine 424 is frozen in state USE<sub>--</sub> ARAS, with the output signals being maintained at their driven values. Thus, the signals driven by the IDLE mode controller 402 remain at the same values in the IDLE and STANDBY modes. In STANDBY mode, the low power refresh generator 410 continues to generate refresh cycles to maintain the state of the DRAMs 110.</p><p>If either of the signals PARKED or SLEEP<sub>--</sub>  are deasserted, then the state machine 424 transitions out of state USE<sub>--</sub> ARAS. If the signal ARAS<sub>--</sub> SYNC is deasserted and a signal ARAS<sub>--</sub> PCHG is deasserted, the state machine 424 transitions to state SRAS<sub>--</sub> ON1. The signal ARAS<sub>--</sub> PCHG is the signal ARAS<sub>--</sub> SYNC delayed by two state machine clocks. Thus, if both signals ARAS<sub>--</sub> SYNC and ARAS<sub>--</sub> PCHG are deasserted low, that indicates that an asynchronous RAS pulse is not currently being generated by the low power refresh generator 410; as a result, the state machine 424 transitions back to state SRAS<sub>--</sub> ON1 to generate a synchronous CBR refresh cycle before exiting IDLE mode.</p><p>If either of the signals ARAS<sub>--</sub> SYNC or ARAS<sub>--</sub> PCHG is asserted high, then the state machine 424 transitions from state USE<sub>--</sub> ARAS to state ARAS<sub>--</sub> PCHG. The state machine 424 remains in state ARAS<sub>--</sub> PCHG while either signal ARAS<sub>--</sub> SYNC or ARAS<sub>--</sub> PCHG is asserted to wait for the asynchronous RAS pulses to finish. The signal ARAS<sub>--</sub> PCHG ensures that the minimum RAS precharge time is satisfied if the signal PARKED or the signal SLEEP<sub>--</sub>  is deasserted while an asynchronous RAS pulse is on. When both signals ARAS<sub>--</sub> SYNC and ARAS<sub>--</sub> PCHG are deasserted, the state machine 424 transitions from state ARAS<sub>--</sub> PCHG back to state AWAKE. In the transition out of IDLE mode, the signal M<sub>--</sub> ENCLK2 is asserted high, the signal IDLEACK is deasserted low, the signal CAS<sub>--</sub> IDLE is deasserted low to pulse the signal CAS<sub>--</sub> IDLE<sub>--</sub> CLRAB high for one state machine clock period, and the signal EN<sub>--</sub> ARAS<sub>--</sub> IDLE is cleared low.</p><p>A timing diagram of the operation is provided in FIG. 11. In the illustrated sequence, the queues are empty, but a refresh cycle generated by the memory controller is completing when transition to idle is noted. After the completion of the refresh cycle, the forced synchronous refresh cycle is provided. After that operation, refresh cycles are generated from pulses on the CLK<sub>--</sub> 64kHz signal as the CAS<sub>--</sub>  signals are low and the CLK<sub>--</sub> 64kHz signal causes pulses every other pulse in the RAS<sub>--</sub>  signals. After a period of this asynchronous refreshing, system activity is detected and operation changes from the asynchronous operation to refreshes provided by the memory controller. Therefore the transitions from normal, memory-controller-based synchronous refresh operations to asynchronous refresh operations and back to memory-controlled-based refresh operations are clearly shown.</p><p>Thus, in summary, the state machine 424 detects for the condition where the signal SLEEP<sub>--</sub>  is asserted and the CPU-PCI bridge 106 is parked on the PCI bus 112. When that condition is detected, the state machine 424 waits for the MCON 202 to go idle and for all queues in the CPU-PCI bridge 106 to empty. If a refresh cycle is not in progress, the state machine 424 asserts the signal FORCE<sub>--</sub> RFSH to force the generation of a refresh request. The state machine 424 waits for the refresh cycle to complete and determines if the signal SLEEP<sub>--</sub>  is still asserted and the CPU-PCI bridge 106 is still parked on the PCI bus 112 before proceeding. If these conditions are true, the state machine 424 next waits for an edge of the asynchronous clock RFSHCLK before proceeding. After the rising edge of the asynchronous clock RFSHCLK is detected, the signal M<sub>--</sub> ENCLK2 is deasserted to disable the internal clock tree of the CPU-PCI bridge 106. A synchronous refresh cycle is then generated using the CAS<sub>--</sub> IDLE<sub>--</sub> SETAB, SRAS<sub>--</sub> IDLE<sub>--</sub> SETA, SRAS<sub>--</sub> IDLE<sub>--</sub> SETB and SRAS<sub>--</sub> IDLE<sub>--</sub> CLRAB signals. As the synchronous refresh cycle is triggered off the signal RFSHCLK, this allows asynchronous refresh cycles based off the clock RFSHCLK to be generated safely without violating the DRAM RAS precharge time. After generation of the synchronous refresh cycle, the state machine 424 asserts the signal EN<sub>--</sub> ARAS<sub>--</sub> IDLE, which enables the low power refresh generator 410 to generate RAS pulses off the clock RFSH<sub>--</sub> CLK. The signal EN<sub>--</sub> ATAS<sub>--</sub> IDLE remains asserted and the refresh generator 410 remains enabled even when the signal STANDBY<sub>--</sub>  is asserted to transition to STANDBY mode. When the signal SLEEP<sub>--</sub>  is deasserted or the CPU-PCI bridge 106 becomes unparked, the state machine 424 checks to see if an asynchronous refresh cycle is currently in progress. If so, it waits for the cycle to complete and for the RAS precharge time to be satisfied. If, however, an asynchronous refresh cycle is not detected when the signal SLEEP<sub>--</sub>  is deasserted or the CPU-PCI bridge 106 becomes unparked, the state machine 424 produces another synchronous refresh cycle to ensure a safe transition from asynchronous refresh generation back to synchronous refresh generation.</p><p>Referring to FIG. 6, a schematic diagram is shown of the peripheral logic 426 in the IDLE mode controller 402 and logic for generating the signal PARKED in the ICON 204. The signals CAS<sub>--</sub> IDLE<sub>--</sub> SETAB and CAS<sub>--</sub> IDLE<sub>--</sub> CLRAB are generated by two-input AND gates 602 and 604, respectively. The inputs of the AND gate 602 receive the signal CAS<sub>--</sub> IDLE and the inverted state of a signal CAS<sub>--</sub> IDLE<sub>--</sub> DLY, while the inputs of the AND gate 604 receive the signal CAS<sub>--</sub> IDLE<sub>--</sub> DLY and the inverted state of the signal CAS<sub>--</sub> IDLE. The signal CAS<sub>--</sub> IDLE<sub>--</sub> DLY is provided by the non-inverting output of a D-type flip-flop 604, whose D input receives the signal CAS<sub>--</sub> IDLE. The clock input of the flip-flop 604 is connected to the output of an AND gate 608 whose inputs receive the signals CLKI and the inverted state of the signal PCICLK IDLE. The output of the AND gate 608 provides the aforementioned state machine clock.</p><p>The signal ARAS<sub>--</sub> SYNC is provided by the non-inverting output of a D-type flip-flop 608, whose D input is connected to the non-inverting output of a D-type flip-flop 610. The D input of the flip-flop 610 receives the signal ARAS<sub>--</sub> PULSE generated by the low power refresh generator 410, and both flip-flops 610 and 608 are clocked on the rising edge of the signal CLKI and reset low by the signal RESET. The signal ARAS<sub>--</sub> SYNC is provided to the D input of a D-type flip-flop 612, whose non-inverting output is connected to the D input of a D-type flip-flop 614. The non-inverting output of the flip-flop 614 produces the signal ARAS<sub>--</sub> PCHG. The clock inputs of the flip-flops 612 and 614 receive the state machine clock and both flip-flops 612 and 614 are reset by the signal RESET.</p><p>The logic for generating the signal PARKED consists of AND gates 616, 618 and 620, which reside in the ICON 204. The signal PARKED is provided at the output of an AND gate 620, whose inputs are connected to the outputs of the AND gates 616 and 618. The inputs of the AND gate 616 receive the signal CPUREQ<sub>--</sub>  and the inverted state of the signal CPUGNT<sub>--</sub>. The signal CPUREQ<sub>--</sub>  is asserted low to the ICON 204 by the PCON 200 to request access to the PCI bus 112. In response to the request, the MISC 118 asserts a signal CPUGNT<sub>--</sub>  low. If the signal CPUREQ<sub>--</sub>  is deasserted, but the signal CPUGNT<sub>--</sub>  is asserted by the MISC 118, then that indicates that the CPU-PCI bridge 106 is parked on the PCI bus 112.</p><p>The inputs of the AND gate 618 receive the inverted state of a signal TARGETBSY, the inverted state of a signal MASTERBSY, and the signal FLSHREQ<sub>--</sub>. The signal FLSHREQ<sub>--</sub>  is asserted by the MISC 118 for a flush request to the CPU-PCI bridge 106. The signal TARGETBSY is asserted high if the ICON 204 is currently busy as the target of a target of a cycle on the PCI bus 112. The signal MASTERBSY is asserted high if the ICON 204 is currently busy as a master on the PCI bus 112. Thus, if the CPU-PCI bridge 106 is parked on the PCI bus 112, and the ICON 204 is not busy either as a PCI bus master or slave, and a flush request is not asserted by the MISC 118, the signal PARKED is asserted high.</p><p>Referring to FIG. 7, a schematic diagram of logic in the low power refresh controller 410 is shown. As noted earlier, the low power refresh generator 410 receives the refresh clock RFSHCLK. The signal RFSHCLK is provided to the clock input of a three-bit binary counter 700, whose output bit 0 provides a signal CLK<sub>--</sub> 16KHZ, output bit 1 provides a signal CLK<sub>--</sub> 8KHZ, and output bit 2 provides a signal CLK<sub>--</sub> 4KHZ. The signals CLK<sub>--</sub> 16KHZ, CLK<sub>--</sub> 8KHZ, and CLK<sub>--</sub> 4KHZ are 16, 8 and 4 kHz clocks, respectively. The reset input of the counter 700 is connected to the output of an OR gate 702, whose inputs receive the signal RESET and the inverted state of the signal IDLE<sub>--</sub> RFSH<sub>--</sub> BSY. Thus, the counter 700 is enabled when in IDLE or STANDBY mode and cleared to all zeros when in RUN or SLEEP mode.</p><p>The signals RFSHCLK, CLK<sub>--</sub> 16KHZ, CLK<sub>--</sub> 8KHZ, and CLK<sub>--</sub> 4KHZ are provided to the 0, 1, 2 and 3 inputs of a 4:1 multiplexor 704. The S1 and S0 inputs of the multiplexor 704 are connected to signals REF<sub>--</sub> RATE 1:0!, respectively, which selects the refresh rate. The output of the multiplexor 704 provides a signal CLK<sub>--</sub> KHZ, which is the clock signal used inside the low power refresh generator 410. Depending upon the value of the signals REF<sub>--</sub> RATE 1:0!, the low power refresh rate is controlled by a 4 kHz, an 8 kHz, a 16 kHz, or a 32 kHz clock.</p><p>The signal RFSHCLK is also provided to the input of a delay block 706, whose output is connected to one input of an exclusive OR gate 708. The delay block 706 has a minimum delay time of 10 ns. The other input of the exclusive OR gate 708 receives the signal RFSHCLK. The output of the exclusive OR gate 708 produces a signal CLK<sub>--</sub> 64KHZ, which is a 64 kHz clock based on the signal RFSHCLK.</p><p>A series of delayed signals are produced off of the signals CLK<sub>--</sub> KHZ. These signals are CLK<sub>--</sub> KHz<sub>--</sub> DLY1, which is the signal CLK<sub>--</sub> KHZ through one delay block; a signal CLK<sub>--</sub> KHZ<sub>--</sub> DLY2, which is the signal CLK<sub>--</sub> KHZ through two delay blocks; a signal CLK<sub>--</sub> KHZ<sub>--</sub> DLY9, which is the signal CLK<sub>--</sub> KHZ through nine delay blocks; and a signal CLK<sub>--</sub> KHZ<sub>--</sub> DLY10, which is the signal CLK<sub>--</sub> KHZ through 10 delay blocks. Each delay block has a minimum delay of 10 ns and a maximum delay of 40 ns.</p><p>The signals CLK<sub>--</sub> KHZ and CLK<sub>--</sub> KHZ<sub>--</sub> DLY9 are provided to the inputs of an exclusive OR gate 710 to provide the asynchronous RAS pulse signal ARAS<sub>--</sub> PULSE. Depending upon the delay through each delay block, the pulse width of the signal ARAS<sub>--</sub> PULSE ranges between 80 ns and 320 ns. The signal ARAS<sub>--</sub> PULSE is driven back to the IDLE mode controller 402 for generating the signal ARAS<sub>--</sub> SYNC and ARAS<sub>--</sub> PCHG.</p><p>While the CPU-PCI bridge 106 is in IDLE or STANDBY mode, RAS pulses are generated periodically to perform asynchronous CBR refresh cycles. As discussed earlier, the CASA<sub>--</sub>  and CASB<sub>--</sub>  signals are maintained low throughout IDLE and STANDBY mode, and the CBR refresh cycles are generated by pulsing the RASA<sub>--</sub>  and RASB<sub>--</sub>  signals low. To that end, asynchronous RAS set signals ARAS<sub>--</sub> IDLE<sub>--</sub> SETA and ARAS<sub>--</sub> IDLE<sub>--</sub> SETB are generated by AND gates 712 and 714, respectively. Both the signals ARAS<sub>--</sub> IDLE<sub>--</sub> SETA and ARAS<sub>--</sub> IDLE<sub>--</sub> SETB are 10 to 40 ns pulse signals. One input of the AND gate 712 is connected to the output of an exclusive OR gate 716, and the other input receives the signal EN<sub>--</sub> ARAS<sub>--</sub> IDLE generated by the IDLE mode controller 402 to enable generation of the asynchronous RAS set signals. The inputs of the exclusive OR gate 716 receive signals CLK<sub>--</sub> KHZ and CLK<sub>--</sub> KHZ<sub>--</sub> DLY1.</p><p>Similarly, one input of the AND gate 714 is connected to the output of an exclusive OR gate 718, whose inputs receives signals CLK<sub>--</sub> KHZ<sub>--</sub> DLY1 and CLK<sub>--</sub> KHZ<sub>--</sub> DLY2. The other input of the AND gate 714 receives the signal EN<sub>--</sub> ARAS<sub>--</sub> IDLE. The signal ARAS<sub>--</sub> IDLE<sub>--</sub> SETB is delayed by 10 to 40 ns with respect to the signal ARAS<sub>--</sub> IDLE<sub>--</sub> SETA to stagger the pulsing of the RASA<sub>--</sub> and RASB<sub>--</sub>  signals to reduce current spikes.</p><p>A minimum of 80 ns from the pulsing of the signal ARAS<sub>--</sub> IDLE<sub>--</sub> SETB, the signal ARAS<sub>--</sub> IDLE<sub>--</sub> CLRAB is pulsed high to deassert the RASA<sub>--</sub>  and RASB<sub>--</sub>  signals. The signal ARAS<sub>--</sub> IDLE<sub>--</sub> CLRAB is provided by an AND gate 720, whose first input receives the signal EN<sub>--</sub> ARAS<sub>--</sub> IDLE and whose second input is connected to the output of an exclusive OR gate 722. The inputs of the exclusive OR gates 722 receive signals CLK<sub>--</sub> KHZ<sub>--</sub> DLY9 and CLK<sub>--</sub> KHZ<sub>--</sub> DLY10.</p><p>The asynchronous RAS set and clear signals are combined in the low pulse refresh generator 410 with the synchronous RAS set and clear signals provided by the IDLE mode controller 402. Thus, the signals ARAS<sub>--</sub> IDLE<sub>--</sub> SETA and SRAS<sub>--</sub> IDLE<sub>--</sub> SETA are provided to the inputs of an OR gate 724 to produce the signal RASA<sub>--</sub> IDLE<sub>--</sub> SETA. The signals ARAS<sub>--</sub> IDLE<sub>--</sub> SETB and RAS<sub>--</sub> IDLE<sub>--</sub> SETB are provided to the inputs of an OR gate 726 to produce the signal RAS<sub>--</sub> IDLE<sub>--</sub> SETB. The signals ARAS<sub>--</sub> IDLE<sub>--</sub> CLRAB and SRAS<sub>--</sub> IDLE<sub>--</sub> CLRAB are provided to the inputs of an OR gate 728 to generate the signal RAS<sub>--</sub> IDLE<sub>--</sub> CLRAB. The signals RAS<sub>--</sub> IDLE<sub>--</sub> SETA, RAS<sub>--</sub> IDLE<sub>--</sub> SETB, and RAS<sub>--</sub> IDLE<sub>--</sub> CLRAB are provided to the memory interface block 412.</p><p>As discussed above, the signal TURN<sub>--</sub> ON<sub>--</sub> CAS is used to transition the state machine 424 from state EDGE<sub>--</sub> WAIT to state CAS<sub>--</sub> ON. The signal TURN<sub>--</sub> ON<sub>--</sub> CAS is provided by the non-inverting output of a D-type flip-flop 730, whose D input is connected to the non-inverting output of a D-type flip-flop 732. Both flip-flops are clocked by the signal CLKI and reset by the signal RESET. The D input of the flip-flop 732 is connected to the non-inverting output of a D-type flip-flop 734, whose D input receives the signal IDLE<sub>--</sub> RFSH<sub>--</sub> BSY. The clock signal of the flip-flop 734 receives the signal CLK<sub>--</sub> 64KHZ, and the reset input is connected to the output of an OR gate 736. The inputs of the OR gates 736 receive the signals RESET and CAS<sub>--</sub> IDLE. The signal CAS<sub>--</sub> IDLE is used to reset the flip-flop 734 to prevent the signal TURN<sub>--</sub> ON<sub>--</sub> CAS from being asserted for a second time. The signal TURN<sub>--</sub> CAS<sub>--</sub> ON is asserted on the first rising edge of the clock CLK<sub>--</sub> 64KHZ after the signal IDLE<sub>--</sub> RFRSH<sub>--</sub> BSY is asserted.</p><p>Referring to FIG. 9, a state diagram is shown of the refresh state machine 414, which produces the memory refresh cycles when the computer system is not in IDLE or STANDBY mode. The refresh state machine 414 is clocked off the signal CLK2, which is disabled in the IDLE and STANDBY modes. All transitions of the refresh state machine 414 occur on the rising edge of the signal CLK2. Initially, on assertion of the signal RESET, the state machine 414 transitions to idle state A, where it remains until the signal RFSH is asserted by the memory arbiter 302 to indicate that a refresh request has been granted access to the memory 110. The signal RFSH<sub>--</sub> ON is deasserted low when the state machine 414 is in state A, but it is asserted high if the state machine 414 transitions to any of the other states. The signal RFSH<sub>--</sub> ON indicates that a refresh cycle is in progress.</p><p>If the signal RFSH is asserted high, but either of signal MEMIDLE or RASPCHG is deasserted low, the state machine 414 transitions from state A to state B. The signal MEMIDLE being deasserted low indicates that the memory controller state machine 418 is busy. The signal RASPCHG being deasserted low indicates that the RAS precharge time has not yet been satisfied from a previous memory cycle. If, however, the signal RFSH is asserted high and both signals MEMIDLE and RASPCHG are asserted high, the state machine 414 transitions from state A to state C. Similarly, from state B, the state machine 414 transitions to state C when the signals MEMIDLE and RASPCHG are asserted high. In the transition from state A or B to state C, the signal RFSH<sub>--</sub> MCAS is asserted high to enable the activation of the MCASA<sub>--</sub>  and MCASB<sub>--</sub>  signals for a CBR refresh cycle.</p><p>In state C, a refresh acknowledge signal RFSHACK is asserted high and provided to the memory controller state machine 418 as an acknowledge that a refresh cycle is in progress and that the CASA<sub>--</sub>  and CASB<sub>--</sub> signals have been activated. In state C, the signal RFSH<sub>--</sub> MCAS is maintained high and the signal RFSH<sub>--</sub> MRASA is asserted high to activate the RASA<sub>--</sub>  signals.</p><p>On the next rising edge of the signal CLK2, the state machine 414 transitions from state C to state D. In state D, the signals RFSH<sub>--</sub> MCAS and RFSH<sub>--</sub> MRASA are maintained high, and the signal RFSH<sub>--</sub> MRASB is asserted high to activate the RASB<sub>--</sub>  signals. The signals RFSH<sub>--</sub> MRASA and RFSH<sub>--</sub> MRASB are staggered by one CLK2 period to reduce current spikes in performing the memory refresh cycles.</p><p>On the next rising edge of the signal CLK2, the state machine 414 transitions from state D to state E. In state E, the signals RFSH<sub>--</sub> MCAS, RFSH<sub>--</sub> MRASA, and RFSH<sub>--</sub> MRASB are maintained high. In state E, one of four transitions can occur, depending upon the programmed RAS pulse width. The RAS pulse width is programmed with bits S<sub>--</sub> MREFTC 1:0!. If both bits are programmed to zeros, the state machine 414 transitions from state E to state A on the next rising edge of the signal CLK2. The bits S<sub>--</sub> MREFTC 1:0! being programmed to the value 00 indicate a RAS pulse width of two clocks. If the bits S<sub>--</sub> MREFTC 1:0! are programmed to the value 01, indicating a RAS pulse width of three clocks, the state machine 414 transitions from state E to state H on the next rising edge of the signal CLK2. If the signals S<sub>--</sub> MREFTC 1:0! are programmed to the value 10, indicating a RAS pulse width of four clocks, the state machine 414 transitions from state E to state G on the next rising edge of the signal CLK2. Finally, if the signals S<sub>--</sub> MREFTC 1:0! are programmed to the value 11, then the RAS pulse width is five clocks and the state machine transitions from state E to state F on the next rising edge of the signal CLK2.</p><p>The state machine 414 transitions from state F to state G to state H on each subsequent rising edge of the signal CLK2. The signals RFSH<sub>--</sub> MCAS, RFSH<sub>--</sub> MRASA, and RFSH<sub>--</sub> MRASB are maintained high in states F, G and H. From state H, the state machine 414 transitions back to state A if the signal RFSH is deasserted low. However, if the signal RFSH is asserted high, indicating that another refresh request has been granted access to the memory 110, the state machine. 414 transitions from state H to state B to begin another CBR refresh cycle.</p><p>Referring to FIG. 10, portions of the memory interface block 412 are shown. The signals M<sub>--</sub> CASA 7:0!<sub>--</sub>  and M<sub>--</sub> CASB 7:0!<sub>--</sub>  are driven by buffers 902 and 904, respectively. The inputs of the buffers 902 and 904 are connected to signals M<sub>--</sub> CAS 7:0!<sub>--</sub>, which are provided by the non-inverting output of a D-type flip-flop 906. The flip-flop 906 is clocked on the rising edge of the signal CLK2, and has asynchronous set and reset inputs. The reset input receives the signal CAS<sub>--</sub> IDLE<sub>--</sub> SETAB, and the set input receives the signal CAS<sub>--</sub> IDLE<sub>--</sub> CLRAB. The signals CAS<sub>--</sub> IDLE<sub>--</sub> SETAB and CAS<sub>--</sub> IDLE<sub>--</sub> CLRAB are asserted to set and reset the CASA<sub>--</sub>  and CASB<sub>--</sub>  signals. The D input of the flip-flop 906 is connected to the output of a 16:8 multiplexor 908. The 0 input of the multiplexor 908 receives the inverted state of the signal RFSH<sub>--</sub> MCAS, repeated eight times. The 1 input of the multiplexor 908 receives signals BELAT 7:0!<sub>--</sub>, which are the byte enable bits used to control the M<sub>--</sub> CAS 7:0!<sub>--</sub>  signals during normal memory cycles. The select input of the multiplexor 908 receives the signal MCAS provided by the memory controller state machine 418.</p><p>The signals M<sub>--</sub> RASA 5:0!<sub>--</sub>  and M<sub>--</sub> RASB 5:0!<sub>--</sub>  are provided by the non-inverting outputs of D-type flip-flops 910 and 912, respectively. Both flip-flops 910 and 912 are clocked on the rising edge of the signal CLK2, and both flip-flops 910 and 912 include asynchronous set and reset inputs. The reset and set inputs of the flip-flop 910 receive the signals RAS<sub>--</sub> IDLE<sub>--</sub> SETA and RAS<sub>--</sub> IDLE<sub>--</sub> CLRAB, respectively, while the reset and set inputs of the flip-flop 912 receive the signals RAS<sub>--</sub> IDLE<sub>--</sub> SETB and RAS<sub>--</sub> IDLE<sub>--</sub> CLRAB, respectively. The signals RAS<sub>--</sub> IDLE<sub>--</sub> SETA and RAS<sub>--</sub> IDLE<sub>--</sub> SETB are used to set the RASA<sub>--</sub>  and RASB<sub>--</sub>  signals during IDLE mode to generate refresh cycles. The signal RAS<sub>--</sub> IDLE<sub>--</sub> CLRAB is used to during IDLE mode to clear the RASA<sub>--</sub>  and RASB<sub>--</sub>  signals.</p><p>The D inputs of the flip-flops 910 and 912 are connected to the outputs of 16:8 multiplexors 914 and 916, respectively. The select inputs of both multiplexors 914 and 916 receive the inverted state of the signal MRAS provided by the memory controller state machine 418. The 1 input of the multiplexor 914 receives the inverted state of the signal |RFSH<sub>--</sub> MRASA, repeated eight times. The 0 input of the multiplexor 914 receives signals D<sub>--</sub> RASA 5:0!<sub>--</sub>. The 1 input of the multiplexor 916 receives the inverted state of the signal RFSH<sub>--</sub> MRASB, repeated eight times, and its 0 input receives signals D<sub>--</sub> RASB 5:0!<sub>--</sub>. The signals D<sub>--</sub> RASA 5:0!<sub>--</sub>  and D<sub>--</sub> RASB 5:0!<sub>--</sub>  are used to control the states of the M<sub>--</sub> RASA 5:0!<sub>--</sub>  and M<sub>--</sub> RASB 5:0!<sub>--</sub>  signals during normal memory cycles. The signals RFSH<sub>--</sub> MCAS, RFSH<sub>--</sub> MRASA, and RFSH<sub>--</sub> MRASB control the states of the signals M<sub>--</sub> CASA 7:0!<sub>--</sub>, M<sub>--</sub> CASB 7:0!<sub>--</sub>, M<sub>--</sub> RASA 5:0!<sub>--</sub>  and M<sub>--</sub> RASB 5:0!<sub>--</sub>  during normal memory refresh cycles.</p><p>During the IDLE and STANDBY modes, the states of the flip flops 906, 910 and 912 are frozen because the signal CLK2 is disabled. In these low power modes, the signals CAS<sub>--</sub> IDLE<sub>--</sub> SETAB, CAS<sub>--</sub> IDLE<sub>--</sub> CLRAB, RAS<sub>--</sub> IDLE<sub>--</sub> SETA, RAS<sub>--</sub> IDLE<sub>--</sub> SETB and RAS<sub>--</sub> IDLE<sub>--</sub> CLRAB are used to pulse the M<sub>--</sub> CASA 7:0!<sub>--</sub>, M<sub>--</sub> CASB 7:0!<sub>--</sub>, M<sub>--</sub> RASA 5:0!<sub>--</sub> and MR<sub>--</sub> ASB 5:0!<sub>--</sub>  signals.</p><p>Thus, what has been described is a computer system having a power management circuit which implements four power levels, from highest power consumption to lowest power consumption: RUN mode, SLEEP mode, IDLE mode, and STANDBY mode. The computer system preferably includes a PCI bus and an ISA bus, with a CPU-PCI bridge to connect the host bus and the PCI bus and a PCI-ISA bridge to connect the PCI bus and the ISA bus. The power management circuit transitions from SLEEP mode to IDLE mode by first determining if the CPU-PCI bridge is parked on the PCI bus and if it is in SLEEP mode. The power management circuit then waits for one refresh period and for all internal queues to empty before checking again to determine if the CPU-PCI bridge is still parked on the PCI bus and if it is still in SLEEP mode. If true, the CPU-PCI bridge transitions to IDLE mode. The power management circuit also performs low power refresh cycles when it is in IDLE or STANDBY mode. In those modes, the memory controller in the CPU-PCI bridge is disabled to conserve power. The power management circuit performs the refresh cycles based off an external asynchronous clock. Further, the power management circuit drives certain PCI bus signals to a certain state to avoid leakage current due to the existence of a mixture of 3.3-volt and 5-volt components connected to the PCI bus.</p><p>The foregoing disclosure and description of the invention are illustrative and explanatory thereof, and various changes in the size, shape, materials, components, circuit elements, wiring connections and contacts, as well as in the details of the illustrated circuitry and construction and method of operation may be made without departing from the spirit of the invention.</p><?DETDESC description=\"Detailed Description\" end=\"tail\"?></description>"}], "inventors": [{"first_name": "Todd J.", "last_name": "DeSchepper", "name": ""}, {"first_name": "James R.", "last_name": "Reif", "name": ""}, {"first_name": "James R.", "last_name": "Edwards", "name": ""}, {"first_name": "Michael J.", "last_name": "Collins", "name": ""}, {"first_name": "John E.", "last_name": "Larson", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "COMPAQ COMPUTER CORPORATION"}, {"first_name": "", "last_name": "HEWLETT-PACKARD DEVELOPMENT COMPANY, L.P.", "name": ""}, {"first_name": "", "last_name": "COMPAQ INFORMATION TECHNOLOGIES GROUP, L.P.", "name": ""}], "ipc_classes": [{"primary": true, "label": "G06F   1/32"}], "locarno_classes": [], "ipcr_classes": [{"label": "G06F   1/32        20060101A I20051110RMUS"}], "national_classes": [{"primary": true, "label": "713323"}, {"primary": false, "label": "713321"}, {"primary": false, "label": "710311"}], "ecla_classes": [{"label": "G06F   1/32P"}, {"label": "G06F   1/32P5S"}], "cpc_classes": [{"label": "G06F   1/3287"}, {"label": "G06F   1/3287"}, {"label": "Y02D  10/00"}, {"label": "G06F   1/3203"}, {"label": "Y02D  10/00"}, {"label": "G06F   1/3203"}], "f_term_classes": [], "legal_status": "Expired - Lifetime", "priority_date": "1995-12-20", "application_date": "1997-02-18", "family_members": [{"ucid": "US-5721935-A", "titles": [{"lang": "EN", "text": "Apparatus and method for entering low power mode in a computer system"}]}]}