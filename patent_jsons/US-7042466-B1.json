{"patent_number": "US-7042466-B1", "publication_id": 74649963, "family_id": 22758067, "publication_date": "2006-05-09", "titles": [{"lang": "EN", "text": "Efficient clip-testing in graphics acceleration"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA50972480\"><p num=\"p-0001\">A method and apparatus for performing fast clip-testing operations in a general purpose processor are provided. This is accomplished by executing a single instruction for comparing a first value x to a second value y and, as a result of the comparison, determining whether x is less than y and whether x is less than negative y. The values x and y are stored in respective source registers of the processor specified by the instruction. Finally, as a result of the determination, one or more binary values representing the results of the determination are inserted into a destination register of the processor also specified by the instruction. Accordingly, the invention advantageously provides a general purpose processor with the ability to execute a clip-testing function with a single instruction compared with prior art general purpose processors that require multiple instructions to perform the same function. Thus, the general purpose processor of the present invention allows for more efficient and faster clip-testing operations.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"CLM-00001\" num=\"00001\">\n<claim-text>1. A method of performing clip-testing-on a processor that implements an instruction set, the method comprising:\n<claim-text>providing the processor with a single instruction opcode selected from the instruction set and corresponding operands thereof, together indicating a clip-testing instruction; and</claim-text>\n<claim-text>by executing the single instruction opcode with a first value x and a second value y identified by the operands;\n<claim-text>determining whether x is less than y;</claim-text>\n<claim-text>determining whether x is less than negative y; and</claim-text>\n<claim-text>storing the result of the determinations in a result location.</claim-text>\n</claim-text>\n</claim-text>\n</claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00002\" num=\"00002\">\n<claim-text>2. The method of <claim-ref idref=\"CLM-00001\">claim 1</claim-ref>, wherein the values x and y are stored in respective source registers of the processor specified by the clip-testing instruction.</claim-text>\n</claim>"}, {"num": 3, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00003\" num=\"00003\">\n<claim-text>3. The method of <claim-ref idref=\"CLM-00001\">claim 1</claim-ref>, further comprising:\n<claim-text>inserting one or more binary values into a destination register of the processor specified by the instruction as a result of the determinations.</claim-text>\n</claim-text>\n</claim>"}, {"num": 4, "parent": 3, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00004\" num=\"00004\">\n<claim-text>4. The method of <claim-ref idref=\"CLM-00003\">claim 3</claim-ref>, further comprising:\n<claim-text>reading a value stored in a third source register of the processor specified by the instruction prior to said inserting;</claim-text>\n<claim-text>shifting the value read from the third source register by a predetermined number of bit positions; and</claim-text>\n<claim-text>storing the shifted value into the destination register.</claim-text>\n</claim-text>\n</claim>"}, {"num": 5, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00005\" num=\"00005\">\n<claim-text>5. The method of <claim-ref idref=\"CLM-00001\">claim 1</claim-ref>, wherein execution of the single instruction opcode by the processor is pipelined.</claim-text>\n</claim>"}, {"num": 6, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00006\" num=\"00006\">\n<claim-text>6. The method of <claim-ref idref=\"CLM-00001\">claim 1</claim-ref>, wherein the single instruction is executed by the processor with a throughput of one instruction per cycle.</claim-text>\n</claim>"}, {"num": 7, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00007\" num=\"00007\">\n<claim-text>7. The method of <claim-ref idref=\"CLM-00001\">claim 1</claim-ref>, wherein multiple pairs of the values x and y are provided and results of the determinations of whether x is less than y and whether x is less than negative y are stored in a result location for each pair of the values x and y.</claim-text>\n</claim>"}, {"num": 8, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"CLM-00008\" num=\"00008\">\n<claim-text>8. A general purpose processor that implements an instruction set comprising:\n<claim-text>a register file;</claim-text>\n<claim-text>an instruction fetch unit; and</claim-text>\n<claim-text>decoding circuitry;</claim-text>\n<claim-text>wherein by executing clip-testing instructions including a single instruction opcode selected from the instruction set and corresponding one or more operands thereof:\n<claim-text>a first value x is compared to a second value y;</claim-text>\n<claim-text>as a result of the comparison, it is determined whether x is less than y and whether x is less than negative y; and</claim-text>\n<claim-text>as a result of the determination, one or more binary values are inserted into a destination register of the processor specified by the instruction.</claim-text>\n</claim-text>\n</claim-text>\n</claim>"}, {"num": 9, "parent": 8, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00009\" num=\"00009\">\n<claim-text>9. The processor of <claim-ref idref=\"CLM-00008\">claim 8</claim-ref>, wherein the values x and y are stored in respective source registers of the register file specified by the instruction.</claim-text>\n</claim>"}, {"num": 10, "parent": 8, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00010\" num=\"00010\">\n<claim-text>10. The processor of <claim-ref idref=\"CLM-00008\">claim 8</claim-ref>, wherein one or more binary values are stored into a destination register of the register file specified by the instruction as a result of the determination.</claim-text>\n</claim>"}, {"num": 11, "parent": 10, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00011\" num=\"00011\">\n<claim-text>11. The processor of <claim-ref idref=\"CLM-00010\">claim 10</claim-ref>, wherein a value stored in a third source register of the register file specified by the instruction is read prior to said inserting, the value read from the third source register is shifted by a predetermined number of bit positions, and the shifted value is stored into the destination register.</claim-text>\n</claim>"}, {"num": 12, "parent": 8, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00012\" num=\"00012\">\n<claim-text>12. The processor of <claim-ref idref=\"CLM-00008\">claim 8</claim-ref>, wherein execution of the single instruction opcode by the processor is pipelined.</claim-text>\n</claim>"}, {"num": 13, "parent": 8, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00013\" num=\"00013\">\n<claim-text>13. The processor of <claim-ref idref=\"CLM-00008\">claim 8</claim-ref>, wherein the instruction is executed by the processor with a throughput of one instruction per cycle.</claim-text>\n</claim>"}, {"num": 14, "parent": 8, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00014\" num=\"00014\">\n<claim-text>14. The processor of <claim-ref idref=\"CLM-00008\">claim 8</claim-ref>, wherein multiple pairs of the values x and y are compared and results of the determination of whether x is less than y and whether x is less than negative y are stored into a destination register for each pair of the values x and y.</claim-text>\n</claim>"}, {"num": 15, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"CLM-00015\" num=\"00015\">\n<claim-text>15. An apparatus comprising:\n<claim-text>means for receiving a single-instruction opcode selected from a processor instruction set and corresponding one or more operands thereof, together indicating a clip-testing instruction;</claim-text>\n<claim-text>means for executing the single instruction opcode, the means for executing including:\n<claim-text>means for comparing a first value to a second value, the first and second values identified by the one or more operands;</claim-text>\n<claim-text>means for determining, based upon the comparing, whether the first value is less than the second value and whether the first value is less than a negative of the second value; and</claim-text>\n<claim-text>means for storing the result of the determining in a result location.</claim-text>\n</claim-text>\n</claim-text>\n</claim>"}, {"num": 16, "parent": 15, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00016\" num=\"00016\">\n<claim-text>16. The apparatus of <claim-ref idref=\"CLM-00015\">claim 15</claim-ref>, further comprising:\n<claim-text>means for inserting one or more binary values into a destination register specified by the instruction as a result of the determination.</claim-text>\n</claim-text>\n</claim>"}, {"num": 17, "parent": 16, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00017\" num=\"00017\">\n<claim-text>17. The apparatus of <claim-ref idref=\"CLM-00016\">claim 16</claim-ref>, wherein the means for executing further includes:\n<claim-text>means for reading a value stored in a third source register specified by the instruction prior to said inserting;</claim-text>\n<claim-text>means for shifting the value read from the third source register by a predetermined number of bit positions; and</claim-text>\n<claim-text>means for storing the shifted value into the destination register.</claim-text>\n</claim-text>\n</claim>"}, {"num": 18, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"CLM-00018\" num=\"00018\">\n<claim-text>18. A computer program product including at least one single-instruction opcode selected from a processor instruction set, the at least one single-instruction opcode executable to, compare a first value to a second value, the first and second values identified by one or more operands of the at least one single-instruction opcode; determine, based upon the comparison, whether the first value is less than the second value and whether the first value is less than a negative of the second value; and store the result of the determination in a result location.</claim-text>\n</claim>"}, {"num": 19, "parent": 18, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00019\" num=\"00019\">\n<claim-text>19. The computer program product of <claim-ref idref=\"CLM-00018\">claim 18</claim-ref>, wherein the at least one single-instruction opcode is further executable to:\n<claim-text>insert one or more binary values into a destination register specified by the instruction as a result of the determination;</claim-text>\n<claim-text>read a value stored in a source register specified by the instruction prior to said inserting;</claim-text>\n<claim-text>shift the value read from the source register by a predetermined number of bit positions; and</claim-text>\n<claim-text>store the shifted value into the destination register.</claim-text>\n</claim-text>\n</claim>"}, {"num": 20, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"CLM-00020\" num=\"00020\">\n<claim-text>20. A processor that implements an instruction set comprising:\n<claim-text>a plurality of independent parallel execution paths that execute in parallel across a plurality of threads, the execution paths including a multiple instruction parallel pathway for execution of a thread; and</claim-text>\n<claim-text>the independent parallel execution paths including a plurality of functional units capable of executing a plurality of instructions in parallel from an instruction set that includes data handling instructions for multiple-thread execution on the plurality of functional units and one or more special purpose registers of a corresponding parallel execution path for fast bypass between different functional units thereof,</claim-text>\n<claim-text>wherein the plurality of functional units include,\n<claim-text>an instruction fetch unit, and</claim-text>\n<claim-text>decoding circuitry,</claim-text>\n<claim-text>wherein by executing clip-testing instructions including a single instruction opcode selected from the instruction set and corresponding one or more operands thereof:\n<claim-text>a first value x is compared to a second value y;</claim-text>\n<claim-text>as a result of the comparison, it is determined whether x is less than y and whether x is less than negative y; and</claim-text>\n</claim-text>\n</claim-text>\n<claim-text>as a result of the determination, one or more binary values are inserted into a destination register of the processor specified by the instruction.</claim-text>\n</claim-text>\n</claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES16031420\">\n<?RELAPP description=\"Other Patent Relations\" end=\"lead\"?>\n<p num=\"p-0002\">This non-provisional application is a continuation of U.S. patent application Ser. No. 09/204,480, filed on Dec. 3, 1998, now U.S. Pat. No. 6,718,457, listing as inventors Marc Tremblay and William Joy, and claims benefit of the earlier filing date thereof.</p>\n<?RELAPP description=\"Other Patent Relations\" end=\"tail\"?>\n<?BRFSUM description=\"Brief Summary\" end=\"lead\"?>\n<h4>BACKGROUND OF THE INVENTION</h4>\n<p num=\"p-0003\">1. Field of the Invention</p>\n<p num=\"p-0004\">The present invention relates generally to processors and, more particularly to instructions for use with processors.</p>\n<p num=\"p-0005\">2. Related Art</p>\n<p num=\"p-0006\">The increasing popularity of multimedia and 3-D graphics display has created a substantial demand for current microprocessors to support graphics operations. Typically, this is done by means of surface graphics techniques, where an object is represented as a collection of very small primitives, simple geometric shapes such as triangles, that approximate the shape of the object. Each of the triangles is represented by a set of vertices whose coordinates are stored in the memory of a computer. In addition to the coordinates of the vertices, additional information pertaining to color, lighting and other properties of the triangles are also stored in the memory of the computer. In order to display the objects represented by the triangles, a series of mathematical transformations are applied to the data stored in the memory of the computer to transform the three-dimensional representation of the object into a two-dimensional image that can be displayed on a screen of the computer. One of the operations required as part of these transformations is a determination of which triangles or portions of the triangles are visible from the viewpoint chosen for the displayed image. This operation is known as clip-testing. An important element of a clip-testing operation is determining whether a point at a given set of coordinates is within the eye space visible on the screen.</p>\n<p num=\"p-0007\">While dedicated graphics processors such as DSPs provide varying levels of hardware support for clip-testing operations, general purpose processors typically provide only limited support for clip-testing operations, thereby requiring these operations to be performed by software executing on the processor. Since hardware implementations are inherently faster than software implementations, there is a need for a general purpose processor that supports faster clip-testing operations.</p>\n<h4>SUMMARY OF THE INVENTION</h4>\n<p num=\"p-0008\">The present invention provides a method and apparatus for performing fast clip-testing operations in a general purpose processor. The fast clip-testing operations are accomplished by executing a single instruction for comparing a first value x to a second value y and, as a result of the comparison, determining whether x is less than y and whether x is less than negative y. The values x and y are stored in respective source registers of the processor specified by the instruction. As a result of the determination, one or more binary values representing the results of the determination are inserted into a destination register of the processor also specified by the instruction.</p>\n<p num=\"p-0009\">Accordingly, the invention advantageously provides a general purpose processor with the ability to execute a clip-testing function with a single instruction compared with prior art general purpose processors that require multiple instructions to perform the same function. Thus, the general purpose processor of the present invention allows for more efficient and faster clip-testing operations.</p>\n<?BRFSUM description=\"Brief Summary\" end=\"tail\"?>\n<?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?>\n<description-of-drawings>\n<h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4>\n<p num=\"p-0010\"><figref idrefs=\"DRAWINGS\">FIG. 1A</figref> is a schematic block diagram illustrating a single integrated circuit chip implementation of a processor in accordance with an embodiment of the present invention.</p>\n<p num=\"p-0011\"><figref idrefs=\"DRAWINGS\">FIG. 1B</figref> is a schematic block diagram showing the core of the processor.</p>\n<p num=\"p-0012\"><figref idrefs=\"DRAWINGS\">FIG. 2A</figref> is a diagrammatic block diagram of a register file of the processor of <figref idrefs=\"DRAWINGS\">FIG. 1B</figref>.</p>\n<p num=\"p-0013\"><figref idrefs=\"DRAWINGS\">FIG. 2B</figref> is a diagrammatic block diagram of a register of the register file of <figref idrefs=\"DRAWINGS\">FIG. 2A</figref>.</p>\n<p num=\"p-0014\"><figref idrefs=\"DRAWINGS\">FIG. 3A</figref> is a diagrammatic block diagram showing instruction formats for four operand instructions supported by the processor of <figref idrefs=\"DRAWINGS\">FIG. 1B</figref>.</p>\n<p num=\"p-0015\"><figref idrefs=\"DRAWINGS\">FIG. 3B</figref> is a diagrammatic block diagram showing an instruction format for a clip-testing instruction supported by the processor of <figref idrefs=\"DRAWINGS\">FIG. 1B</figref>.</p>\n<p num=\"p-0016\"><figref idrefs=\"DRAWINGS\">FIG. 4</figref> is a diagrammatic block diagram showing the relationship between the instruction format of <figref idrefs=\"DRAWINGS\">FIG. 3B</figref> and the register file of <figref idrefs=\"DRAWINGS\">FIG. 2A</figref>.</p>\n<p num=\"p-0017\"><figref idrefs=\"DRAWINGS\">FIG. 5</figref> is a block diagram of one implementation of the circuitry within MFUs <b>222</b> of the processor of <figref idrefs=\"DRAWINGS\">FIG. 1B</figref> for performing the clip-testing instruction of <figref idrefs=\"DRAWINGS\">FIG. 3B</figref>.</p>\n<p num=\"p-0018\"><figref idrefs=\"DRAWINGS\">FIG. 6</figref> is a block diagram of an alternative implementation of the circuitry within MFUs <b>222</b> of the processor of <figref idrefs=\"DRAWINGS\">FIG. 1B</figref> for performing the clip-testing instruction of <figref idrefs=\"DRAWINGS\">FIG. 3B</figref>.</p>\n</description-of-drawings>\n<?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?>\n<?DETDESC description=\"Detailed Description\" end=\"lead\"?>\n<h4>DETAILED DESCRIPTION OF THE INVENTION</h4>\n<p num=\"p-0019\">A processor in accordance to the principles of the present invention is illustrated in <figref idrefs=\"DRAWINGS\">FIGS. 1A and 1B</figref>.</p>\n<p num=\"p-0020\">Referring to <figref idrefs=\"DRAWINGS\">FIG. 1A</figref>, a schematic block diagram illustrates a single integrated circuit chip implementation of a processor <b>100</b> that includes a memory interface <b>102</b>, a geometry preprocessor <b>104</b>, two media processing units <b>110</b> and <b>112</b>, a shared data cache <b>106</b> and several interface controllers. The components are mutually linked and closely linked to the processor core with high bandwidth, low-latency communication channels to manage multiple high-bandwidth data streams efficiently and with a low response time.</p>\n<p num=\"p-0021\">Illustrative memory interface <b>102</b> is a direct Rambus Dynamic RAM (DRDRAM) controller. Shared data cache <b>106</b> is a dual-ported storage that is shared among media processing units <b>110</b> and <b>112</b> with one port allocated to each of media processing unit <b>110</b> and <b>112</b>.</p>\n<p num=\"p-0022\">Media processing units <b>110</b> and <b>112</b> are included in a single integrated circuit chip to support an execution environment exploiting thread level parallelism in which two independent threads can execute simultaneously. The threads may arise from any source such as the same application, different applications, the operating system, or the runtime environment. Parallelism is exploited at the thread level since parallelism is rare beyond four, or even two, instructions per cycle in general purpose code. For example, illustrative processor <b>100</b> is an eight-wide machine with eight execution units for executing instructions. A typical \u201cgeneral-purpose\u201d processing code has an instruction level parallelism of about two so that, on average, most (about six) of the eight execution units would be idle at any time. Illustrative processor <b>100</b> employs thread level parallelism and operates on two independent threads, possibly attaining twice the performance of a processor having the same resources and clock rate but utilizing traditional non-thread parallelism.</p>\n<p num=\"p-0023\">Although processor <b>100</b> shown in <figref idrefs=\"DRAWINGS\">FIG. 1A</figref> includes two processing units on an integrated circuit chip, the architecture is highly scalable so that one to several closely-coupled processors may be formed in a cache-based coherent architecture and resident on the same die to process multiple threads of execution. Thus, in processor <b>100</b>, a limitation on the number of processors formed on a single die arises from capacity constraints of integrated circuit technology rather than from architectural constraints relating to the interactions and interconnections between processors.</p>\n<p num=\"p-0024\">Referring to <figref idrefs=\"DRAWINGS\">FIG. 1B</figref>, a schematic block diagram shows the core of processor <b>100</b>. Media processing units <b>110</b> and <b>112</b> each include an instruction cache <b>210</b>, an instruction aligner <b>212</b>, an instruction buffer <b>214</b>, a split register file <b>216</b>, a plurality of execution units, and a load/store unit <b>218</b>. In illustrative processor <b>100</b>, media processing units <b>110</b> and <b>112</b> use a plurality of execution units for executing instructions. The execution units for media processing units <b>110</b> and <b>112</b> include three media functional units (MFU) <b>222</b> and one general functional unit (GFU) <b>220</b>. The media functional units <b>222</b> are single-instruction-multiple-data (SIMD) media functional units. Each media functional unit <b>222</b> is capable of processing parallel 16-bit components, in addition to 32-bit operands. Various parallel 16-bit operations supply the single-instruction-multiple-data capability for processor <b>100</b> including add, multiply-add, shift, compare, and the like. Media functional units <b>222</b> operate in combination as tightly-coupled digital signal processors (DSPs). Each media functional unit <b>222</b> has a separate and individual sub-instruction stream, but all three media functional units <b>222</b> execute synchronously so that the subinstructions progress lock-step through pipeline stages.</p>\n<p num=\"p-0025\">General functional unit <b>220</b> is a RISC processor capable of executing arithmetic logic unit (ALU) operations, loads and stores, branches, and various specialized and esoteric functions such as parallel power operations, reciprocal squareroot operations, and many others. General functional unit <b>220</b> supports less common parallel operations such as the parallel reciprocal square root instruction.</p>\n<p num=\"p-0026\">Each media processing unit <b>110</b> and <b>112</b> includes a split register file <b>216</b>, which forms a single logical register file including 256 thirty-two bit registers. Split register file <b>216</b> is split into a plurality of register file segments <b>214</b> to form a multi-ported structure that is replicated to reduce the integrated circuit die area and to reduce access time.</p>\n<p num=\"p-0027\">Media processing units <b>110</b> and <b>112</b> are highly structured computation blocks that execute software-scheduled data computation operations with fixed, deterministic and relatively short instruction latencies, operational characteristics yielding simplification in both function and cycle time. The operational characteristics support multiple instruction issue through a pragmatic very large instruction word (VLIW) approach. A VLIW instruction word always includes one instruction that executes in general functional unit (GFU) <b>220</b> and from zero to three instructions that execute in media functional units (MFU) <b>222</b>. An MFU instruction field within the VLIW instruction word includes an operation code (opcode) field, two or three source register (or immediate) fields, and one destination register field.</p>\n<p num=\"p-0028\">Instructions are executed in-order in processor <b>100</b> but loads can finish out-of-order with respect to other instructions and with respect to other loads, allowing loads to be moved up in the instruction stream so that data can be streamed from main memory.</p>\n<p num=\"p-0029\">For example, during processing of triangles, multiple vertices are operated upon in parallel so that the utilization rate of resources is high, achieving effective spatial software pipelining. Thus operations are overlapped in time by operating on several vertices simultaneously, rather than overlapping several loop iterations in time. For other types of applications with high instruction level parallelism, high trip count loops are software-pipelined so that most media functional units <b>222</b> are fully utilized.</p>\n<p num=\"p-0030\">Processor <b>100</b> is further described in co-pending application Ser. No. 09/204,480, entitled \u201cA Multiple-Thread Processor for Threaded Software Applications\u201d by Marc Tremblay and William Joy, filed on Dec. 3, 1998, which is herein incorporated by reference in its entirety.</p>\n<p num=\"p-0031\">The structure of a register file of the processor of <figref idrefs=\"DRAWINGS\">FIG. 1B</figref> is illustrated in <figref idrefs=\"DRAWINGS\">FIG. 2A</figref>. The register file is made up of an arbitrary number of registers R<b>0</b>, R<b>1</b>, R<b>2</b> . . . Rn. Each of registers R<b>0</b>, R<b>1</b>, R<b>2</b> . . . Rn, in turn has an arbitrary number of bits, as shown in <figref idrefs=\"DRAWINGS\">FIG. 2B</figref>. In one embodiment, the number of bits in each of registers R<b>0</b>, R<b>1</b>, R<b>2</b> . . . Rn is 32. However, those skilled in the art realize that the principles of the present invention can be applied to an arbitrary number of registers each having an arbitrary number of bits. Accordingly, the present invention is not limited to any particular number of registers or bits per register.</p>\n<p num=\"p-0032\"><figref idrefs=\"DRAWINGS\">FIG. 3A</figref> illustrates four instruction formats for four-operand instructions supported by the processor of <figref idrefs=\"DRAWINGS\">FIG. 1B</figref>. Each instruction format has an 8-bit opcode and four 8-bit operands. The first of the operands is a reference to a destination register (RD) for the instruction. The second operand, in turn, is a reference to a first source register for the instruction (RS<b>1</b>). Finally, the third and fourth operands can be references to a second (RS<b>2</b>) and a third source register (RS<b>3</b>), an immediate value to be used in the instruction or any combination thereof.</p>\n<p num=\"p-0033\"><figref idrefs=\"DRAWINGS\">FIG. 3B</figref> illustrates an instruction format for a clip-testing instruction (clip) supported by the processor of <figref idrefs=\"DRAWINGS\">FIG. 1</figref>, in accordance to the present invention. All operands are references to registers in the register file of the processor, as shown in <figref idrefs=\"DRAWINGS\">FIG. 4</figref>. The RD operand represents a clip mask representing whether vertices of a triangle fall outside a range of homogeneous coordinates in the eye space of an image to be clipped. The RS<b>1</b> operand represents the coefficient defining the homogenous eye space. The RS<b>2</b> operand represents the x, y and z values of the vertex examined by the clip-testing instruction. The RS<b>3</b> operand represents the value of the clip mask prior to the execution of the clip-testing instruction.</p>\n<p num=\"p-0034\">In <figref idrefs=\"DRAWINGS\">FIG. 4</figref>, each of the operands of the clip-testing instruction refers to an arbitrary register of the register file of <figref idrefs=\"DRAWINGS\">FIG. 2A</figref> in which the represented value is stored. For example, the operand RD contains a reference to the R<b>2</b> register, the operand RS<b>1</b> contains a reference to the R<b>3</b> register, the operand RS<b>2</b> contains a reference to the R<b>5</b> register and the operand RS<b>3</b> contains a reference to the R<b>7</b> register.</p>\n<p num=\"p-0035\"><figref idrefs=\"DRAWINGS\">FIG. 5</figref> is a block diagram of one implementation of the circuitry within MFUs <b>222</b> of the processor of <figref idrefs=\"DRAWINGS\">FIG. 1B</figref> for performing the clip-testing operation. The clip-testing operation compares a value stored in register RS<b>1</b> to the value stored in register RS<b>2</b> and to the negative of the value stored in RS<b>2</b>. The values in RS<b>1</b> and RS<b>2</b> are IEEE single precision floating point values. Additionally, the value stored in register RS<b>3</b> is shifted left by two bits. The shifted bits are then copied into register RD and two bits representing the results of the comparisons are inserted in the two least significant bits (LSBs) of the value stored in register RD. Thus the value that is stored in register RD represents a bit mask indicating which vertices of a triangle fall outside an homogeneous eye space defined by the coefficient stored in RS<b>1</b>.</p>\n<p num=\"p-0036\">In the implementation shown in <figref idrefs=\"DRAWINGS\">FIG. 5</figref>, when executing the clip-testing instruction, the processor routes the values stored in registers RS<b>1</b> and RS<b>2</b> to respective input ports of comparator <b>510</b>. The value stored in register RS<b>1</b> is also routed to an input port of comparator <b>530</b>. The most significant bit (MSB) of the value stored in register RS<b>2</b> is routed to an input line of inverter <b>520</b>. A value on an output line of inverter <b>520</b>, together with the 31 LSBs of the value stored in register RS<b>2</b>, is then routed to the other input port of comparator <b>530</b>.</p>\n<p num=\"p-0037\">More specifically, when the value stored in register RS<b>1</b> is less than the value stored in register RS<b>2</b>, then a \u201c1\u201d is provided to the second least significant bit of register RD. When the value stored in register RS<b>1</b> is greater than or equal to the value stored in register RS<b>2</b>, then a \u201c0\u201d is provided to the second least significant bit of register RD. Also, when the value stored in register RS<b>1</b> is less than the negative of the value stored in register RS<b>2</b>, then a \u201c1\u201d is provided to the least significant bit of register RD. When the value stored in register RS<b>1</b> is greater than or equal to the negative of the value stored in RS<b>2</b>, then a \u201c0\u201d is provided to the least significant bit of register RD.</p>\n<p num=\"p-0038\">The 30 LSBs of the value stored in register RS<b>3</b> are written into the 30 MSBs of register RD, effectively performing a two bit logical shift left of the value stored in register RS<b>3</b>. The values on respective output ports of comparators <b>510</b> and <b>530</b> are then written into the 2 LSBs of the register RD. Accordingly, the value that is stored in register RD represents a clip mask indicating whether a vertex of a triangle falls outside an homogenous eye space defined by the value stored in register RS<b>1</b>.</p>\n<p num=\"p-0039\"><figref idrefs=\"DRAWINGS\">FIG. 6</figref> is a block diagram of an alternative implementation of the circuitry within MFUs <b>222</b> of the processor of <figref idrefs=\"DRAWINGS\">FIG. 1B</figref> for performing the clip-testing instruction. In the implementation of <figref idrefs=\"DRAWINGS\">FIG. 6</figref>, the absolute values (i.e., the 31 LSBs) of the values stored in registers RS<b>1</b> and RS<b>2</b> are routed to respective input ports of comparator <b>510</b>. A value on an output line of comparator <b>510</b> is routed to respective control lines of multiplexers <b>610</b> and <b>620</b>. The sign bits (i.e., the MSBs) of the values stored in registers RS<b>1</b> and RS<b>2</b> are routed to respective input lines of multiplexer <b>620</b>. In addition, the MSB of the value stored in register RS<b>2</b> is also routed to an input line of inverter <b>520</b>. An output line of inverter <b>520</b> and the MSB of the value stored in register RS<b>1</b> are, in turn, routed to respective input lines of multiplexer <b>610</b>.</p>\n<p num=\"p-0040\">As a result, the value on the output line of multiplexer <b>610</b> effectively represents the value of the comparison rs1&lt;rs2, as illustrated in Table 1 below.</p>\n<p num=\"p-0041\">\n<tables id=\"TABLE-US-00001\" num=\"00001\">\n<table colsep=\"0\" frame=\"none\" rowsep=\"0\">\n<tgroup align=\"left\" cols=\"5\" colsep=\"0\" rowsep=\"0\">\n<colspec align=\"left\" colname=\"offset\" colwidth=\"14pt\"></colspec>\n<colspec align=\"center\" colname=\"1\" colwidth=\"35pt\"></colspec>\n<colspec align=\"center\" colname=\"2\" colwidth=\"63pt\"></colspec>\n<colspec align=\"center\" colname=\"3\" colwidth=\"42pt\"></colspec>\n<colspec align=\"center\" colname=\"4\" colwidth=\"63pt\"></colspec>\n<thead>\n<row>\n<entry></entry>\n<entry nameend=\"4\" namest=\"offset\" rowsep=\"1\">TABLE 1</entry>\n</row>\n<row>\n<entry></entry>\n<entry align=\"center\" nameend=\"4\" namest=\"offset\" rowsep=\"1\"></entry>\n</row>\n<row>\n<entry></entry>\n<entry>Sign RS1</entry>\n<entry>Sign RS2</entry>\n<entry>|rs1| &lt; |rs2|</entry>\n<entry>rs1 &lt; rs2</entry>\n</row>\n<row>\n<entry></entry>\n<entry align=\"center\" nameend=\"4\" namest=\"offset\" rowsep=\"1\"></entry>\n</row>\n</thead>\n<tbody valign=\"top\">\n<row>\n<entry></entry>\n<entry>1</entry>\n<entry>1</entry>\n<entry>1</entry>\n<entry>0</entry>\n</row>\n<row>\n<entry></entry>\n<entry>1</entry>\n<entry>0</entry>\n<entry>1</entry>\n<entry>1</entry>\n</row>\n<row>\n<entry></entry>\n<entry>0</entry>\n<entry>1</entry>\n<entry>1</entry>\n<entry>0</entry>\n</row>\n<row>\n<entry></entry>\n<entry>0</entry>\n<entry>0</entry>\n<entry>1</entry>\n<entry>1</entry>\n</row>\n<row>\n<entry></entry>\n<entry>1</entry>\n<entry>1</entry>\n<entry>0</entry>\n<entry>1</entry>\n</row>\n<row>\n<entry></entry>\n<entry>1</entry>\n<entry>0</entry>\n<entry>0</entry>\n<entry>1</entry>\n</row>\n<row>\n<entry></entry>\n<entry>0</entry>\n<entry>1</entry>\n<entry>0</entry>\n<entry>0</entry>\n</row>\n<row>\n<entry></entry>\n<entry>0</entry>\n<entry>0</entry>\n<entry>0</entry>\n<entry>0</entry>\n</row>\n<row>\n<entry></entry>\n<entry align=\"center\" nameend=\"4\" namest=\"offset\" rowsep=\"1\"></entry>\n</row>\n</tbody>\n</tgroup>\n</table>\n</tables>\n</p>\n<p num=\"p-0042\">Similarly, the value on the output line of multiplexer <b>620</b> effectively represents the value of the comparison rs1&lt;\u2212rs2, as illustrated in Table 2 below.</p>\n<p num=\"p-0043\">\n<tables id=\"TABLE-US-00002\" num=\"00002\">\n<table colsep=\"0\" frame=\"none\" rowsep=\"0\">\n<tgroup align=\"left\" cols=\"5\" colsep=\"0\" rowsep=\"0\">\n<colspec align=\"left\" colname=\"offset\" colwidth=\"14pt\"></colspec>\n<colspec align=\"center\" colname=\"1\" colwidth=\"35pt\"></colspec>\n<colspec align=\"center\" colname=\"2\" colwidth=\"56pt\"></colspec>\n<colspec align=\"center\" colname=\"3\" colwidth=\"42pt\"></colspec>\n<colspec align=\"center\" colname=\"4\" colwidth=\"70pt\"></colspec>\n<thead>\n<row>\n<entry></entry>\n<entry nameend=\"4\" namest=\"offset\" rowsep=\"1\">TABLE 2</entry>\n</row>\n<row>\n<entry></entry>\n<entry align=\"center\" nameend=\"4\" namest=\"offset\" rowsep=\"1\"></entry>\n</row>\n<row>\n<entry></entry>\n<entry>Sign RS1</entry>\n<entry>sign RS2</entry>\n<entry>|rs1| &lt; |rs2|</entry>\n<entry>rs1 &lt; \u2212 rs2</entry>\n</row>\n<row>\n<entry></entry>\n<entry align=\"center\" nameend=\"4\" namest=\"offset\" rowsep=\"1\"></entry>\n</row>\n</thead>\n<tbody valign=\"top\">\n<row>\n<entry></entry>\n<entry>1</entry>\n<entry>1</entry>\n<entry>1</entry>\n<entry>1</entry>\n</row>\n<row>\n<entry></entry>\n<entry>1</entry>\n<entry>0</entry>\n<entry>1</entry>\n<entry>0</entry>\n</row>\n<row>\n<entry></entry>\n<entry>0</entry>\n<entry>1</entry>\n<entry>1</entry>\n<entry>1</entry>\n</row>\n<row>\n<entry></entry>\n<entry>0</entry>\n<entry>0</entry>\n<entry>1</entry>\n<entry>0</entry>\n</row>\n<row>\n<entry></entry>\n<entry>1</entry>\n<entry>1</entry>\n<entry>0</entry>\n<entry>1</entry>\n</row>\n<row>\n<entry></entry>\n<entry>1</entry>\n<entry>0</entry>\n<entry>0</entry>\n<entry>1</entry>\n</row>\n<row>\n<entry></entry>\n<entry>0</entry>\n<entry>1</entry>\n<entry>0</entry>\n<entry>0</entry>\n</row>\n<row>\n<entry></entry>\n<entry>0</entry>\n<entry>0</entry>\n<entry>0</entry>\n<entry>0</entry>\n</row>\n<row>\n<entry></entry>\n<entry align=\"center\" nameend=\"4\" namest=\"offset\" rowsep=\"1\"></entry>\n</row>\n</tbody>\n</tgroup>\n</table>\n</tables>\n</p>\n<p num=\"p-0044\">The 30 LSBs of the value stored in register RS<b>3</b> are written into the 30 MSBs of register RD, effectively performing a two bit logical shift left of the value stored in register RS<b>3</b>. The values on respective output lines of multiplexers <b>610</b> and <b>620</b> are routed to respective input ports of multiplexers <b>650</b> and <b>660</b>. A logical 0 value is provided on the remaining input ports of multiplexers <b>650</b> and <b>660</b>. Respective control ports of multiplexers <b>650</b> and <b>660</b> are, in turn, driven by output lines of gates <b>630</b> and <b>640</b>. The values stored in registers RS<b>1</b> and RS<b>2</b> are provided to respective input ports of comparator <b>670</b>. The input lines of gates <b>630</b> are connected to the output port of comparator <b>670</b> and the sign bits of the values stored in registers RS<b>1</b> and RS<b>2</b>. The input lines of gates <b>640</b> are connected to the output port of comparator <b>670</b>, the sign bit of the value stored in register RS<b>1</b> and the complement of the sign bit (generated by inverter <b>635</b>) of the value stored in register RS<b>2</b>. The output lines of gates <b>630</b> and <b>640</b> are connected to respective control ports of multiplexers <b>650</b> and <b>660</b>. Finally, the values on respective output ports of multiplexers <b>650</b> and <b>660</b> are written in the 2 LSBs of register RD.</p>\n<p num=\"p-0045\">While a three source register implementation is described, those skilled in the art realize that the principles of the present invention can be applied to instructions having an arbitrary number of source and destination registers. Accordingly, the present invention is not limited to any particular number of source or destination registers.</p>\n<p num=\"p-0046\">Embodiments described above illustrate but do not limit the invention. In particular, the invention is not limited by any number of registers specified by the instructions. In addition, the invention is not limited to any particular hardware implementation. Those skilled in the art realize that alternative hardware implementation can be employed in lieu of the one described herein in accordance to the principles of the present invention. Other embodiments and variations are within the scope of the invention, as defined by the following claims.</p>\n<?DETDESC description=\"Detailed Description\" end=\"tail\"?>\n</description>"}], "inventors": [{"first_name": "Jeffrey Meng Wah", "last_name": "Chan", "name": ""}, {"first_name": "Michael F.", "last_name": "Deering", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "SUN MICROSYSTEMS, INC."}, {"first_name": "", "last_name": "Oracle America, Inc.", "name": ""}, {"first_name": "", "last_name": "SUN MICROSYSTEMS, INC.", "name": ""}, {"first_name": "", "last_name": "SUN MICROSYSTEMS, INC.", "name": ""}], "ipc_classes": [], "locarno_classes": [], "ipcr_classes": [{"label": "G09G   5/30        20060101AFI20060509BHUS"}, {"label": "G06F   9/30        20060101A I20051008RMEP"}, {"label": "G06F   9/38        20060101A I20051008RMEP"}], "national_classes": [{"primary": true, "label": "345620"}, {"primary": false, "label": "712E09026"}, {"primary": false, "label": "712E09027"}, {"primary": false, "label": "712E09069"}, {"primary": false, "label": "345590"}, {"primary": false, "label": "712E09053"}], "ecla_classes": [{"label": "G06F   9/38D1"}, {"label": "G06F   9/30R5"}, {"label": "G06F   9/38D"}, {"label": "G06F   9/30R5C"}, {"label": "G06F   9/38S"}, {"label": "G06F   9/30A1A"}, {"label": "G06F   9/38E4"}], "cpc_classes": [{"label": "G06F   9/30123"}, {"label": "G06F   9/3012"}, {"label": "G06F   9/3001"}, {"label": "G06F   9/3824"}, {"label": "G06F   9/3851"}, {"label": "G06F   9/3824"}, {"label": "G06F   9/3851"}, {"label": "G06F   9/3877"}, {"label": "G06F   9/3826"}, {"label": "G06F   9/3877"}, {"label": "G06F   9/3826"}, {"label": "G06F   9/30123"}, {"label": "G06F   9/3001"}, {"label": "G06F   9/3012"}], "f_term_classes": [], "legal_status": "Expired - Lifetime", "priority_date": "1998-12-03", "application_date": "2000-06-06", "family_members": [{"ucid": "US-6718457-B2", "titles": [{"lang": "EN", "text": "Multiple-thread processor for threaded software applications"}]}, {"ucid": "US-20010042188-A1", "titles": [{"lang": "EN", "text": "MULTIPLE-THREAD PROCESSOR FOR THREADED SOFTWARE APPLICATIONS"}]}, {"ucid": "WO-2000033185-A2", "titles": [{"lang": "EN", "text": "A MULTIPLE-THREAD PROCESSOR FOR THREADED SOFTWARE APPLICATIONS"}, {"lang": "FR", "text": "PROCESSEUR MULTIVOIE POUR APPLICATIONS ECRITES EN FONCTION D'UN BALISAGE DE MULTIVOIE"}]}, {"ucid": "US-20060282650-A1", "titles": [{"lang": "EN", "text": "EFFICIENT CLIP-TESTING"}]}, {"ucid": "DE-69909829-D1", "titles": [{"lang": "DE", "text": "VIELFADENPROZESSOR F\u00dcR FADEN-SOFTWAREANWENDUNGEN"}, {"lang": "EN", "text": "MULTIPLE PROCESSOR FOR THREAD SOFTWARE APPLICATIONS"}]}, {"ucid": "EP-1137984-B1", "titles": [{"lang": "FR", "text": "PROCESSEUR MULTIVOIE POUR APPLICATIONS ECRITES EN FONCTION D'UN BALISAGE DE MULTIVOIE"}, {"lang": "EN", "text": "A MULTIPLE-THREAD PROCESSOR FOR THREADED SOFTWARE APPLICATIONS"}, {"lang": "DE", "text": "VIELFADENPROZESSOR F\u00dcR FADEN-SOFTWAREANWENDUNGEN"}]}, {"ucid": "DE-69909829-T2", "titles": [{"lang": "DE", "text": "VIELFADENPROZESSOR F\u00dcR FADEN-SOFTWAREANWENDUNGEN"}, {"lang": "EN", "text": "MULTIPLE PROCESSOR FOR THREAD SOFTWARE APPLICATIONS"}]}, {"ucid": "EP-1137984-A2", "titles": [{"lang": "FR", "text": "PROCESSEUR MULTIVOIE POUR APPLICATIONS ECRITES EN FONCTION D'UN BALISAGE DE MULTIVOIE"}, {"lang": "EN", "text": "A MULTIPLE-THREAD PROCESSOR FOR THREADED SOFTWARE APPLICATIONS"}, {"lang": "DE", "text": "VIELFADENPROZESSOR F\u00dcR FADEN-SOFTWAREANWENDUNGEN"}]}, {"ucid": "WO-2000033185-A3", "titles": [{"lang": "EN", "text": "A MULTIPLE-THREAD PROCESSOR FOR THREADED SOFTWARE APPLICATIONS"}, {"lang": "FR", "text": "PROCESSEUR MULTIVOIE POUR APPLICATIONS ECRITES EN FONCTION D'UN BALISAGE DE MULTIVOIE"}]}, {"ucid": "US-7042466-B1", "titles": [{"lang": "EN", "text": "Efficient clip-testing in graphics acceleration"}]}, {"ucid": "US-20050010743-A1", "titles": [{"lang": "EN", "text": "Multiple-thread processor for threaded software applications"}]}]}