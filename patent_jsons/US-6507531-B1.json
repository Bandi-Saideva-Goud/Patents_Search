{"patent_number": "US-6507531-B1", "publication_id": 73281354, "family_id": 24147383, "publication_date": "2003-01-14", "titles": [{"lang": "EN", "text": "Cache column multiplexing using redundant form addresses"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA50435517\"><p>A method and apparatus uses possible wordline subsequence identifiers to multiplex columns for addresses received in redundant form, including addresses received from a bypass circuit. A cache wordline decoder uses carry-nonpropagative pre-decode circuitry to identify possible subsequences from redundant addresses. Identified subsequences are combined to identify wordline sequences and to activate corresponding wordline enable signals to access data stored in cache memory. A wordline may correspond to storage locations for multiple addresses. Identified possible subsequences are used to directly multiplex cache columns and the columns are organized so as to guarantee mutual exclusivity.</p></abstract>"}, {"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"docdb\" mxw-id=\"PA11460395\" source=\"national office\"><p>A method and apparatus uses possible wordline subsequence identifiers to multiplex columns for addresses received in redundant form, including addresses received from a bypass circuit. A cache wordline decoder uses carry-nonpropagative pre-decode circuitry to identify possible subsequences from redundant addresses. Identified subsequences are combined to identify wordline sequences and to activate corresponding wordline enable signals to access data stored in cache memory. A wordline may correspond to storage locations for multiple addresses. Identified possible subsequences are used to directly multiplex cache columns and the columns are organized so as to guarantee mutual exclusivity.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00001\" num=\"1\"><claim-text>1. An apparatus comprising:</claim-text><claim-text>a plurality of storage locations associated with a plurality of bitlines; </claim-text><claim-text>a pre-decoder to receive an address in redundant form and to identify one or more possible subsequences of bit values corresponding to each of a plurality of digit positions in the redundant address; and </claim-text><claim-text>a first column multiplexer having a first bitline output, the first column multiplexer to receive a first plurality of data values on a first portion of the plurality of bitlines, and to select a first bitline having a first data value in response to a first identifier of the one or more possible subsequences of bit values identified. </claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00002\" num=\"2\"><claim-text>2. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00001\">claim 1</claim-ref> further comprising:</claim-text><claim-text>a wordline decoder, from one or more of the identified possible subsequences of bit values, to identify a wordline and to access a first portion of the plurality of storage locations associated with the first portion of the plurality of bitlines. </claim-text></claim>"}, {"num": 3, "parent": 2, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00003\" num=\"3\"><claim-text>3. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00002\">claim 2</claim-ref> wherein the first identifier of the one or more possible subsequences of bit values identified is excluded from said one or more of the identified possible subsequences of bit values used to identify the wordline.</claim-text></claim>"}, {"num": 4, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00004\" num=\"4\"><claim-text>4. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00001\">claim 1</claim-ref> wherein the address in redundant form is in a carry-sum redundant form.</claim-text></claim>"}, {"num": 5, "parent": 4, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00005\" num=\"5\"><claim-text>5. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00004\">claim 4</claim-ref> wherein the one or more possible subsequences of bit values identified include a subsequence of length two or more bits.</claim-text></claim>"}, {"num": 6, "parent": 5, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00006\" num=\"6\"><claim-text>6. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00005\">claim 5</claim-ref> wherein the one or more possible subsequences of bit values are identified according one or more of a plurality of logical relations equivalent to or including:</claim-text><claim-text><maths><formula-text><i>R</i><sub>i</sub><sup>11</sup>=(<i>S</i><sub>i\u22121 </sub>AND <i>C</i><sub>i\u22122</sub>) <i>X</i>OR (<i>S</i><sub>i </sub><i>X</i>OR <i>C</i><sub>i\u22121</sub>), </formula-text></maths></claim-text><claim-text><maths><formula-text><i>R</i><sub>i</sub><sup>01</sup>=(<i>S</i><sub>i\u22121 </sub>AND <i>C</i><sub>i\u22122</sub>) <i>XN</i>OR (<i>S</i><sub>i </sub><i>X</i>OR <i>C</i><sub>i\u22121</sub>), </formula-text></maths></claim-text><claim-text><maths><formula-text><i>R</i><sub>i</sub><sup>10</sup>=(<i>S</i><sub>i\u22121 </sub>OR <i>C</i><sub>i\u22122</sub>) <i>X</i>OR (<i>S</i><sub>i </sub><i>X</i>OR <i>C</i><sub>i\u22121</sub>), </formula-text></maths></claim-text><claim-text>and</claim-text><claim-text><maths><formula-text><i>R</i><sub>i</sub><sup>00</sup>=(<i>S</i><sub>i\u22121 </sub>OR <i>C</i><sub>i\u22122</sub>) <i>XN</i>OR (<i>S</i><sub>i </sub><i>X</i>OR <i>C</i><sub>i\u22121</sub>). </formula-text></maths></claim-text></claim>"}, {"num": 7, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00007\" num=\"7\"><claim-text>7. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00001\">claim 1</claim-ref> wherein the address in redundant form is in a sign-digit redundant form.</claim-text></claim>"}, {"num": 8, "parent": 7, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00008\" num=\"8\"><claim-text>8. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00007\">claim 7</claim-ref> wherein the one or more possible subsequences of bit values identified include a subsequence of length two or more bits.</claim-text></claim>"}, {"num": 9, "parent": 8, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00009\" num=\"9\"><claim-text>9. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00008\">claim 8</claim-ref> wherein the one or more possible subsequences of bit values are identified according to one or more of a plurality of logical relations equivalent to or including:</claim-text><claim-text><maths><formula-text><i>R</i><sub>i</sub><sup>11 </sup>=(<i>X</i><sub>mi\u22121 </sub><i>N</i>OR (<i>X</i><sub>mi\u22122 </sub><i>N</i>AND NOT <i>X</i><sub>si\u22122</sub>)) <i>X</i>OR (<i>X</i><sub>mi </sub><i>X</i>OR (<i>X</i><sub>mi\u22121 </sub><i>N</i>AND NOT <i>X</i><sub>si\u22121</sub>)), </formula-text></maths></claim-text><claim-text><maths><formula-text><i>R</i><sub>i</sub><sup>01 </sup>=NOT (<i>X</i><sub>mi\u22121 </sub><i>N</i>OR (<i>X</i><sub>mi\u22122 </sub><i>N</i>AND NOT <i>X</i><sub>si\u22122</sub>)) <i>X</i>OR (<i>X</i><sub>mi </sub><i>X</i>OR (<i>X</i><sub>mi\u22121 </sub><i>N</i>AND NOT <i>X</i><sub>si\u22121</sub>)), </formula-text></maths></claim-text><claim-text><maths><formula-text><i>R</i><sub>i</sub><sup>10 </sup>=(<i>X</i><sub>mi\u22121 </sub><i>N</i>AND (<i>X</i><sub>mi\u22122 </sub><i>N</i>AND NOT <i>X</i><sub>si\u22122</sub>)) <i>X</i>OR (<i>X</i><sub>mi </sub><i>X</i>OR (<i>X</i><sub>mi\u22121 </sub><i>N</i>AND NOT <i>X</i><sub>si\u22121</sub>)), </formula-text></maths></claim-text><claim-text>and</claim-text><claim-text><maths><formula-text><i>R</i><sub>i</sub><sup>00 </sup>=NOT (<i>X</i><sub>mi\u22121 </sub><i>N</i>AND (<i>X</i><sub>mi\u22122 </sub><i>N</i>AND NOT <i>X</i><sub>si\u22122</sub>)) <i>X</i>OR (<i>X</i><sub>mi </sub><i>X</i>OR (<i>X</i><sub>mi\u22121 </sub><i>N</i>AND NOT <i>X</i><sub>si\u22121</sub>)). </formula-text></maths></claim-text></claim>"}, {"num": 10, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00010\" num=\"10\"><claim-text>10. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00001\">claim 1</claim-ref> wherein the first identifier of the one or more possible subsequences of bit values identified corresponds to an identified possible subsequence having a length of two or more bits.</claim-text></claim>"}, {"num": 11, "parent": 10, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00011\" num=\"11\"><claim-text>11. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00010\">claim 10</claim-ref> wherein the first column multiplexer is coupled with the pre-decoder to receive a second identifier of the one or more possible subsequences of bit values identified, which is mutually exclusive of the first identifier of the one or more possible subsequences of bit values identified, and which indicates a bit value that is the same as a corresponding bit value indicated by the first identifier, the indicated bit value occurring in a least significant bit position of the possible subsequence identified by the second identifier.</claim-text></claim>"}, {"num": 12, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00012\" num=\"12\"><claim-text>12. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00001\">claim 1</claim-ref> further comprising:</claim-text><claim-text>a second column multiplexer having a second bitline output, to receive a second plurality of data values on a second portion of the plurality of bitlines, and to select a second bitline having a second data value in response to a second identifier of the one or more possible subsequences of bit values identified. </claim-text></claim>"}, {"num": 13, "parent": 12, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00013\" num=\"13\"><claim-text>13. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00012\">claim 12</claim-ref> wherein the second column multiplexer is coupled to receive data from the first bitline output of the first column multiplexer.</claim-text></claim>"}, {"num": 14, "parent": 13, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00014\" num=\"14\"><claim-text>14. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00013\">claim 13</claim-ref> wherein the second identifier of the one or more possible subsequences of bit values identified indicates a bit value occurring in a bit position that does not correspond to a bit position in the possible subsequence identified by the first identifier.</claim-text></claim>"}, {"num": 15, "parent": 12, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00015\" num=\"15\"><claim-text>15. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00012\">claim 12</claim-ref> further comprising:</claim-text><claim-text>a common bitline output coupled with the first bitline output to receive the first data value from the first column multiplexer and coupled with the second bitline output to receive the second data value from the second column multiplexer. </claim-text></claim>"}, {"num": 16, "parent": 15, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00016\" num=\"16\"><claim-text>16. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00015\">claim 15</claim-ref> wherein the second identifier of the one or more possible subsequences of bit values identified indicates a bit value that is the same as a corresponding bit value indicated by the first identifier, the indicated bit value occurring in a most significant bit position of the possible subsequence identified by the second identifier.</claim-text></claim>"}, {"num": 17, "parent": 15, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00017\" num=\"17\"><claim-text>17. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00015\">claim 15</claim-ref> wherein the first data value and the second data value are not received as inverted signals.</claim-text></claim>"}, {"num": 18, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00018\" num=\"18\"><claim-text>18. A digital computing system comprising: a processor core; an internal cache having a first plurality of storage locations and a first plurality of corresponding bitlines including a first bitline on which to transmit a first data value;</claim-text><claim-text>a pre-decoder to receive an address in redundant form from the processor core and to identify one or more possible subsequences of bit values corresponding to each of a plurality of digit positions in the redundant address; </claim-text><claim-text>a first column multiplexer having a first bitline output, the first column multiplexer to receive a first plurality of data values on the first plurality of bitlines, and to select the first bitline in response to a first identifier of the one or more possible subsequences of bit values identified; and </claim-text><claim-text>an external cache having a second plurality of storage locations including a storage location to store a second data value, the external cache coupled with the internal cache, to transmit the second data value to the internal cache. </claim-text></claim>"}, {"num": 19, "parent": 18, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00019\" num=\"19\"><claim-text>19. The digital computing system recited in <claim-ref idref=\"US-6507531-B1-CLM-00018\">claim 18</claim-ref> further comprising:</claim-text><claim-text>a wordline decoder to identify a wordline from one or more of the identified possible subsequences of bit values and to access the first plurality of storage locations of the internal cache. </claim-text></claim>"}, {"num": 20, "parent": 19, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00020\" num=\"20\"><claim-text>20. The digital computing system recited in <claim-ref idref=\"US-6507531-B1-CLM-00019\">claim 19</claim-ref> wherein the first identifier of the one or more possible subsequences of bit values identified is excluded from said one or more of the identified possible subsequences of bit values used to identify a wordline.</claim-text></claim>"}, {"num": 21, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00021\" num=\"21\"><claim-text>21. A method comprising:</claim-text><claim-text>receiving an address in redundant form; </claim-text><claim-text>identifying a possible subsequence of bit values corresponding to the address received; </claim-text><claim-text>activating one or more possible subsequence indicators corresponding to the possible subsequence of bit values identified; </claim-text><claim-text>using a first possible subsequence indicator of the one or more possible subsequence indicators activated to select from a plurality of data sources a first data source from which to receive a first data value; </claim-text><claim-text>transmitting a data output value in response to the first data value received from the selected first data source. </claim-text></claim>"}, {"num": 22, "parent": 21, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00022\" num=\"22\"><claim-text>22. The method recited in <claim-ref idref=\"US-6507531-B1-CLM-00021\">claim 21</claim-ref> further comprising:</claim-text><claim-text>activating a plurality of possible subsequence indicators associated with a plurality of digit positions in the address received; </claim-text><claim-text>combining the plurality of possible subsequence indicators activated to identify a wordline, the combined plurality of possible subsequence indicators excluding the first possible subsequence indicator; </claim-text><claim-text>in accordance with the identified wordline, activating the plurality of data sources to supply data values. </claim-text></claim>"}, {"num": 23, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00023\" num=\"23\"><claim-text>23. A cache memory system comprising:</claim-text><claim-text>a plurality of lines and columns for storing copies of memory storage locations having corresponding addresses; </claim-text><claim-text>means for decoding a first portion of an address to access a line of the cache memory system responsive to an access request that includes an address represented in a redundant form; and </claim-text><claim-text>means for decoding a second portion of the address represented in the redundant form into one or more indicators of possible subsequences of bit values to access a column of the cache memory system. </claim-text></claim>"}, {"num": 24, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00024\" num=\"24\"><claim-text>24. An apparatus comprising:</claim-text><claim-text>a pre-decoder to receive an address in a redundant form and to identify, from the redundant form of the address, one or more possible subsequences of values for bit positions in the address; </claim-text><claim-text>a wordline decoder, responsive to one or more of the identified possible subsequences of values, to identify a wordline to enable a plurality of bitlines associated with a plurality of storage locations; and </claim-text><claim-text>a first selector coupled with the pre-decoder and identified with a first one of the one or more possible subsequences of values for bit positions in the address to select a first bitline of the plurality of enabled bitlines when the first one of the one or more possible subsequences of values for bit positions in the address is identified by the pre-decoder. </claim-text></claim>"}, {"num": 25, "parent": 24, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00025\" num=\"25\"><claim-text>25. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00024\">claim 24</claim-ref> further comprising:</claim-text><claim-text>a second selector coupled with the pre-decoder, which is mutually exclusive of the first selector, and which indicates a value for a bit position in the address that is the same as a corresponding value indicated by the first selector, the second selector to select a second bitline of the plurality of enabled bitlines when a second one of the one or more possible subsequences of values for bit positions in the redundant address is identified by the pre-decoder. </claim-text></claim>"}, {"num": 26, "parent": 25, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00026\" num=\"26\"><claim-text>26. The apparatus recited in <claim-ref idref=\"US-6507531-B1-CLM-00025\">claim 25</claim-ref> further comprising:</claim-text><claim-text>a first column multiplexer to receive data on the plurality of enabled bitlines, and coupled with the pre-decoder to output data from the first bitline responsive to the first selector and to output data from the second bitline responsive to the second selector. </claim-text></claim>"}, {"num": 27, "parent": 26, "type": "dependent", "paragraph_markup": "<claim id=\"US-6507531-B1-CLM-00027\" num=\"27\"><claim-text>27. The apparatus recited in-<claim-ref idref=\"US-6507531-B1-CLM-00026\">claim 26</claim-ref> further comprising:</claim-text><claim-text>a second column multiplexer coupled to an output of the first column multiplexer, and coupled with the pre-decoder to select the output of the first column multiplexer responsive to a third selector identified with a third one of the one or more possible subsequences of values for bit positions in the address.</claim-text></claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES53860938\"><?BRFSUM description=\"Brief Summary\" end=\"lead\"?><h4>RELATED APPLICATIONS</h4><p>Application Ser. No. 09/532,411, titled \u201cShared Cache Wordline Decoder For Redundant and Regular Addresses,\u201d filed Mar. 22, 2000, pending. Application Ser. No. 09/887,870, titled \u201cTag Design For Cache Access With Redundant Form Address,\u201d filed Jun. 22, 2001, pending.</p><h4>FIELD OF THE INVENTION</h4><p>This invention relates generally to decoders for memory, and in particular to decoders for high-speed cache memory.</p><h4>BACKGROUND OF THE INVENTION</h4><p>A cache is a fast memory for storing copies of frequently accessed data. As processors become faster, cache access time is often a dominating factor in system performance. Conflicting goals face designers of cache memory systems. Smaller caches provide faster access times, but larger caches provide higher hit ratios thereby reducing penalties associated with accessing slower memory.</p><p>Two prior art methods are shown in U. S. Pat. No. 5,555,529. One typical prior art cache is shown in FIG. 1. A wordline decoder <b>30</b> receives an address to access memory array <b>32</b>. Depending on the address, exactly one wordline, <b>60</b>, <b>61</b>, <b>62</b>, <b>63</b>, <b>64</b>, or <b>65</b> is activated. For example, if wordline <b>60</b> is activated, then memory locations <b>50</b>, <b>80</b>, <b>85</b>, and <b>90</b> will be accessed. When these memory locations are accessed, two bits of information at each memory location, <b>50</b>, <b>80</b>, <b>85</b>, and <b>90</b> will be presented on a pair of bitlines, <b>35</b>, <b>39</b>, <b>41</b>, and <b>45</b> to column multiplexers (MUXs) <b>99</b>, <b>101</b>, <b>103</b>, and <b>105</b>. This technique is known as column multiplexing. One bit from each pair will be selected by a column selector to be presented to the sense amplifiers <b>100</b>, <b>102</b>, <b>104</b>, and <b>106</b>. It should be noted that columns typically supply both true and complemented signal values for each bit stored at a memory location. Other column multiplexing schemes are in ratios of 4:1, 8:1 and 16:1, with 2:1 and 4:1 being most common. Advantages associated with column multiplexing include better area usage since memory read circuits and write circuits can be laid out using a wider pitch, and more room is provided for global routing over memory cells. Disadvantages include higher power usage and slower multiplexers for higher column multiplexing ratios.</p><p>A second prior art method is shown in FIG. <b>2</b>. In this case, wordline decoder <b>125</b> activates either wordlines associated with array <b>120</b> or wordlines associated with array <b>122</b>, but not both. If for example, wordline <b>130</b> is activated then bitline pairs <b>135</b>, <b>137</b>, <b>139</b> and <b>140</b> each supply one bit of information comprising both true and complemented signals to sense amplifiers <b>148</b>, <b>144</b>, <b>142</b>, and <b>145</b>. On the other hand, if wordline <b>150</b> is activated then bitline pairs <b>152</b>, <b>155</b>, <b>158</b> and <b>160</b> each supply one bit of information comprising both true and complemented signals to sense amplifiers <b>162</b>, <b>164</b>, <b>166</b>, and <b>168</b>. One advantage of this technique is that there is a power savings through discharging only the needed memory locations. Disadvantages include forcing a narrower pitch and greater probability of masked soft errors going undetected.</p><p>Another disadvantage with both of these prior methods involves computing large addresses. Since a current trend in processor design is to devote a substantial proportion of chip area to cache memory, much effort has been invested in improving access times for large caches. But for large addresses, the time it takes an adder to propagate a carry signal in computing the address is a significant factor.</p><p>In one prior art method, Cortadella et al [\u201cEvaluation of A+B=K Conditions Without Carry Propagation,\u201d IEEE Transactions on Computers, vol. 41, pp. 1484-1488, November, 1992] show that an equality test does not require carry propagation. One representation of a sum A+B, which is suitable for use in a carry nonpropagative equality test, is known as half-adder or carry-sum form. The carry-sum representation uses a carry bit, C<sub>i</sub>, and a sum bit, S<sub>i</sub>, to represent a binary digit of a number in the ith digit position. In carry-sum form each number may have multiple valid representations. In a system of numbers, where each number is assigned multiple binary representations, the numbers are said to be in redundant form.</p><p>The carry-sum redundant form representation permits numbers to be added together while eliminating the need to propagate carry signals along the length of the address.</p><p>Another example, of a redundant form is called sign-digit. Each binary digit is represented as a sign bit, X<sub>si</sub>, and a magnitude bit, X<sub>mi</sub>, and can take on values of 1, 0, and \u22121.</p><p>Addresses can be calculated in carry-save or sign-digit redundant forms faster than through traditional adders, and wordline comparisons can be performed to access data without requiring carry propagation. Yet, techniques for cache column multiplexing based on specific address-bit values must be computed from redundant representations that are not unique. Therefore, computing column selectors may become a critical path in accessing cache.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4><p>The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings.</p><p>FIG. 1 shows a prior art odd-even cache column multiplexing technique.</p><p>FIG. 2 shows a prior art odd-even cache column segregation technique.</p><p>FIG. 3 shows a cache wordline decoder for decoding addresses in a carry-sum redundant form.</p><p>FIG. 4 shows one embodiment of a pre-decoder component circuit that accepts addresses in a carry-sum redundant form.</p><p>FIG. 5 shows one embodiment of a decoder component circuit that combines two-bit subsequences into three-bit subsequences.</p><p>FIG. 6 details one embodiment of a cache wordline decoder for decoding four-digit addresses in a carry-sum redundant form.</p><p>FIG. 7<i>a </i>shows one embodiment of circuit that accepts addresses in a sign-digit redundant form and provides addresses in a negated carry-sum redundant form.</p><p>FIG. 7<i>b </i>shows one embodiment of a pre-decoder component circuit that accepts addresses in a sign-digit redundant form.</p><p>FIG. 8 shows one embodiment of a cache wordline decoder for sign-digit redundant addresses.</p><p>FIG. 9<i>a </i>shows a circuit for generating four column selectors from carry-sum redundant form addresses using a carry lookahead circuit.</p><p>FIG. 9<i>b </i>shows a half adder circuit for generating carry propagate and carry generate signals from carry-sum redundant form address digits.</p><p>FIG. 9<i>c </i>shows circuits for generating carry out signals from carry-propagate and carry generate signals.</p><p>FIG. 10 shows a truth table for generating possible subsequence indicators from carry-save redundant form address digits.</p><p>FIG. 11<i>a </i>shows a grouping of 4-bit addresses according to most significant 2-bit subsequences.</p><p>FIG. 11<i>b </i>shows a grouping of 4-bit addresses according to second most significant 2-bit subsequences.</p><p>FIG. 12 shows one embodiment of a cache column multiplexing scheme using a grouping of addresses according to possible 2-bit subsequences.</p><p>FIG. 13 details one embodiment of a cache column multiplexing scheme using a grouping of addresses according to possible 2-bit subsequences.</p><p>FIG. 14 shows one embodiment of a 2-level column multiplexing scheme using a grouping of addresses according to possible 2-bit subsequences.</p><p>FIG. 15 shows one embodiment of a digital computing system that includes a cache column multiplexing scheme using a grouping of addresses according to possible 2-bit subsequences.</p><p>FIG. 16 shows one embodiment of a method of accessing data in a cache using redundant addresses.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>DETAILED DESCRIPTION</h4><p>These and other embodiments of the present invention may be realized in accordance with the following teachings and it should be evident that various modifications and changes may be made in the following teachings without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than restrictive sense and the invention measured only in terms of the claims.</p><p>For one embodiment a cache wordline decoder, herein described, provides carry-nonpropagative pre-decode circuitry to identify possible subsequences from redundant addresses. These identified subsequences are combined to identify wordline sequences and to activate corresponding wordline enable signals. The activated wordline enable signals are used to access data stored in cache memory at corresponding storage locations. A single wordline may correspond to storage locations for multiple addresses. Identified possible subsequences are used to directly multiplex cache columns and the columns are organized so as to guarantee mutual exclusivity.</p><p>For one embodiment, a cache column multiplexing technique, herein described, provides desirable features of column multiplexing and also of column segregation, while reducing undesirable features of both. Such a technique reduces power consumption by segregating columns according to wordlines, improves area usage by permitting memory read circuits and write circuits to be laid out using a wider pitch, and provides more room for global routing over memory cells. Soft error rates are reduced by the limiting proximity of same column storage cells. Column access speed is improved through reduced multiplexer sizes.</p><p>It will be appreciated that the techniques herein disclosed could also be used to access storage locations in forms of storage other than cache, including but not limited to dynamic, static, magnetic, read-only, volatile or non-volatile memories.</p><p>One method for quickly calculating addresses in a processor is to use a carry nonpropagative arithmetic circuit such as a carry-save adder to sum addressing components, possibly including a base address and an index or a displacement. Results from a carry-save adder can be bypassed to a load-store unit in redundant form, without waiting for carry propagation to complete. In order to access a cache using such an address, a cache wordline decoder for decoding addresses in a carry-sum redundant form is required.</p><p>The type of cache wordline decoder required is depicted in FIG. <b>3</b>. It accepts addresses in which the binary digits comprise carry bits, C<sub>i</sub>, and sum bits, S<sub>i</sub>, produced by a carry-save adder. In order to identify a corresponding wordline, Wordline<sup>i</sup>, in cache memory, adjacent digits can first be pre-decoded by pre-decoder <b>301</b> to identify possible subsequences that could result from completion of carry propagation. According to the identified possible subsequences, subsequence indicators in subsequence indicator sets <b>302</b>, <b>303</b>, <b>304</b>, and <b>305</b>, <b>306</b> are activated. These subsequence indicators are combined in decoder <b>307</b> to identify a unique wordline sequence. According to the wordline sequence identified, one of a set of wordline indicators <b>308</b> is activated to access a corresponding location in cache.</p><p>Identification of possible subsequences from carry-sum redundant digits can be accomplished using a circuit like the one shown in FIG. <b>4</b>. This embodiment of a pre-decoder component circuit <b>408</b> comprises pre-decoder component circuit <b>404</b> and pre-decoder component circuit <b>402</b>. Pre-decoder component circuit <b>404</b> accepts, sum bits, S<sub>i </sub>and S<sub>i\u22121 </sub>and carry bits, C<sub>i\u22121 </sub>and C<sub>i\u22122</sub>, of an address in carry-sum redundant form and identifies possible two-bit subsequences that could result at positions, i and i\u22121 when the carry-sum address is converted into two's complement form. The identified possible subsequences are indicated by activating at least one of the four possible subsequence indicator signals, R<sub>i</sub><sup>11</sup>, R<sub>i</sub><sup>01</sup>, R<sub>i</sub><sup>10 </sup>and R<sub>i</sub><sup>00</sup>. Likewise, sum bits, S<sub>i\u22121 </sub>and S<sub>i\u22122</sub>, and carry bits, C<sub>i\u22122 </sub>and C<sub>i\u22123</sub>, can be used by pre-decoder component circuit <b>402</b> to identify possible two-bit subsequences that could result at positions, i\u22121 and i\u22122 when the address is converted to two's complement. The possible subsequences are indicated by activating at least one of the four possible subsequence indicator signals, R<sub>i\u22121</sub><sup>11</sup>, R<sub>i\u22121</sub><sup>01</sup>, R<sub>i\u22121</sub><sup>10</sup>, R<sub>i\u22121</sub><sup>00</sup>.</p><p>As shown in FIG. 4, the afore mentioned possible subsequence indicator signals (as shown in pre-decoder component circuit <b>404</b>) for a subsequence with most significant bit at position, i, in a wordline sequence are activated according to the following logic equations or their equivalents:</p><p><maths><formula-text><i>R</i><sub>i</sub><sup>11</sup>=(<i>S</i><sub>i\u22121 </sub>AND <i>C</i><sub>i\u22122</sub>) <i>X</i>OR (<i>S</i><sub>i</sub><i>X</i>OR <i>C</i><sub>i\u22121</sub>),</formula-text></maths></p><p><maths><formula-text><i>R</i><sub>i</sub><sup>01</sup>=(<i>S</i><sub>i\u22121 </sub>AND <i>C</i><sub>i\u22122</sub>) <i>XN</i>OR (<i>S</i><sub>i</sub><i>X</i>OR <i>C</i><sub>i\u22121</sub>),</formula-text></maths></p><p>\u2003<i>R</i><sub>i</sub><sup>10</sup>=(<i>S</i><sub>i\u22121 </sub>OR <i>C</i><sub>i\u22122</sub>) <i>X</i>OR (<i>S</i><sub>i </sub><i>X</i>OR <i>C</i><sub>i\u22121</sub>),</p><p>and</p><p><i>R</i><sub>i</sub><sup>00</sup>=(<i>S</i><sub>i\u22121 </sub>OR <i>C</i><sub>i\u22122</sub>) <i>XN</i>OR (<i>S</i><sub>i </sub><i>X</i>OR <i>C</i><sub>i\u22121</sub>).</p><p>The possible three-bit subsequences ending at position, i, can be identified by combining possible two-bit sequences ending at position, i, with the possible two-bit subsequences ending at position, i\u22121. FIG. 5 shows one embodiment of a decoder component circuit that combines two-bit subsequences into three-bit subsequences in this manner. It should be noted, of course, that one skilled in the art could modify the pre-decoder illustrated in FIG. 4 directly identify possible three-bit subsequences, or to identify possible four-bit subsequences, or to identify possible subsequences of any other size.</p><p>As shown in FIG. 5, a 3-bit possible subsequence indicator for a subsequence with most significant bit at position, i, in a wordline sequence is activated according to the following logic equations or their equivalents:</p><p><maths><formula-text><i>R</i><sub>i</sub><sup>111</sup><i>=R</i><sub>i</sub><sup>11 </sup>AND <i>R</i><sub>i\u22121</sub><sup>11</sup>,</formula-text></maths></p><p><maths><formula-text><i>R</i><sub>i</sub><sup>110</sup><i>=R</i><sub>i</sub><sup>11 </sup>AND <i>R</i><sub>i\u22121</sub><sup>10</sup>,</formula-text></maths></p><p><maths><formula-text><i>R</i><sub>i</sub><sup>101</sup><i>=R</i><sub>i</sub><sup>10 </sup>AND <i>R</i><sub>i\u22121</sub><sup>01</sup>,</formula-text></maths></p><p><maths><formula-text><i>R</i><sub>i</sub><sup>100</sup><i>=R</i><sub>i</sub><sup>10 </sup>AND <i>R</i><sub>i\u22121</sub><sup>00</sup>,</formula-text></maths></p><p><maths><formula-text><i>R</i><sub>i</sub><sup>011</sup><i>=R</i><sub>i</sub><sup>01 </sup>AND <i>R</i><sub>i\u22121</sub><sup>11</sup>,</formula-text></maths></p><p><maths><formula-text><i>R</i><sub>i</sub><sup>010</sup><i>=R</i><sub>i</sub><sup>01 </sup>AND <i>R</i><sub>i\u22121</sub><sup>10</sup>,</formula-text></maths></p><p><maths><formula-text><i>R</i><sub>i</sub><sup>001</sup><i>=R</i><sub>i</sub><sup>00 </sup>AND <i>R</i><sub>i\u22121</sub><sup>01</sup>,</formula-text></maths></p><p>and</p><p><maths><formula-text><i>R</i><sub>i</sub><sup>000</sup><i>=R</i><sub>i</sub><sup>00 </sup>AND <i>R</i><sub>i\u22121</sub><sup>00</sup>.</formula-text></maths></p><p>In a like manner, longer possible subsequences could be identified by ANDing together additional shorter possible subsequences.</p><p>One embodiment of a cache wordline decoder for decoding four-digit binary addresses in a carry-sum redundant form is illustrated in FIG. <b>6</b>. Through combining the possible two-bit subsequences ending at position, i, identified by pre-decoder component circuit <b>608</b>; position i\u22121, identified by pre-decoder component circuit <b>604</b>; and position i\u22122, identified by pre-decoder component circuit <b>602</b>; position with the one-bit possibilities for the least significant position, identified by pre-decoder component circuit <b>601</b> the unique four-bit wordline corresponding to the carry-sum redundant address can be identified without requiring carry propagation.</p><p>A unique wordline indicator for a 4-bit wordline sequence is activated by decoder <b>616</b> according to the following logic equations or their equivalents:</p><p><maths><formula-text>Word<sup>1111</sup><i>=R</i><sub>3</sub><sup>11 </sup>AND <i>R</i><sub>2</sub><sup>11 </sup>AND <i>R</i><sub>1</sub><sup>11 </sup>AND <i>R</i><sub>0</sub><sup>1X</sup>,</formula-text></maths></p><p><maths><formula-text>Word<sup>1110</sup><i>=R</i><sub>3</sub><sup>11 </sup>AND <i>R</i><sub>2</sub><sup>11 </sup>AND <i>R</i><sub>1</sub><sup>10 </sup>AND <i>R</i><sub>0</sub><sup>0X</sup>,</formula-text></maths></p><p><maths><formula-text>Word<sup>1101</sup><i>=R</i><sub>3</sub><sup>11 </sup>AND <i>R</i><sub>2</sub><sup>10 </sup>AND <i>R</i><sub>1</sub><sup>01 </sup>AND <i>R</i><sub>0</sub><sup>1X</sup>,</formula-text></maths></p><p><maths><formula-text>Word<sup>1100</sup><i>=R</i><sub>3</sub><sup>11 </sup>AND <i>R</i><sub>2</sub><sup>10 </sup>AND <i>R</i><sub>1</sub><sup>00 </sup>AND <i>R</i><sub>0</sub><sup>0X</sup>,</formula-text></maths></p><p><maths><formula-text>Word<sup>1011</sup><i>=R</i><sub>3</sub><sup>10 </sup>AND <i>R</i><sub>2</sub><sup>01 </sup>AND <i>R</i><sub>1</sub><sup>11 </sup>AND <i>R</i><sub>0</sub><sup>1X</sup>,</formula-text></maths></p><p><maths><formula-text>Word<sup>1010</sup><i>=R</i><sub>3</sub><sup>10 </sup>AND <i>R</i><sub>2</sub><sup>01 </sup>AND <i>R</i><sub>1</sub><sup>10 </sup>AND <i>R</i><sub>0</sub><sup>0X</sup>,</formula-text></maths></p><p><maths><formula-text>Word<sup>1001</sup><i>=R</i><sub>3</sub><sup>10 </sup>AND <i>R</i><sub>2</sub><sup>00 </sup>AND <i>R</i><sub>1</sub><sup>01 </sup>AND <i>R</i><sub>0</sub><sup>1X</sup>,</formula-text></maths></p><p><maths><formula-text>Word<sup>1000</sup><i>=R</i><sub>3</sub><sup>10 </sup>AND <i>R</i><sub>2</sub><sup>00 </sup>AND <i>R</i><sub>1</sub><sup>00 </sup>AND <i>R</i><sub>0</sub><sup>0X</sup>,</formula-text></maths></p><p><maths><formula-text>Word<sup>0111</sup><i>=R</i><sub>3</sub><sup>01 </sup>AND <i>R</i><sub>2</sub><sup>11 </sup>AND <i>R</i><sub>1</sub><sup>11 </sup>AND <i>R</i><sub>0</sub><sup>1X</sup>,</formula-text></maths></p><p><maths><formula-text>Word<sup>0110</sup><i>=R</i><sub>3</sub><sup>01 </sup>AND <i>R</i><sub>2</sub><sup>11 </sup>AND <i>R</i><sub>1</sub><sup>10 </sup>AND <i>R</i><sub>0</sub><sup>0X</sup>,</formula-text></maths></p><p><maths><formula-text>Word<sup>0101</sup><i>=R</i><sub>3</sub><sup>01 </sup>AND <i>R</i><sub>2</sub><sup>10 </sup>AND <i>R</i><sub>1</sub><sup>01 </sup>AND <i>R</i><sub>0</sub><sup>1X</sup>,</formula-text></maths></p><p><maths><formula-text>Word<sup>0100</sup><i>=R</i><sub>3</sub><sup>01 </sup>AND <i>R</i><sub>2</sub><sup>10 </sup>AND <i>R</i><sub>1</sub><sup>00 </sup>AND <i>R</i><sub>0</sub><sup>0X</sup>,</formula-text></maths></p><p>\u2003Word<sup>0011</sup><i>=R</i><sub>3</sub><sup>00 </sup>AND <i>R</i><sub>2</sub><sup>01 </sup>AND <i>R</i><sub>1</sub><sup>11 </sup>AND <i>R</i><sub>0</sub><sup>1X</sup>,</p><p><maths><formula-text>Word<sup>0010</sup><i>=R</i><sub>3</sub><sup>00 </sup>AND <i>R</i><sub>2</sub><sup>01 </sup>AND <i>R</i><sub>1</sub><sup>10 </sup>AND <i>R</i><sub>0</sub><sup>0X</sup>,</formula-text></maths></p><p><maths><formula-text>Word<sup>0001</sup><i>=R</i><sub>3</sub><sup>00 </sup>AND <i>R</i><sub>2</sub><sup>00 </sup>AND <i>R</i><sub>1</sub><sup>01 </sup>AND <i>R</i><sub>0</sub><sup>1X</sup>,</formula-text></maths></p><p>and</p><p><maths><formula-text>Word<sup>0000</sup><i>=R</i><sub>3</sub><sup>00 </sup>AND <i>R</i><sub>2</sub><sup>00 </sup>AND <i>R</i><sub>1</sub><sup>00 </sup>AND <i>R</i><sub>0</sub><sup>0X</sup>.</formula-text></maths></p><p>Another redundant representation used to quickly calculate load addresses without carry propagation is the sign-digit redundant form. In the sign-digit redundant form, each digit is represented by sign bit, X<sub>si</sub>, and a magnitude bit, X<sub>mi</sub>. FIG. 7<i>a </i>shows one embodiment of circuit that accepts addresses in a sign-digit redundant form and produces addresses in a negated carry-sum redundant form.</p><p>Identification of possible subsequences from sign-digit redundant digits can be accomplished using a circuit like the one shown in FIG. 7<i>b. </i>This embodiment of a pre-decoder component circuit <b>728</b> comprises pre-decoder component circuit <b>724</b> and pre-decoder component circuit <b>722</b>. Pre-decoder component circuit <b>724</b> accepts, sign bits, X<sub>si\u22121</sub>, and X<sub>si\u22122</sub>, magnitude bits, X<sub>mi</sub>, X<sub>mi\u22121 </sub>and X<sub>mi\u22122 </sub>of an address in sign-digit redundant form and identifies possible two-bit subsequences that could result at positions, i and i\u22121 when the sign-digit address is converted into two's complement form. The identified possible subsequences are indicated by activating at least one of the four possible subsequence indicator signals, R<sub>i</sub><sup>11</sup>, R<sub>i</sub><sup>01</sup>, R<sub>i</sub><sup>10 </sup>and R<sub>i</sub><sup>00</sup>. Likewise, sign bits, X<sub>si\u22122</sub>, and X<sub>si\u22123</sub>,and magnitude bits, X<sub>mi\u22121</sub>, X<sub>mi\u22122 </sub>and X<sub>mi\u22123</sub>, can be used by pre-decoder component circuit <b>722</b> to identify possible two-bit subsequences that could result at positions, i\u22121 and i\u22122 when the address is converted to two's complement. The possible subsequences are indicated by activating at least one of the four possible subsequence indicator signals, R<sub>i\u22121</sub><sup>11</sup>, R<sub>i\u22121</sub><sup>01</sup>, R<sub>i\u22121</sub><sup>10</sup>, R<sub>i\u22121</sub><sup>00</sup>.</p><p>As shown in FIG. 4, the afore mentioned possible subsequence indicator signals (as shown in pre-decoder component circuit <b>724</b>) for a subsequence with most significant bit at position, i, in a wordline sequence are activated according to the following logic equations or their equivalents:</p><p><maths><formula-text><i>R</i><sub>i</sub><sup>11</sup>=(<i>X</i><sub>mi\u22121 </sub><i>N</i>OR (<i>X</i><sub>mi\u22122 </sub><i>N</i>AND NOT <i>X</i><sub>si\u22122</sub>)) <i>X</i>OR (<i>X</i><sub>mi </sub><i>X</i>OR (<i>X</i><sub>mi\u22121 </sub><i>N</i>AND NOT <i>X</i><sub>si\u22121</sub>)),</formula-text></maths></p><p><maths><formula-text><i>R</i><sub>i</sub><sup>01</sup>=NOT (<i>X</i><sub>mi\u22121 </sub><i>N</i>OR (<i>X</i><sub>mi\u22122 </sub><i>N</i>AND NOT <i>X</i><sub>si\u22122</sub>)) <i>X</i>OR (<i>X</i><sub>mi </sub><i>X</i>OR (<i>X</i><sub>mi\u22121</sub><i>N</i>AND NOT <i>X</i><sub>si\u22121</sub>)),</formula-text></maths></p><p><maths><formula-text><i>R</i><sub>i</sub><sup>10</sup>=(<i>X</i><sub>mi\u22121 </sub><i>N</i>AND (<i>X</i><sub>mi\u22122 </sub><i>N</i>AND NOT <i>X</i><sub>si\u22122</sub>)) <i>X</i>OR (<i>X</i><sub>mi </sub><i>X</i>OR (<i>X</i><sub>mi\u22121 </sub><i>N</i>AND NOT <i>X</i><sub>si\u22121</sub>)),</formula-text></maths></p><p><maths><formula-text><i>R</i><sub>i</sub><sup>00</sup>=NOT (<i>X</i><sub>mi\u22121 </sub><i>N</i>AND (<i>X</i><sub>mi\u22122 </sub><i>N</i>AND NOT <i>X</i><sub>si\u22122</sub>)) <i>X</i>OR (<i>X</i><sub>mi </sub><i>X</i>OR (<i>X</i><sub>mi\u22121 </sub><i>N</i>AND NOT <i>X</i><sub>si\u22121</sub>)),</formula-text></maths></p><p>FIG. 8 shows one embodiment of a cache wordline decoder for sign-digit redundant addresses. It accepts addresses in which the binary digits comprise sign bits, X<sub>si</sub>, and magnitude bits, X<sub>mi</sub>, produced by a carry-save adder. In order to identify a corresponding wordline, Wordline<sup>i</sup>, in cache memory, adjacent digits can first be pre-decoded by pre-decoder <b>801</b> to identify possible subsequences that could result from completion of carry propagation. According to the identified possible subsequences, subsequence indicators in subsequence indicator sets <b>802</b>, <b>803</b>, <b>804</b>, and <b>805</b>, <b>806</b> are activated. These subsequence indicators are combined in decoder <b>807</b> to identify a unique wordline sequence. According to the wordline sequence identified, one of a set of wordline indicators <b>808</b> is activated to access a corresponding location in cache.</p><p>There are advantages associated with column multiplexing including better area usage since memory read circuits and write circuits can be laid out using a wider pitch, and more room is provided for global routing over memory cells. Soft error rates are reduced by limiting proximity of same column storage cells. There are also advantages associated with column segregation. The technique reduces power consumption and decoder sizes. A straight forward scheme for generating column selector signals for redundant addresses is to propagate carry signals to a desired position and identify a true bit value at that position then to combine enough possible subsequences indicators with the identified true bit value to completely decode a subsequence of the wordline.</p><p>FIG. 9<i>a </i>shows a circuit for generating four column selectors <b>910</b> from carry-sum redundant form addresses using a carry lookahead circuit <b>911</b>. Carry lookahead circuit <b>911</b> accepts, sum bits, S<sub>i\u22122 </sub>through S<sub>0</sub>, and carry bits, C<sub>i\u22123 </sub>through C<sub>in</sub>, of an address in carry-sum redundant form and propagates carry signals to generate a carry output signal, C<sub>LA</sub>, for position, i\u22122. Pre-decoder component circuit <b>914</b> accepts, sum bits, S<sub>i </sub>and S<sub>i\u22121</sub>, and carry bits, C<sub>i\u22121</sub>, and C<sub>i\u22122</sub>, of an address in carry-sum redundant form and identifies possible two-bit subsequences that could result at positions, i and i\u22121 when the carry-sum address is converted into two's complement form. The identified possible subsequences are indicated by activating at least one of the four possible subsequence indicator signals, R<sub>i</sub><sup>11</sup>, R<sub>i</sub><sup>01</sup>, R<sub>i</sub><sup>10 </sup>and R<sub>i</sub><sup>00</sup>. Pre-decoder component circuit <b>912</b> accepts, sum bit, S<sub>i\u22121</sub>, carry bit, C<sub>i\u22122</sub>, of an address in carry-sum redundant form and a carry-lookahead carry signal C<sub>LA</sub>. It identifies a true two-bit subsequence at positions, i and i\u22121. The identified subsequence are indicated by activating exactly one of the four column selector signals, R<sub>i</sub><sup>11c</sup>, R<sub>i</sub><sup>01c</sup>, R<sub>i</sub><sup>10c</sup>, and R<sub>i</sub><sup>00c</sup>.</p><p>FIG. 9<i>b </i>shows a half adder circuit for generating carry propagate, P<sub>i</sub>, and carry generate signals, G<sub>i</sub>, from carry-sum redundant form address digits, S<sub>i </sub>and C<sub>i\u22121</sub>, according to the following logic equations or their equivalents:</p><p><maths><formula-text><i>P</i><sub>i</sub><i>=S</i><sub>i</sub><i>X</i>OR <i>C</i><sub>i\u22121</sub></formula-text></maths></p><p>and</p><p><maths><formula-text><i>G</i><sub>i</sub><i>=S</i><sub>i </sub>AND <i>C</i><sub>i\u22121</sub>.</formula-text></maths></p><p>FIG. 9<i>c </i>shows carry lookahead circuits for generating a carry out signal, C<sub>i</sub>, from carry-propagate signals, P<sub>0 </sub>through P<sub>i\u22121</sub>, and carry generate signals, G<sub>0 </sub>through G<sub>i\u22121</sub>, and carry input signal, C<sub>0</sub>, according to the following logic equations or their equivalents:</p><p><maths><formula-text><i>C</i><sub>1</sub>=(<i>C</i><sub>0 </sub>AND <i>P</i><sub>0</sub>)OR <i>G</i><sub>0</sub>.</formula-text></maths></p><p><maths><formula-text><i>C</i><sub>2</sub>=(<i>C</i><sub>0 </sub>AND P<sub>0 </sub>AND <i>P</i><sub>1</sub>) OR (<i>G</i><sub>0 </sub>AND <i>P</i><sub>1</sub>) OR <i>G</i><sub>1</sub>,</formula-text></maths></p><p><maths><formula-text><i>C</i><sub>3</sub>=(<i>C</i><sub>0 </sub>AND P<sub>0 </sub>AND <i>P</i><sub>1 </sub>AND P<sub>2 </sub>) OR (<i>G</i><sub>0 </sub>AND <i>P</i><sub>1 </sub>AND P<sub>2</sub>) OR (<i>G</i><sub>1 </sub>AND P<sub>2</sub>) OR <i>G</i><sub>2</sub>,</formula-text></maths></p><p><maths><formula-text><i>C</i><sub>4</sub>=(<i>C</i><sub>0 </sub>AND <i>P</i><sub>0 </sub>AND <i>P</i><sub>1 </sub>AND <i>P</i><sub>2 </sub>AND <i>P</i><sub>3</sub>) OR (<i>G</i><sub>0 </sub>AND <i>P</i><sub>1 </sub>AND <i>P</i><sub>2 </sub>AND <i>P</i><sub>3</sub>) OR (<i>G</i><sub>1 </sub>AND <i>P</i><sub>2 </sub>AND <i>P</i><sub>3</sub>) OR (<i>G</i><sub>2 </sub>AND <i>P</i><sub>3</sub>) OR <i>G</i><sub>3</sub>,</formula-text></maths></p><p>One problem with this approach is that it may reduce the benefits of using nonpropagative circuitry to calculate addresses and decode wordlines by requiring carry propagation to generate column selector signals. It is also limited to the less significant address positions as more significant positions require longer carry propagation delays. Since access speed is crucial to cache design, a better column multiplexing scheme is desired for redundant addresses.</p><p>The truth table shown in FIG. 10 is for generating possible subsequence indicators from carry-save redundant form address digits. A similar table can be drawn for sign-digit addresses. It can be noticed that adjacent pairs of possible subsequence indicators (R<sub>i</sub><sup>11</sup>, R<sub>i</sub><sup>01</sup>) and (R<sub>i</sub><sup>10</sup>, R<sub>i</sub><sup>00</sup>) are mutually exclusive. For example line <b>1000</b> shows that if S<sub>i</sub>=0, C<sub>i\u22121</sub>=0, S<sub>i\u22121</sub>=0, and C<sub>i\u22122</sub>=0; then R<sub>i</sub><sup>11</sup>=0, R<sub>i</sub><sup>01</sup>=1, R<sub>i</sub><sup>10</sup>=0, and R<sub>i</sub><sup>00</sup>=1. Similarly for line <b>1001</b>, if S<sub>i</sub>=0, C<sub>i\u22121</sub>=0, S<sub>i\u22121</sub>=0, and C<sub>i\u22122</sub>=1; then R<sub>i</sub><sup>11</sup>=0, R<sub>i</sub><sup>01</sup>=1, R<sub>i</sub><sup>10</sup>=1, and R<sub>i</sub><sup>00</sup>=0. Like patterns are shown for the remaining lines <b>1002</b>-<b>1033</b>. Hence R<sub>i</sub><sup>11 </sup>is never equal to R<sub>i</sub><sup>01 </sup>and R<sub>i</sub><sup>10 </sup>is never equal to R<sub>i</sub><sup>00</sup>. Further it can be noticed that an address having an active possible subsequence indicator R<sub>i</sub><sup>11 </sup>could share a wordline with an address having an active possible subsequence indicator R<sub>i</sub><sup>01 </sup>and an address having an active possible subsequence indicator R<sub>i</sub><sup>10 </sup>could share a wordline with an address having an active possible subsequence indicator R<sub>i</sub><sup>00</sup>. This can be seen in FIG. 11<i>a. </i></p><p>FIG. 11<i>a </i>shows a grouping of 4-bit addresses according to most significant 2-bit subsequences. Since the sequences shown in block <b>1110</b> have corresponding sequences in block <b>1112</b>, these addresses could be permitted to share a word line generated by the three least significant bits, if the column was selected by the most significant active possible subsequence indicator. Similarly, since the sequences shown in block <b>1111</b> have corresponding sequences in block <b>1113</b>, these addresses could be permitted to share a word line generated by the three least significant bits, if the column was selected by the most significant active possible subsequence indicator. Further, since a single unique wordline will be activated, there is no danger of contention between block <b>1110</b> and block <b>1111</b> for example, or between block <b>1112</b> and block <b>1113</b>. It can also be noticed that similar conditions exist for digit positions other than the most significant digit position.</p><p>For instance, FIG. 11<i>b </i>shows another grouping of 4-bit addresses according to second most significant 2-bit subsequences. Since the sequences shown in blocks <b>1120</b> have corresponding sequences in blocks <b>1122</b>, these addresses could be permitted to share a word line generated by the most significant bit and the two least significant bits, if the column was selected by the second most significant active possible subsequence indicator. Similarly, since the sequences shown in blocks <b>1121</b> have corresponding sequences in blocks <b>1123</b>, these addresses could be permitted to share a word line generated by the most significant bit and the two least significant bits, if the column was selected by the second most significant active possible subsequence indicator.</p><p>Such a wordline could be generated, for example, by combining R<sub>3</sub><sup>11 </sup>and R<sub>i</sub><sup>10 </sup>through an OR gate prior to decoding through a circuit like the one shown in FIG. <b>5</b>. Similarly R<sub>3</sub><sup>01 </sup>and R<sub>3</sub><sup>00 </sup>could be combined through an OR gate prior to decoding through a circuit like the one shown in FIG. <b>5</b>. This guarantees the activation of a unique wordline. Of course, it will be appreciated that one skilled in the art may select to implement such a wordline decoder in a variety of ways, some providing reductions in required circuitry when compared to a literal implementation of the solution disclosed above.</p><p>As before, since a single unique wordline is activated, there is no danger of contention between blocks <b>1120</b> and blocks <b>1121</b> for example, or between blocks <b>1122</b> and blocks <b>1123</b>. Hence, an address space may be divided into four quarters according to possible subsequence indicators and these four quarters may be multiplexed by directly using possible subsequence indicators as column selectors. This is illustrated in FIG. <b>12</b>.</p><p>With regard to FIG. 12, one embodiment of a cache column multiplexing scheme using a grouping of addresses according to possible 2-bit subsequences is disclosed. As was previously discussed, a bitline <b>1220</b> for a 0th data bit may be shared by quarter 00, illustrated as block <b>1200</b>, and quarter 10, illustrated as block <b>1210</b> by directly using some ith possible subsequence indicators R<sub>i</sub><sup>00 </sup>and R<sub>i</sub><sup>10 </sup>as column selectors in column multiplexer <b>1240</b>. Similarly, bitline <b>1220</b> for a 0th data bit may be shared by quarter 01, illustrated as block <b>1201</b>, and quarter <b>11</b>, illustrated as block <b>1211</b> by directly using ith possible subsequence indicators R<sub>i</sub><sup>01 </sup>and R<sub>i</sub><sup>11 </sup>as column selectors in column multiplexer <b>1250</b>. Further considering a wordline W<sub>h </sub>produced by combining identified possible subsequences as described above but omitting from this combination the ith subsequence, this wordline being directly column selected by ith possible subsequence indicators R<sub>i</sub><sup>00 </sup>and R<sub>i</sub><sup>10</sup>; such a wordline differs in its i\u22121 th bit from a similarly produced wordline W<sub>k </sub>being directly column selected by ith possible subsequence indicators R<sub>i</sub><sup>01 </sup>and R<sub>i</sub><sup>11 </sup>and hence accesses a different physical storage location than wordline W<sub>k</sub>. Therefore bitline <b>1220</b> may be shared as a common output of column multiplexer <b>1240</b> and column multiplexer <b>1250</b> without contention, providing a unique 0th data bit D<sub>0 </sub>for line <b>1230</b>.</p><p>Similarly, bitline <b>1229</b> may be shared as a common output of column multiplexer <b>1249</b> for an nth data bit shared by quarter 00, illustrated as block <b>1209</b>, and quarter 10, illustrated as block <b>1219</b> by directly using ith possible subsequence indicators R<sub>i</sub><sup>01 </sup>and R<sub>i</sub><sup>11 </sup>as column selectors; and column multiplexer <b>1259</b> for an nth data bit shared by quarter 01, illustrated as block <b>1291</b>, and quarter 11, illustrated as block <b>1299</b> by directly using ith possible subsequence indicators R<sub>i</sub><sup>01 </sup>and R<sub>i</sub><sup>11 </sup>as column selectors without contention, providing a unique nth data bit D<sub>n </sub>for line <b>1239</b>.</p><p>Details of one embodiment of a cache column multiplexing scheme using a grouping of addresses according to possible 2-bit subsequences is illustrated in FIG. 13. A bitline comprising line <b>1320</b> connected with line <b>1322</b> through line <b>1330</b>, for a 0th data bit is shared by quarter 00, illustrated as block <b>1300</b>, and quarter 10, illustrated as block <b>1310</b> by directly using some ith possible subsequence indicators R<sub>i</sub><sup>00 </sup>and R<sub>i</sub><sup>10 </sup>as column selectors in a column multiplexer comprising pass-gate device <b>1340</b> and pass-gate device <b>1342</b>. Similarly, a bitline comprising line <b>1320</b> connected with line <b>1322</b> through line <b>1330</b>, is shared by quarter 01, illustrated as block <b>1301</b>, and quarter 11, illustrated as block <b>1311</b> by directly using ith possible subsequence indicators R<sub>i</sub><sup>01 </sup>and R<sub>i</sub><sup>11 </sup>as column selectors in a column multiplexer comprising pass-gate device <b>1350</b> and pass-gate device <b>1352</b>.</p><p>A wordline W<sub>h</sub>, produced by combining identified possible subsequences while omitting from this combination the ith subsequence, accesses storage cell <b>1360</b> to present a stored true logical value on bitline B<sub>00 </sub>and a stored complemented logical value on bitline B<sub>00 </sub>bar and also accesses storage cell <b>1362</b> to present a stored true logical value on bitline B<sub>10 </sub>and a stored complemented logical value on bitline B<sub>10 </sub>bar. This wordline being directly column selected by ith possible subsequence indicators R<sub>i</sub><sup>00 </sup>and R<sub>i</sub><sup>10 </sup>to multiplex either the true logical value on bitline B<sub>00 </sub>onto line <b>1320</b> or the true logical value on bitline B<sub>02 </sub>onto line <b>1322</b>, differs in its i\u22121th bit from similarly produced wordlines W<sub>i </sub>and W<sub>k </sub>being directly column selected by ith possible subsequence indicators R<sub>i</sub><sup>01 </sup>and R<sub>i</sub><sup>11 </sup>and hence accesses a different physical storage location than wordlines W<sub>i </sub>or W<sub>k</sub>. Therefore neither the storage cells <b>1361</b> and <b>1371</b> of block <b>1301</b> nor the storage cells <b>1363</b> and <b>1373</b> of block <b>1311</b> will be accessed and so the bitline comprising line <b>1320</b> connected with line <b>1322</b> through line <b>1330</b> may be shared as a common output of the column multiplexer comprising pass-gate device <b>1340</b> and pass-gate device <b>1342</b> and the column multiplexer comprising pass-gate device <b>1350</b> and pass-gate device <b>1352</b> without contention, providing a unique 0th true data bit D<sub>0 </sub>for line <b>1330</b>.</p><p>Similarly wordline W<sub>h</sub>, being directly column selected by ith possible subsequence indicators R<sub>i</sub><sup>00 </sup>and R<sub>i</sub><sup>10 </sup>to multiplex either the complemented logical value on bitline B<sub>00 </sub>bar onto line <b>1325</b> or the complemented logical value on bitline B<sub>02 </sub>bar onto line <b>1327</b>, accesses a different physical storage location than wordlines W<sub>i </sub>or W<sub>k</sub>. Therefore the bitline comprising line <b>1325</b> connected with line <b>1327</b> through line <b>1335</b> may be shared as a common output of the column multiplexer comprising pass-gate device <b>1345</b> and pass-gate device <b>1347</b> and the column multiplexer comprising pass-gate device <b>1355</b> and pass-gate device <b>1357</b> without contention, providing a unique 0th complemented data bit D<sub>0 </sub>bar for line <b>1335</b>. It will be appreciated that the above description is intended to illustrate rather than restrict, and that real memory typically comprise further complexities such as equilibrium circuitry, cross coupled differential amplifiers, and write circuitry not shown in FIG. <b>13</b>. It will also be appreciated that real memory typically involves many more wordlines, storage cells and perhaps more columns than those illustrated in FIG. <b>13</b>.</p><p>FIG. 14 shows one embodiment of a 2-level column multiplexing scheme using a grouping of addresses according to a first set of possible 2-bit subsequence indicators, (R<sub>n</sub><sup>11</sup>, R<sub>n</sub><sup>01</sup>) and (R<sub>n</sub><sup>10</sup>, R<sub>n</sub><sup>00</sup>) and according to a second set of possible 2-bit subsequence indicators, (R<sub>m</sub><sup>11</sup>, R<sub>m</sub><sup>01</sup>) and (R<sub>m</sub><sup>10</sup>, R<sub>m</sub><sup>00</sup>) For example, a wordline W<sub>h </sub>produced by combining identified possible subsequences as described above but omitting from this combination the nth and mth subsequences, this wordline being directly column selected by nth possible subsequence indicators R<sub>n</sub><sup>00 </sup>and R<sub>n</sub><sup>10</sup>; such a wordline, differs in its n\u22121th bit from a similarly produced wordline W<sub>i </sub>being directly column selected by nth possible subsequence indicators R<sub>n</sub><sup>01 </sup>and R<sub>n</sub><sup>11 </sup>and hence accesses a different physical storage location than wordline W<sub>i</sub>. Hence, a common output <b>1422</b> may be shared between column multiplexer <b>1440</b> and column multiplexer <b>1450</b> without contention, providing a unique 0th data bit D<sub>0 </sub>for line <b>1422</b>.</p><p>Further, wordline W<sub>h </sub>produced by combining identified possible subsequences as described above but omitting from this combination the nth and mth subsequences, this wordline also being directly column selected by mth possible subsequence indicators R<sub>m</sub><sup>00 </sup>and R<sub>m</sub><sup>10</sup>; such a wordline differs in its m\u22121th bit from a similarly produced wordline W<sub>k </sub>being directly column selected by mth possible subsequence indicators R<sub>m</sub><sup>01 </sup>and R<sub>m</sub><sup>11 </sup>and hence accesses a different physical storage location than wordline W<sub>k</sub>. Hence, a common output <b>1420</b> may be shared between column multiplexer <b>1470</b> and column multiplexer <b>1480</b> without contention, providing a unique 0th data bit D<sub>0 </sub>for line <b>1230</b>.</p><p>One embodiment of a digital computing system is shown in FIG. 15, which comprises a cache <b>1513</b> with a decoder for receiving redundant addresses and multiplexing bitlines according to possible subsequence indicators R<sub>i</sub><sup>00 </sup>corresponding to block <b>1508</b>, R<sub>i</sub><sup>10 </sup>corresponding to block <b>1510</b>, R<sub>i</sub><sup>01 </sup>corresponding to block <b>1509</b>, and R<sub>i</sub><sup>11 </sup>corresponding to block <b>1511</b>. For one embodiment, cache <b>1513</b>, is the fastest internal cache in a hierarchical plurality of caches including slower external caches and <b>1513</b> is resident on the same die as processor, <b>1512</b>. In another embodiment, cache <b>1513</b> and possibly other internal caches reside on the same die, but there are no external caches. In this context, an internal cache is one that resides on a die or chip with a processor core. An external cache is one that resides off the die, on a separate die or chip.</p><p>Instruction decoder, <b>1501</b>, receives instructions that may include additions, loads, stores, etc. For example, a first instruction to add a base address in a first register to an index in a second register, writing the result in a third register may be received and decoded. Then a second instruction to load data from the address in the third register may be received and decoded. The first instruction may produce a result by providing operands from a register file, <b>1505</b>, to a redundant adder, <b>1503</b>. In order to complete the second instruction quickly, the result produced by redundant adder, <b>1503</b>, may be bypassed to cache, <b>1513</b>, by the bypassing control <b>1506</b>. The redundant address received by cache <b>1513</b> may be processed by a pre-decoder to identify possible subsequences and activate possible subsequence indicators R<sub>i</sub><sup>11</sup>, R<sub>i</sub><sup>01</sup>, R<sub>i</sub><sup>10 </sup>and R<sub>i</sub><sup>00 </sup>for each ith bit position in the corresponding result address of the first instruction. A mth set of possible subsequence indicators R<sub>m</sub><sup>11</sup>, R<sub>m</sub><sup>01</sup>, R<sub>m</sub><sup>10</sup>, and R<sub>m</sub><sup>00 </sup>for an mth bit position in the corresponding result address of the first instruction, may be omitted from a combination of possible subsequence indicators to identify a wordline and activate a wordline indicator with which to access a particular wordline of storage locations in memory. The mth set of possible subsequence indicators R<sub>m</sub><sup>11</sup>, R<sub>m</sub><sup>01</sup>, R<sub>m</sub><sup>10</sup>, and R<sub>m</sub><sup>00 </sup>may instead be used directly as column selectors to multiplex four sets of bitlines corresponding to four 2-bit sequences at positions m and m\u22121 in the result address of the first instruction, said sets of bitlines being multiplexed into common outputs for presenting data values of each of the bit positions of the data associated with the result address of the first instruction.</p><p>FIG. 16 summarizes one embodiment of a method of accessing data in a cache using redundant addresses. The method comprises receiving a redundant address in block <b>1601</b> to access a storage location, and processing the redundant address to identify possible subsequences in block <b>1602</b>. According to the possible sequences identified, possible subsequence indicators R<sub>i</sub><sup>11</sup>, R<sub>i</sub><sup>01</sup>, R<sub>i</sub><sup>10</sup>, and R<sub>i</sub><sup>00</sup>, are activated in block <b>1603</b> for each ith digit position in the redundant address. An mth set of possible subsequence indicators R<sub>m</sub><sup>11</sup>, R<sub>m</sub><sup>01</sup>, R<sub>m</sub><sup>10</sup>, and R<sub>m</sub><sup>00 </sup>for an mth digit position in the redundant address is omitted and remaining sets of possible subsequence indicators are combined to identify a wordline in block <b>1604</b>. A wordline indicator with which to access a particular wordline of storage locations in memory is activated according to the wordline identified in block <b>1605</b>. The mth set of possible subsequence indicators R<sub>m</sub><sup>11</sup>, R<sub>m</sub><sup>01</sup>, R<sub>m</sub><sup>10</sup>, and R<sub>i</sub><sup>00 </sup>is used directly as column selectors to multiplex four sets of bitlines into common outputs in block <b>1606</b>, the bitlines corresponding to four 2-bit sequences at positions m and m\u22121 in a binary address corresponding to the redundant address. The common outputs present data values of each of the bit positions of the data stored at the location associated with the redundant address.</p><p>The above description is intended to illustrate preferred embodiments of the present invention. From the discussion above it should also be apparent that the invention can be modified in arrangement and detail by those skilled in the art without departing from the principles of the present invention within the scope of the accompanying claims.</p><?DETDESC description=\"Detailed Description\" end=\"tail\"?></description>"}], "inventors": [{"first_name": "Kevin X.", "last_name": "Zhang", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "INTEL CORPORATION"}, {"first_name": "", "last_name": "INTEL CORPORATION", "name": ""}], "ipc_classes": [{"primary": true, "label": "G11C   8/00"}], "locarno_classes": [], "ipcr_classes": [{"label": "G11C  15/00        20060101A I20051008RMEP"}, {"label": "G11C   8/10        20060101A I20051008RMEP"}], "national_classes": [{"primary": true, "label": "36523002"}, {"primary": false, "label": "36523006"}], "ecla_classes": [{"label": "G11C  15/00"}, {"label": "G11C   8/10"}], "cpc_classes": [{"label": "G11C  15/00"}, {"label": "G11C  15/00"}, {"label": "G11C   8/10"}, {"label": "G11C   8/10"}], "f_term_classes": [], "legal_status": "Expired - Lifetime", "priority_date": "2000-03-29", "application_date": "2000-03-29", "family_members": [{"ucid": "US-6507531-B1", "titles": [{"lang": "EN", "text": "Cache column multiplexing using redundant form addresses"}]}]}