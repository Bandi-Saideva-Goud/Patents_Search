{"patent_number": "US-6564331-B1", "publication_id": 73400926, "family_id": 23605408, "publication_date": "2003-05-13", "titles": [{"lang": "EN", "text": "Low power register file"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA50491040\"><p>A mechanism is provided for reducing the power consumption of a register file by disabling unused register file read ports. A selected entry of the register file is hardwired to zero and the address of the selected entry is driven to the address decoder of the register file in response to a power-down condition. The power-down condition occurs when, for example, no valid address is driven to the read port, i.e. the read port is unused. For one embodiment of the invention, the selected entry is the zero<sup>th </sup>entry of the register file, and the address lines are grounded when an address valid bit associated with the read port is not asserted.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00001\" num=\"1\"><claim-text>1. A register file comprising:</claim-text><claim-text>a plurality of word-lines, each word-line corresponding to a register entry; </claim-text><claim-text>a decoder to select one of the word-lines according to a register address driven to an associated port; </claim-text><claim-text>a word line driver to apply a voltage to the selected word-line; and </claim-text><claim-text>a power-module to drive a selected address to the associated port if the port is not in use. </claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00002\" num=\"2\"><claim-text>2. The register file of <claim-ref idref=\"US-6564331-B1-CLM-00001\">claim 1</claim-ref>, wherein the decoder include N address lines and the power module comprises N transistors, each of the N transistors being coupled between one of the N address lines and a reference voltage.</claim-text></claim>"}, {"num": 3, "parent": 2, "type": "dependent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00003\" num=\"3\"><claim-text>3. The register file of <claim-ref idref=\"US-6564331-B1-CLM-00002\">claim 2</claim-ref>, wherein a gate of each of the N transistors is driven by a signal that indicates if the associated port is in use.</claim-text></claim>"}, {"num": 4, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00004\" num=\"4\"><claim-text>4. The register file of <claim-ref idref=\"US-6564331-B1-CLM-00001\">claim 1</claim-ref>, wherein the selected address corresponds to a register entry that is hardwired to zero.</claim-text></claim>"}, {"num": 5, "parent": 4, "type": "dependent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00005\" num=\"5\"><claim-text>5. The register file of <claim-ref idref=\"US-6564331-B1-CLM-00004\">claim 4</claim-ref>, wherein the selected address has all address bits zero.</claim-text></claim>"}, {"num": 6, "parent": 5, "type": "dependent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00006\" num=\"6\"><claim-text>6. The register file of <claim-ref idref=\"US-6564331-B1-CLM-00005\">claim 5</claim-ref>, wherein the power module shorts all address bits to zero if the associated port is not in use.</claim-text></claim>"}, {"num": 7, "parent": 6, "type": "dependent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00007\" num=\"7\"><claim-text>7. The register file of <claim-ref idref=\"US-6564331-B1-CLM-00006\">claim 6</claim-ref>, wherein the power module includes a transistor for each address bit, each transistor to couple its associated address bit to ground if the associated port is not in use.</claim-text></claim>"}, {"num": 8, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00008\" num=\"8\"><claim-text>8. A processor comprising:</claim-text><claim-text>an instruction decoder to determine a first register ID specified by an instruction; </claim-text><claim-text>an address decoder to identify a register entry indicated by a register ID asserted to an associated register port; and </claim-text><claim-text>a power module to couple the first register ID to the decoder if the associated register port is used for the instruction and to coupled a second register ID to the decoder if the register port is not used. </claim-text></claim>"}, {"num": 9, "parent": 8, "type": "dependent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00009\" num=\"9\"><claim-text>9. The processor of <claim-ref idref=\"US-6564331-B1-CLM-00008\">claim 8</claim-ref>, wherein the selected register ID corresponds to a register entry that is hardwired to a reference voltage.</claim-text></claim>"}, {"num": 10, "parent": 9, "type": "dependent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00010\" num=\"10\"><claim-text>10. The processor of <claim-ref idref=\"US-6564331-B1-CLM-00009\">claim 9</claim-ref>, wherein the selected register ID has all bits in a first voltage state and the power module couples inputs of the address decoder to the reference voltage state if the register port is not used.</claim-text></claim>"}, {"num": 11, "parent": 8, "type": "dependent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00011\" num=\"11\"><claim-text>11. The process of <claim-ref idref=\"US-6564331-B1-CLM-00008\">claim 8</claim-ref>, wherein the address decoder has an N-bit register ID input and the power module comprises N transistors, each transistor to couple one of the N-bits to a reference voltage if the register port is not used.</claim-text></claim>"}, {"num": 12, "parent": 8, "type": "dependent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00012\" num=\"12\"><claim-text>12. The processor of <claim-ref idref=\"US-6564331-B1-CLM-00008\">claim 8</claim-ref>, wherein a signal that indicates the port is not in use is asserted if an invalid operand is expected on a read port associated with the address decoder.</claim-text></claim>"}, {"num": 13, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00013\" num=\"13\"><claim-text>13. A method for reducing power-consumption of a register file comprising:</claim-text><claim-text>detecting a signal that indicates if a port of the register file is to be used by an operation; </claim-text><claim-text>asserting to the port an address specified by the operation if the port is to be used; and </claim-text><claim-text>asserting to the port a preselected address if the port is not to be used by an operation. </claim-text></claim>"}, {"num": 14, "parent": 13, "type": "dependent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00014\" num=\"14\"><claim-text>14. The method of <claim-ref idref=\"US-6564331-B1-CLM-00013\">claim 13</claim-ref>, wherein asserting the preselected address comprises asserting an address corresponding to a register file entry having all bits zero.</claim-text></claim>"}, {"num": 15, "parent": 14, "type": "dependent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00015\" num=\"15\"><claim-text>15. The method of <claim-ref idref=\"US-6564331-B1-CLM-00014\">claim 14</claim-ref>, wherein the preselected address corresponds to a zero<sup>th </sup>entry of the register file.</claim-text></claim>"}, {"num": 16, "parent": 13, "type": "dependent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00016\" num=\"16\"><claim-text>16. The method of <claim-ref idref=\"US-6564331-B1-CLM-00013\">claim 13</claim-ref>, wherein asserting a preselected address comprises asserting the preselected address to transistors that couple address inputs of the register file to a reference voltage to apply the reference voltage to the address inputs.</claim-text></claim>"}, {"num": 17, "parent": 16, "type": "dependent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00017\" num=\"17\"><claim-text>17. The method of <claim-ref idref=\"US-6564331-B1-CLM-00016\">claim 16</claim-ref>, wherein the reference voltage is ground.</claim-text></claim>"}, {"num": 18, "parent": 13, "type": "dependent", "paragraph_markup": "<claim id=\"US-6564331-B1-CLM-00018\" num=\"18\"><claim-text>18. The method of <claim-ref idref=\"US-6564331-B1-CLM-00013\">claim 13</claim-ref>, wherein asserting the preselected address to the register file comprises asserting an address corresponding to a register file entry that is hardwired to zero.</claim-text></claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES53922168\"><?BRFSUM description=\"Brief Summary\" end=\"lead\"?><h4>BACKGROUND OF THE INVENTION</h4><p>1. Technical Field</p><p>The present invention relates to the field of microprocessors, and in particular, to low power register files for use in microprocessors.</p><p>2. Background Art</p><p>Modern processors typically include extensive execution resources to support concurrent processing of multiple instructions. These execution resources receive data from a hierarchy of storage structures with varying access latencies. One or more register files are located on the processor chip to provide data to the execution resources with very low latencies. Other storage structure include on-chip caches, off-chip caches, and a main memory, which provide data to execution resources with correspondingly longer latencies. Because register files are a primary source of data for execution resources, high performance processors typically employ larger register files, which have more register entries and multiple read/write ports. These larger register files maintain more data near the processor's execution resources, where it can be accessed with relatively low latency by multiple execution units.</p><p>Multi-ported register files can create significant power demands on the processor. This is especially true when the register file is implemented in domino logic, which provides greater speed and lower loading than static logic in return for greater power dissipation. However, some of this power dissipation is unnecessary. For example, a register file provides data from the register entries indicated at its read ports on each cycle of the processor's clock. The register entries are indicated by voltage levels on each read port's address lines. When a read port is in use, these voltage levels represent a valid register identifier (ID) specified by an instruction in an associated execution unit. If the read port is not in use, i.e. if no instruction is driving a valid register ID to the port, the voltage levels on the read port's address lines typically retain their values from the previous access. Even though these values represent a no-longer-valid address, they cause data to be read out of a corresponding register entry, unless the read port is disabled.</p><p>The power consumed by these unnecessary reads can be significant, particularly for domino logic. Each bit of the register entry is represented by a storage node, which is in one of two voltage states according to whether the bit is a logic one or a logic zero. When the register entry is read, every storage node that represents a logic one discharges an associated domino node, which must be recharged for the next clock cycle. The power dissipated by discharging and recharging the domino node capacitances associated with no-longer-valid addresses is wasted. Register files based on static logic dissipate less power per read, but static logic is not typically suitable for large register files.</p><p>Similar power dissipation occurs on unused register file write ports. If unused write ports are not disabled, their logic gates change state (\u201ctoggle\u201d) with the processor clock, consuming additional power. In addition, toggling an unused write port increases the chances that the register entry associated with the no-longer-valid address voltages will be updated improperly.</p><p>Some register files disable unused read/write ports by ANDing the clock signal that drives the storage nodes with an enable signal, e.g. an address-valid bit. Other register files use a similar enable signal to qualify the word-lines associated with the storage nodes. In both cases, the enable signal is loaded by each entry in the register file. Since register file accesses are typically on a speed path in the processor, any increase in signal loading reduces the speed at which signals can be switched.</p><p>The present invention addresses these and other problems associated with power consumption by register files.</p><h4>SUMMARY OF THE INVENTION</h4><p>The present invention provides a mechanism for reducing power consumption by register files. A reference value is stored in a selected entry of the register file, and the address of the selected entry is driven to the address decoder of a register port whenever the port is not used. The reference value is chosen so that the voltage nodes associated with its component bits are not discharged when the value is read.</p><p>A register file in accordance with the present invention includes a word-line for each register file entry. An address decoder selects a word-line indicated by a received address, and a word line driver applies a voltage to the selected word-line. A power-control module drives a selected address to the decoder in response to a power-down signal.</p><p>For one embodiment of the invention, a selected register file entry is assigned a value of zero, and the power-control module drives the address of the selected register file entry to the address decoder in response to a power-down signal.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4><p>The present invention may be understood with reference to the following drawings, in which like elements are indicated by like numbers. These drawings are provided to illustrate selected embodiments of the present invention and are not intended to limit the scope of the invention.</p><p>FIG. 1A is a block diagram of a register file that implements a conventional power reduction mechanism.</p><p>FIG. 1B is a circuit diagram of a storage node in the register file of FIG. <b>1</b>.</p><p>FIG. 2 is a block diagram of one embodiment of a register file in accordance with the present invention.</p><p>FIG. 3 is a block diagram of one embodiment of a processor incorporating a register file in accordance with the present invention.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>DETAILED DESCRIPTION OF THE INVENTION</h4><p>The following discussion sets forth numerous specific details to provide a thorough understanding of the invention. However, those of ordinary skill in the art, having the benefit of this disclosure, will appreciate that the invention may be practiced without these specific details. In addition, various well-known methods, procedures, components, and circuits have not been described in detail in order to focus attention on the features of the present invention.</p><p>FIG. 1A is a block diagram of a register file <b>100</b> that implements a conventional power reduction mechanism. Register file <b>100</b> includes multiple read and write ports (\u201cport\u201d) to access selected entries in a storage array <b>130</b>. A single port <b>104</b> is shown in FIG. 1 for purposes of illustration. Port <b>104</b> includes an address decoder <b>110</b> and a word-line driver <b>120</b>. For purposes of illustration, storage array <b>130</b> is shown having <b>128</b> register entries <b>140</b>(<b>0</b>)-<b>140</b>(<b>127</b>) of 64 bits each.</p><p>Word-lines <b>150</b>(<b>0</b>)-<b>150</b>(<b>127</b>) are associated with entries <b>140</b>(<b>0</b>)-<b>140</b>(<b>127</b>), respectively, and bit lines <b>160</b>(<b>0</b>)-<b>160</b>(<b>63</b>) are provided for each of the 64 bits of an entry. A storage node is provided for each bit of each entry. An exemplary storage node <b>170</b>(<i>i, j</i>) is shown at the intersection of i<sup>th </sup>word-line <b>140</b>(<i>i</i>) with j<sup>th </sup>bit-line <b>160</b>(<i>j</i>). Address lines <b>174</b> for address decoder <b>110</b> receive a register ID and select a corresponding one of word-lines <b>150</b>. For example, driving register ID 1111110 to address decoder <b>110</b> selects word-line <b>150</b>(<b>126</b>), which is driven to a first voltage state by word-line driver <b>120</b>. The data stored at entry <b>140</b>(<b>126</b>) may then be read out through bit-lines <b>160</b>(<b>0</b>)-<b>160</b>(<b>63</b>). In the following discussion, indices are dropped from references to entries <b>140</b>, word-lines <b>150</b>, bit-lines <b>160</b> and other indexed elements, except where necessary to avoid ambiguity.</p><p>FIG. 1B is a simplified diagram of storage node <b>170</b> for a register file based on domino logic. A domino node <b>180</b> is formed by the drains of a P-type transistor <b>182</b> and an N-type transistor <b>184</b>. A feedback loop through an inverter <b>186</b> drives the gates of transistors <b>182</b> and <b>184</b>, reinforcing the voltage at domino node <b>180</b>. A P-type transistor <b>192</b> is connected between a first reference voltage (V<b>1</b>) and domino node <b>180</b>. Transistor <b>192</b> is driven by a clock signal CLK to charge domino node <b>180</b> to high reference voltage (V<b>1</b>) when CLK goes low. For each entry in register file <b>100</b>, first and second N-type transistors <b>194</b> and <b>196</b>, respectively, provide a series connection between domino node <b>180</b> and a low reference voltage (V<b>2</b>). Entries i through n are shown in FIG. <b>1</b>B. For example, transistor <b>194</b>(<i>i</i>) is driven by a signal WL(i) from a corresponding word-line <b>150</b>(<i>i</i>). The voltage representing the state of the bit stored at node <b>170</b>(<i>i, j</i>) (DATA(i, j)) drives the gate of transistor <b>196</b>(<i>i, j</i>).</p><p>To read DATA(i, j), WL(i) is brought high, and the voltage at domino node <b>180</b> is read through bit-line <b>160</b>(<i>j</i>) when CLK goes high. If DATA is in a low voltage state (\u201clow\u201d), transistor <b>196</b>(<i>i, j</i>) prevents domino node <b>180</b> from discharging. When CLK subsequently goes low, there is no need to recharge domino node <b>180</b> If DATA is in a high voltage state (\u201chigh\u201d), transistor <b>196</b>(<i>i, j</i>) allows domino node <b>180</b> to discharge. When CLK subsequently goes low, domino node <b>180</b> is recharged through transistor <b>192</b>. Consequently, significantly more power is dissipated when DATA(i, j) is high than when it is low.</p><p>Referring again to FIG. 1A, each word-line <b>150</b> is driven by the output of an AND gate <b>154</b>, which is in turn driven by a clock signal CLK and an enable signal EN. When the corresponding read port is not in use, EN is driven low, signaling a power-down condition. This prevents CLK from toggling transistor <b>192</b> and eliminates the charging and discharging of node <b>180</b> associated with reading DATA when it is high. An alternative register file may disable word-lines <b>150</b>, which also prevents domino node <b>180</b> from discharging. In both cases, no power is dissipated as long as EN remains low.</p><p>One short-coming of this approach is that EN drives each word-line <b>150</b> or transistor <b>192</b>, so the load on EN increases as the number of entries <b>140</b> in register file <b>100</b> increases. This approach requires greater power to drive EN, and the loading on EN impacts an important speed path in the processor. For this reason, many processor designers forgo power reduction mechanisms on register files.</p><p>FIG. 2 is a block diagram of one embodiment of a register file <b>200</b> in accordance with the present invention. Register file <b>200</b> comprises a port <b>204</b> and a storage array <b>230</b>. Register file <b>200</b> typically includes multiple read and write ports, but only one port is shown to keep the figure clear. Additional read and write ports have structures similar to port <b>204</b> and operate in a similar manner.</p><p>Port <b>204</b> includes an address decoder <b>210</b>, a word-line driver <b>220</b> and a power control module <b>290</b>. For the disclosed embodiment of register file <b>200</b>, storage array <b>230</b> includes <b>128</b> entries <b>240</b>(<b>0</b>)-<b>240</b>(<b>127</b>), each of which is 64 bits wide and is activated by an associated word-line <b>250</b>(<b>0</b>)-<b>250</b>(<b>127</b>). A 64 bit operand may be read out of entry <b>240</b>(<i>i</i>) through bit-lines <b>260</b>(<b>0</b>)-<b>260</b>(<b>63</b>), when word-line <b>250</b>(<i>i</i>) is activated. An exemplary storage node <b>270</b>(<i>i, j</i>) is shown. Storage node <b>270</b>(<i>i, j</i>) is formed by the intersection of the i<sup>th </sup>word-line <b>250</b>(<i>i</i>) and bit-line <b>260</b>(<i>j</i>) stores the j<sup>th </sup>bit of entry <b>240</b>(<i>i</i>). Word-line <b>250</b>(<i>i</i>) is activated by word-line driver <b>220</b> when its corresponding register ID is applied to address decoder <b>210</b>.</p><p>Power control module <b>290</b> adjusts the address input to read port <b>204</b> when no valid address bits are available to drive it, e.g. when read port <b>204</b> is unused. For the disclosed embodiment of register file <b>200</b>, power control module <b>290</b> comprises N-type transistors <b>294</b>(<b>0</b>)-<b>294</b>(<b>7</b>) (collectively, \u201ctransistors <b>294</b>\u201d) which couple address lines <b>214</b>(<b>0</b>)-<b>214</b>(<b>7</b>), respectively, to a reference voltage. The gates of transistors <b>294</b> are driven by an enable signal, EN#, which is asserted low. When EN# is deasserted, i.e. driven to a high voltage state, transistors <b>294</b> short their corresponding address lines <b>214</b> to the reference voltage. For the disclosed embodiment of register file <b>200</b>, the reference voltage is ground.</p><p>For the disclosed embodiment of register file <b>200</b>, register entry <b>240</b>(<b>0</b>) stores a zero at each of its <b>64</b> nodes. This may be accomplished by \u201chardwiring\u201d the nodes of entry <b>240</b>(<b>0</b>) to a ground reference voltage. When register entry <b>240</b>(<b>0</b>) is selected by decoder <b>210</b> and word-line <b>250</b>(<b>0</b>) is driven to its read voltage state, no current is discharged since DATA is low for each storage node <b>270</b>(<b>0</b>, j). As discussed in conjunction with FIG. 1B, domino node <b>180</b> is not discharged when DATA is low, and consequently does not need to be recharged for the next read operation. Power dissipation in register file <b>200</b> is thus reduced by accessing register entry <b>240</b>(<b>0</b>) when no address is actively driven to read port <b>204</b>, i.e. when read port <b>204</b> is otherwise unused. For the disclosed embodiment, this is accomplished through power control module <b>290</b>, which drives address 0000000 to decoder <b>210</b> when EN is deasserted.</p><p>Persons skilled in the art will recognize modifications to the disclosed embodiment that fall within the spirit of the present invention. For example, an entry other than <b>240</b>(<b>0</b>) may be selected to store the reference value (zero) using a combination of N and P type transistors (and inverters) in control module <b>290</b> to produce the corresponding address. Similarly, if the storage nodes are implemented using complementary circuitry, the reference value with all bits high, i.e. (2<sup>64</sup>\u22121) in a 64-bit embodiment, reduces power consumption in unused read ports.</p><p>A single entry dedicated to a fixed value does not represent a significant reduction in the capacity of register file <b>200</b>, and some processors provide such an entry as a standard feature. For example, certain processors implement selected execution units as multiply-accumulate units (\u201cMACs\u201d). MACs are designed to implement the operation A*B+C efficiently. Here, operands A and B are multiplied together, and the product is incremented by operand C. Multiplication (C=0) and addition (A or B=1) are special cases of the basic MAC operation. Processors that employ MACs typically include register entries dedicated to the values 0 (for straight multiplication) and 1 (for straight addition) in the register files associated with the MACs. For example, the Merced processor has register entry <b>0</b> hardwired to zero and register entry 1 hardwired to one. For these processors, the dedicated register entry employed in embodiments of the present invention is already available.</p><p>FIG. 3 is a block diagram of one embodiment of a processor <b>300</b> that employs a register file <b>200</b> in accordance with the present invention. Processor <b>300</b> includes a fetch unit <b>310</b>, a decode/issue unit <b>320</b>, register file <b>200</b>, an L0 cache <b>350</b>, an L1 cache <b>360</b>, and first and second MACs <b>240</b>(<b>0</b>) and <b>240</b>(<b>2</b>). Also shown is a memory system <b>370</b> to provide data and instructions to processor <b>300</b>. L0 cache <b>250</b> and L1 cache <b>360</b>, which may be considered part of memory system <b>370</b>, are on the processor chip.</p><p>Fetch unit <b>310</b> retrieves one or more instructions from memory system <b>370</b> and provides the instruction(s) to decode/issue unit <b>320</b>. Decode/issue unit <b>320</b> decodes the instruction to determine the type of operation it represents and the operands on which the indicated operation is to be performed. These operands are typically specified through the register identifiers (IDs), which are logical identifiers that point to particular entries in an associated register file. Decode/issue unit <b>320</b> provides each register ID to a read port <b>204</b> of register file <b>200</b>, which accesses the requested operands and provides them to MACs <b>340</b>. Result operands generated by MACs <b>340</b> may be written back to register file <b>200</b> through write ports <b>208</b>.</p><p>In addition to MACs <b>340</b>, caches <b>350</b> and <b>360</b> may access register file <b>200</b> for read or write operations. For example, L1 cache <b>360</b> may write certain data to register file <b>200</b> to update one or more of its entries, and selected entries may be read to L0 cache <b>350</b> to, for example, free up space in register file <b>200</b> for new data.</p><p>It is evident from FIG. 3 that register file <b>200</b> provides multiple read and write ports to service the different resources that depend on it for data. For example, if decode/issue unit <b>320</b> issues two MAC instructions in a given clock cycle, data for the operation is accessed through six read ports <b>204</b> (FIG. <b>2</b>). However, if one or no MAC operations are issued, unused read ports <b>204</b> are available. If nothing is done, voltage values applied to the unused read ports do not represent valid addresses, and reading the entries associated with these addresses burns power unnecessarily.</p><p>To reduce power dissipation associated with reading non-zero bits from the register entries, power control module <b>290</b> (FIG. 2) asserts a selected address to register file <b>200</b> for each read port <b>204</b> that is not in use. For the disclosed embodiment, zero is hardwired into register entry <b>240</b>(<b>0</b>) and the register ID of this entry, 0000000, is driven to the address decoders of the unused read ports by power control module <b>290</b>. The number/identity of unused read ports may be signaled, for example, through an address-valid bit provided by fetch unit <b>310</b> or decode/issue unit <b>320</b>. The valid bit signals when a valid address is being asserted to the address decoder of register file <b>200</b>. For a six read port register file <b>200</b>, two MAC operations use all read ports when issued concurrently. Other combinations of instructions may use some subset of the 6 read ports, as indicated by associated valid bits, leaving a complementary subset of the read ports to be powered down. Power control unit <b>290</b> does this by driving 000000 to the address decoders of unused read ports, e.g. those for which the address-valid bit is not asserted. A load/store unit may also generate valid bits to enable/disable the read port during load operation.</p><p>Since entry 0 in the register file is hardwired to a logical 0, similar power-down operations can be implemented for write ports to avoid unnecessary toggling. The write address is driven to entry 0 when indicated by, e.g., a valid bit associated with write operations. Since entry 0 is hardwired to zero, writes to entry 0 are effectively ignored. In addition, no power is dissipated by the address decoder when the port is unused on successive cycles. The address asserted on the port is unchanged between clock cycles and the component logic does not toggle. This is true for both read and write ports that remain unused on consecutive clock cycles. For write ports, an enable signal may be derived from a valid bit generated during a write-back stage of the instruction pipeline. Similarly, store operations may generate the valid bits used to enable/disable write ports.</p><p>The present invention thus provides an efficient, low cost mechanism for reducing power consumption in register files. A selected entry of the register file stores a reference value such as zero, and the address of this selected entry is driven to the address decoder associated with each unused port of the register file. The reference value is chosen so that the voltage nodes that represent the reference value do not discharge any current when read. As a result, no pre-charge is necessary to restore the state of the node following the read event.</p><p>Persons skilled in the art of processor design and having the benefit of this disclosure will recognize variations and modifications of the disclosed embodiments that fall within the spirit and scope of the present invention.</p><?DETDESC description=\"Detailed Description\" end=\"tail\"?></description>"}], "inventors": [{"first_name": "Vivek", "last_name": "Joshi", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "INTEL CORPORATION"}, {"first_name": "", "last_name": "INTEL CORPORATION", "name": ""}], "ipc_classes": [{"primary": true, "label": "G06F   1/32"}], "locarno_classes": [], "ipcr_classes": [{"label": "G06F   1/32        20060101A I20051008RMUS"}], "national_classes": [{"primary": true, "label": "713324"}, {"primary": false, "label": "713300"}, {"primary": false, "label": "713322"}, {"primary": false, "label": "36523001"}], "ecla_classes": [{"label": "G06F   9/30R6"}, {"label": "G06F   1/32P1D"}], "cpc_classes": [{"label": "G06F   9/30141"}, {"label": "G06F   9/30141"}, {"label": "G06F   1/3228"}, {"label": "G06F   1/3228"}], "f_term_classes": [], "legal_status": "Expired - Lifetime", "priority_date": "1999-09-24", "application_date": "1999-09-24", "family_members": [{"ucid": "US-6564331-B1", "titles": [{"lang": "EN", "text": "Low power register file"}]}]}