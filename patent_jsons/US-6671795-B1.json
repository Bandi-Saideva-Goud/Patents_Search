{"patent_number": "US-6671795-B1", "publication_id": 73650452, "family_id": 23942534, "publication_date": "2003-12-30", "titles": [{"lang": "EN", "text": "Method and apparatus for pausing execution in a processor or the like"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA50599144\"><p>A method and apparatus for pausing execution of instructions from a thread is described. In one embodiment, a pause instruction is implemented as two instructions or microinstructions: a SET instruction and a READ instruction. When a SET flag is retrieved for a given thread, the SET instruction sets a Bit flag in memory indicating that execution for the thread has been paused. The SET instruction is placed in the pipeline for execution. The following READ instruction for that thread, however, is prevented from entering the pipeline until, the SET instruction is executed and retired (resulting in a clearing of the Bit flag). Once the Bit flag has been cleared, the READ instruction is placed in the pipeline for execution. During the time that processing of one thread is paused, the execution of other threads may continue.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00001\" num=\"1\"><claim-text>1. A method of pausing execution of instructions in a thread, comprising:</claim-text><claim-text>determining if a first instruction for a first thread is an instruction of a first type; </claim-text><claim-text>preventing instructions of said first thread from being processed for execution for a period of time if said first instruction is decoded to be of a first type while instructions from a second thread can be processed for execution; and </claim-text><claim-text>resuming execution of said first thread responsive to retirement of said first instruction. </claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00002\" num=\"2\"><claim-text>2. The method of <claim-ref idref=\"US-6671795-B1-CLM-00001\">claim 1</claim-ref> further comprising decoding said first instruction into a first microinstruction and a second microinstruction.</claim-text></claim>"}, {"num": 3, "parent": 2, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00003\" num=\"3\"><claim-text>3. The method of <claim-ref idref=\"US-6671795-B1-CLM-00002\">claim 2</claim-ref> wherein said first microinstruction causes a value to be stored in memory for said first thread.</claim-text></claim>"}, {"num": 4, "parent": 3, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00004\" num=\"4\"><claim-text>4. The method of <claim-ref idref=\"US-6671795-B1-CLM-00003\">claim 3</claim-ref> further comprising:</claim-text><claim-text>processing said second microinstruction for execution when said value stored in memory is reset. </claim-text></claim>"}, {"num": 5, "parent": 4, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00005\" num=\"5\"><claim-text>5. The method of <claim-ref idref=\"US-6671795-B1-CLM-00004\">claim 4</claim-ref> wherein said value stored in memory is reset when said first microinstruction is retired.</claim-text></claim>"}, {"num": 6, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00006\" num=\"6\"><claim-text>6. A method comprising:</claim-text><claim-text>determining if a first instruction for a first thread is an instruction of a first type; </claim-text><claim-text>initiating a counter upon decoding said instruction of said first type; and </claim-text><claim-text>preventing instructions of said first thread from being processed for execution until said counter reaches a predetermined value while instructions for a second thread are processed for execution. </claim-text></claim>"}, {"num": 7, "parent": 6, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00007\" num=\"7\"><claim-text>7. The method of <claim-ref idref=\"US-6671795-B1-CLM-00006\">claim 6</claim-ref> wherein said first instruction includes an operand and said initiating includes loading said counter with said operand.</claim-text></claim>"}, {"num": 8, "parent": 6, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00008\" num=\"8\"><claim-text>8. The method of <claim-ref idref=\"US-6671795-B1-CLM-00006\">claim 6</claim-ref> further comprising resuming processing for execution instructions of said first thread after said counter reaches said predetermined value.</claim-text></claim>"}, {"num": 9, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00009\" num=\"9\"><claim-text>9. A method comprising:</claim-text><claim-text>receiving a pause instruction from a first thread at a decode unit in a processor system; </claim-text><claim-text>preventing instructions of said first thread from being processed for execution for a period of time while instructions from a second thread can be processed for execution; and </claim-text><claim-text>resuming processing of said first thread for execution in response to retirement of said pause instruction. </claim-text></claim>"}, {"num": 10, "parent": 9, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00010\" num=\"10\"><claim-text>10. The method of <claim-ref idref=\"US-6671795-B1-CLM-00009\">claim 9</claim-ref> wherein execution of software code causes said pause instruction to be received at said decode unit.</claim-text></claim>"}, {"num": 11, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00011\" num=\"11\"><claim-text>11. An apparatus pausing execution of instructions in a thread, comprising:</claim-text><claim-text>a decode unit to determine if a first instruction for a first thread is an instruction of a first type, said decode unit to prevent instructions of said first thread from being processed for execution for a period of time while instructions from a second thread can be processed for execution, said decode unit further to cause resumption of processing instructions of said first thread in response to retirement of said first instruction. </claim-text></claim>"}, {"num": 12, "parent": 11, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00012\" num=\"12\"><claim-text>12. The apparatus of <claim-ref idref=\"US-6671795-B1-CLM-00011\">claim 11</claim-ref> wherein said first instruction comprises of a first microinstruction and a second microinstruction.</claim-text></claim>"}, {"num": 13, "parent": 12, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00013\" num=\"13\"><claim-text>13. The apparatus of <claim-ref idref=\"US-6671795-B1-CLM-00012\">claim 12</claim-ref> further comprising:</claim-text><claim-text>a memory, wherein said first microinstruction causes a value to be stored in memory for said first thread. </claim-text></claim>"}, {"num": 14, "parent": 13, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00014\" num=\"14\"><claim-text>14. The apparatus of <claim-ref idref=\"US-6671795-B1-CLM-00013\">claim 13</claim-ref> wherein said decode unit processes said second microinstruction for execution when said value stored in memory is reset.</claim-text></claim>"}, {"num": 15, "parent": 14, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00015\" num=\"15\"><claim-text>15. The apparatus of <claim-ref idref=\"US-6671795-B1-CLM-00014\">claim 14</claim-ref> further comprising:</claim-text><claim-text>a retire unit coupled to said decode unit wherein said retire unit causes said value stored in memory to be reset when said first microinstruction is retired by said retire unit. </claim-text></claim>"}, {"num": 16, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00016\" num=\"16\"><claim-text>16. An apparatus comprising:</claim-text><claim-text>a decode unit to determine if a first instruction for a first thread is an instruction of a first type; </claim-text><claim-text>a counter coupled to said decode unit, said counter to be initiated if said first instruction for said first thread is decoded to be an instruction of said first type, said decode unit to prevent instructions of said first thread from being processed for execution until said counter reaches a predetermined value; and </claim-text><claim-text>wherein instructions for a second thread can be processed for execution while instructions for execution while instructions of said first thread are prevented from being processed and wherein said decode unit resumes processing instructions of said first thread in response to said first instruction. </claim-text></claim>"}, {"num": 17, "parent": 16, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00017\" num=\"17\"><claim-text>17. The apparatus of <claim-ref idref=\"US-6671795-B1-CLM-00016\">claim 16</claim-ref> wherein said first instruction includes an operand to be loaded into said counter.</claim-text></claim>"}, {"num": 18, "parent": 16, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00018\" num=\"18\"><claim-text>18. The apparatus of <claim-ref idref=\"US-6671795-B1-CLM-00016\">claim 16</claim-ref> wherein said decode unit can continue to operate while said first thread is prevented from being processed.</claim-text></claim>"}, {"num": 19, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00019\" num=\"19\"><claim-text>19. An apparatus for reducing power consumption comprising:</claim-text><claim-text>a processor including </claim-text><claim-text>a decode unit to receive a first instruction from a first thread in said processor system, said decode unit to prevent instructions of said first thread from being processed for execution for a period of time in response to decoding of a first instruction of said first thread while instructions from a second thread can be processed for execution, and said decode unit further to resume allowing instructions of said first thread to be processed for execution in response to retirement of said first instruction. </claim-text></claim>"}, {"num": 20, "parent": 19, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00020\" num=\"20\"><claim-text>20. The apparatus of <claim-ref idref=\"US-6671795-B1-CLM-00019\">claim 19</claim-ref> wherein execution of software code at said processor causes said first instruction to be received at said decode unit.</claim-text></claim>"}, {"num": 21, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00021\" num=\"21\"><claim-text>21. A processor comprising:</claim-text><claim-text>a decode unit to receive a first instruction from a first thread and to cause said processor to suspend processing of instructions from said first thread for a period of time in response to decode of said first instruction, wherein said decode unit is able to process instructions from a second thread during said period, and said decode unit to resume processing instructions from said first thread in response to retirement of said first instruction. </claim-text></claim>"}, {"num": 22, "parent": 21, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00022\" num=\"22\"><claim-text>22. The processor of <claim-ref idref=\"US-6671795-B1-CLM-00021\">claim 21</claim-ref> wherein said decode unit is to allow instructions from said second thread to execute during said period.</claim-text></claim>"}, {"num": 23, "parent": 22, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00023\" num=\"23\"><claim-text>23. The processor of <claim-ref idref=\"US-6671795-B1-CLM-00022\">claim 22</claim-ref> wherein said decode unit is to suspend processing of instructions subsequent to said first instruction from said first thread during said period of time.</claim-text></claim>"}, {"num": 24, "parent": 23, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00024\" num=\"24\"><claim-text>24. The processor of <claim-ref idref=\"US-6671795-B1-CLM-00023\">claim 23</claim-ref> wherein said decode unit is to prevent execution of instructions from said first thread by preventing the dispatch of other instructions from said first thread until said first instruction is retired.</claim-text></claim>"}, {"num": 25, "parent": 21, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00025\" num=\"25\"><claim-text>25. The processor <claim-ref idref=\"US-6671795-B1-CLM-00021\">claim 21</claim-ref> wherein said period is a predetermined period of time.</claim-text></claim>"}, {"num": 26, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00026\" num=\"26\"><claim-text>26. A method comprising:</claim-text><claim-text>receiving instructions for a first thread; </claim-text><claim-text>decoding a first instruction from said first thread into a second instruction and a third instruction; </claim-text><claim-text>setting a flag to indicate presence of said second instruction; </claim-text><claim-text>sending said second instruction into a pipeline; </claim-text><claim-text>holding said third instruction from entering said pipeline if said flag is set, wherein said first thread is paused from being processed; </claim-text><claim-text>executing said second instruction; </claim-text><claim-text>resetting said flag upon retirement of said second instruction; and </claim-text><claim-text>releasing said third instruction into said pipeline after said flag is reset, wherein processing of said first thread is resumed. </claim-text></claim>"}, {"num": 27, "parent": 26, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00027\" num=\"27\"><claim-text>27. The method of <claim-ref idref=\"US-6671795-B1-CLM-00026\">claim 26</claim-ref> further comprising:</claim-text><claim-text>freeing processing resources to process a second thread while said first thread is paused; and </claim-text><claim-text>processing instructions of said second thread. </claim-text></claim>"}, {"num": 28, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00028\" num=\"28\"><claim-text>28. A method comprising:</claim-text><claim-text>decoding a first instruction from a first thread into a second instruction and a third instruction; </claim-text><claim-text>holding said third instruction from entering an instruction pipeline until said second instruction retires; </claim-text><claim-text>executing said second instruction; and </claim-text><claim-text>releasing said third instruction into said instruction pipeline. </claim-text></claim>"}, {"num": 29, "parent": 28, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00029\" num=\"29\"><claim-text>29. The method of <claim-ref idref=\"US-6671795-B1-CLM-00028\">claim 28</claim-ref> further comprising:</claim-text><claim-text>suspending processing of instructions from said first thread subsequent to said first instruction; </claim-text><claim-text>processing instructions from a second thread while said first thread is suspended; and </claim-text><claim-text>resuming processing of instructions from said first thread in response to retirement of said third instruction. </claim-text></claim>"}, {"num": 30, "parent": 29, "type": "dependent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00030\" num=\"30\"><claim-text>30. The method of <claim-ref idref=\"US-6671795-B1-CLM-00029\">claim 29</claim-ref> further comprising:</claim-text><claim-text>setting a flag to in response to said second instruction; and </claim-text><claim-text>resetting said flag in response upon retirement of said second instruction. </claim-text></claim>"}, {"num": 31, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00031\" num=\"31\"><claim-text>31. A method comprising:</claim-text><claim-text>loading a counter with a first value in response to decoding of a first instruction of a first thread; </claim-text><claim-text>pausing processing of said first thread, wherein instructions subsequent to said first instruction of said first thread are paused from entering a pipeline until said counter counts to a predetermined value; </claim-text><claim-text>processing a second thread while said first thread is paused; and </claim-text><claim-text>resuming processing of said first thread after said counter counts to said predetermined value. </claim-text></claim>"}, {"num": 32, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00032\" num=\"32\"><claim-text>32. The method of <b>31</b> wherein said first instruction includes an operand, said operand to be loaded into said counter as said first value.</claim-text></claim>"}, {"num": 33, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6671795-B1-CLM-00033\" num=\"33\"><claim-text>33. The method of <b>31</b> wherein said first value corresponds to a predetermined period of time.</claim-text></claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES54040362\"><?BRFSUM description=\"Brief Summary\" end=\"lead\"?><h4>FIELD OF THE INVENTION</h4><p>The present invention pertains to a method and apparatus for pausing execution in a processor or the like. More particularly, an embodiment of the present invention pertains to controlling the pausing of execution of one of a plurality of threads so as to give preference to another of the threads or to save power.</p><h4>BACKGROUND OF THE INVENTION</h4><p>As is known in the art, a processor includes a variety of sub-modules, each adapted to carry out specific tasks. In one known processor, these sub-modules include the following: an instruction cache, an instruction fetch unit for fetching appropriate instructions from the instruction cache; decode logic that decodes the instruction into a final or intermediate format, microoperation logic that converts intermediate instructions into a final format for execution; and an execution unit that executes final format instructions (either from the decode logic in some examples or from the microoperation logic in others).</p><p>Under operation of a clock, the execution unit of the processor system executes successive instructions that are presented to it. As is known in the art, an instruction may be provided to the execution unit which results in no significant task performance for the processor system. For example, in the Intel\u00ae X86 processor systems, a NOP (No Operation) instruction causes the execution unit to take no action for an \u201cinstruction cycle.\u201d An instruction cycle as used herein is a set number of processor clock cycles that are needed for the processor to execute an instruction. In effect, the NOP instruction stalls the processor for one instruction cycle.</p><p>A limitation of the NOP instruction is that it stalls the processor for a set unit of time. Thus, using one or more NOP instructions, the processor can only be stalled for an amount of time equal to a whole number multiple of instruction cycles.</p><p>Another limitation of the NOP instruction is that the execution unit of the processor is unable to perform any other instruction execution. For example, instructions to be executed by the execution unit may be divided into two or more \u201cthreads.\u201d Each thread is a set of instructions to achieve a given task. Thus, if one of the threads includes a NOP instruction, this instruction is executed by the execution unit and stalls the entire processor (i.e., execution of the other thread cannot be done during the execution of the NOP instruction).</p><p>In view of the above, there is a need for an improved method and apparatus for pausing processor execution that avoids these limitations.</p><h4>SUMMARY OF THE INVENTION</h4><p>According to an embodiment of the present invention, a method of pausing execution of instructions in a thread is presented. First it is determined if a next instruction for a first thread is an instruction of a first type. If it is then instruction of the first thread are prevented from being processed for execution while instruction from a second thread can be processed for execution.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTIONS OF THE DRAWINGS</h4><p>FIG. 1 is a block diagram of a portion of a processor employing an embodiment of the present invention.</p><p>FIG. 2 is a flow diagram showing an embodiment of a method according to an embodiment of the present invention.</p><p>FIG. 3 is a block diagram of a portion of a processor employing an additional embodiment of the present invention.</p><p>FIG. 4 is a flow diagram showing an additional embodiment of a method according to an embodiment of the present invention.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>DETAILED DESCRIPTION</h4><p>A Referring to FIG. 1, an example of a portion of a processor system <b>10</b> employing an embodiment of the present invention is shown. In this embodiment, the processor is a multi-threaded processor where the execution is theoretically divided into two or more logical processors. As used herein, the term \u201cthread\u201d refers to an instruction code sequence. For example, in a video phone application, the processor may be called upon to execute code to handle video image data as well as audio data. There may be separate code sequences whose execution is designed to handle each of these data types. Thus, a first thread may include instructions for video image data processing and a second thread may be instructions for audio data processing. In this example, there is a single execution unit (out of order execution unit <b>31</b>), which may execute one instruction at a time. The processor system <b>10</b>, however, may be treated as two logical processors, a first logical processor executing instructions from the first thread (Thread <b>0</b>) and a second logical processor executing instructions from the second thread (Thread <b>1</b>).</p><p>In this embodiment of the processor system <b>10</b>, instructions are fetched by a fetch unit <b>11</b> and supplied to a queue <b>13</b> and stored as part of the thread <b>0</b> queue or the thread <b>1</b> queue. One skilled in the art will appreciate that the queues used in processor system <b>10</b> may be used to store more than two threads. Instructions from the two threads are supplied to a mulitplexer (MUX) <b>15</b>, and control logic <b>17</b> is used to control whether instructions from thread <b>0</b> or thread <b>1</b> are supplied to a decode unit <b>21</b>. Decode unit <b>21</b> may convert an instruction into two or more microinstructions and supplies the instructions to queue <b>23</b>. The outputs of queue <b>23</b> are supplied to a MUX which supplies instruction from thread <b>0</b> or thread <b>1</b> to a rename/allocation unit <b>27</b> based on operation of control logic <b>26</b>. The rename/allocation unit <b>27</b>, in turn, supplies instructions to queue <b>28</b>. MUX <b>29</b> selects between the thread <b>0</b> queue and the thread <b>1</b> queue based on the operation of schedule control logic <b>30</b>, which also receives the same inputs as MUX <b>29</b>. The output of MUX <b>29</b> is supplied to an execution unit <b>31</b> which executes the instruction. The instruction is then placed in queue <b>33</b>. The outputs of queue <b>33</b> are supplied to a MUX <b>34</b> which sends instruction from thread <b>0</b> and thread <b>1</b> to a retire unit <b>36</b> based on the operation of control logic <b>35</b>.</p><p>According to a first embodiment of the present invention, a pause instruction is used to suspend processing of instructions from a thread. In FIG. 1, the pause instruction is fetched by fetch unit <b>11</b> and stored in the thread <b>0</b> queue, in this example. The output of the thread <b>0</b> queue is supplied via MUX <b>15</b> to decode unit <b>21</b> which decodes the pause instruction into two microinstructions: a SET instruction and a READ instruction. At the decode unit <b>21</b>, a SET instruction causes a value to be stored in memory (e.g., a bit flag <b>19</b>) indicating that a SET instruction has been received for a particular thread (thread <b>0</b> in this example). The SET instruction is then fed into the \u201cpipeline\u201d which includes rename/allocation unit <b>27</b> and execution unit <b>31</b> and the associated queues in this embodiment. Execution unit <b>31</b> takes no action on the SET instruction (i.e., treats it as the known NOP instruction). Once the SET instruction is retired by retire unit <b>26</b>, the flag <b>19</b> is reset.</p><p>The READ instruction at decode unit <b>21</b> is not placed into the pipeline until the flag <b>19</b> is reset. Accordingly, if there are instructions from thread <b>1</b> in queue <b>13</b>, these instructions can be decoded by decode unit <b>21</b> and placed into the pipeline. Thus, depending on the number of thread <b>1</b> instructions in queues <b>23</b>, <b>28</b> and <b>33</b>, will affect how long the execution of thread <b>0</b> is paused (i.e., the greater number of thread <b>1</b> instructions in the pipeline, the longer it will take the SET instruction to reach retire unit <b>36</b>). Once the flag <b>19</b> is reset, the READ instruction is sent to queue <b>23</b> and is eventually sent to execution unit <b>31</b>. As with the SET instruction, execution unit takes no action as with a NOP instruction. In this embodiment of the present invention, decode unit <b>21</b> alternates decoding of instructions from thread <b>0</b> and thread <b>1</b>. After a SET instruction for thread <b>0</b>, for example, the decode alternates between decoding instructions from thread <b>1</b> and checking the value of flag <b>19</b> until it is reset.</p><p>An example of the operation of decode unit <b>21</b> in this embodiment is shown in FIG. <b>2</b>. After decoding, in block <b>40</b>, the instruction from the next thread is determined. In decision block <b>41</b>, it is determined whether the instruction is a SET instruction. If it is, then control passes to block <b>43</b> where the bit flag in memory is set. In block <b>47</b>, the SET instruction is placed into the pipeline for the execution unit. Control then returns to block <b>40</b> to determine the next instruction from the next thread. If the instruction is not a SET instruction, control passes to decision block <b>45</b> to determine if the instruction is a READ instruction. If it is, then control passes to decision block <b>49</b> to determine if the appropriate bit flag in memory is set. If the bit flag in memory is set, then control passes to block <b>51</b> where the instruction is held back from the pipeline (thus, temporarily blocking execution of instructions from that particular thread). Control then shifts to block <b>40</b> to determine the next instruction from the next thread. If the bit flag is not set (decision block <b>49</b>), then control passes to block <b>53</b> where the instruction (in this case the READ instruction) is placed into the pipeline for execution. As stated above, the bit flag is reset in this embodiment when the SET instruction is retired. Control then returns to block <b>40</b> to determine the next instruction from the next thread. Likewise, if the instruction is neither a SET instruction nor a READ instruction, it is placed into the pipeline for execution in a normal manner.</p><p>As seen from the above, the SET instruction works to effect a pause in execution for that thread until the instruction is retired. This is because the following READ instruction is not placed into the pipeline until the SET instruction is retired effectively blocking execution of the following instructions from that thread. During the pause of one thread, instructions from that thread are prevented from being processed for execution (e.g., placed into the pipeline, sent to the execution unit, etc.) while instructions from another thread can be processed for execution. When execution of a thread is paused, overall power consumption for the processing system may be reduced.</p><p>According to another embodiment of the present invention, a pause instruction is implemented with a timer or counter. As shown in FIG. 3, the memory flag <b>19</b> of FIG. 1 is replaced by a counter <b>39</b>. As a first example, when decode unit <b>21</b> determines that the next instruction from a first thread is a pause instruction (i.e., an instruction having a particular bit format), then a predetermined value is loaded into counter <b>39</b>. In this example, counter <b>39</b> counts down from the predetermined value to zero. While counter <b>39</b> counts down to zero, instructions from the second thread (e.g., thread <b>1</b>) are decoded and loaded into the pipeline. In this example, decode unit <b>21</b> alternates between checking the value of counter <b>39</b> (instead of decoding instructions from thread <b>0</b>) and decoding instructions from thread <b>1</b>. Once the counter has finished (e.g., reached zero), the next instruction from that thread can be loaded into the pipeline. As a second example, the pause instruction will include an operand (i.e., a value to be loaded into the timer). Accordingly, this allows decode unit <b>21</b> to load the operand value into counter <b>39</b> so that the length of time for the pause instruction can be set.</p><p>An example of the operation of the processing system of FIG. 3 is shown in FIG. <b>4</b>. In decision block <b>60</b> it is determined if the counter has reached a predetermined value for the current thread. If no counter has been set or if the value has reached the predetermined value (e.g., zero), then control passes to block <b>61</b> to determine the next instruction for the current thread. If this instruction is a pause instruction (decision block <b>63</b>), then control passes to decision block <b>65</b> to determine whether an operand is associated with the pause instruction. If an operand is associated with the pause instruction, then control passes to block <b>67</b> to load the value into the counter (control then passes to block <b>73</b> to change to the next thread). If an operand is not associated with the pause instruction, then control passes to block <b>71</b> to load a predetermined value into the counter (again control then passes to block <b>73</b> to change to the next thread). If in decision block <b>63</b>, the instruction is not a pause instruction, then control passes to block <b>69</b> to load the instruction into the pipeline.</p><p>According to an embodiment of the present invention, the use of the pause instruction can be an indication by the operating system that the processing system hardware can go into a low-power mode. Thus, execution of operating system code (or any other software code) at the processor system may cause a pause instruction to be forward to the decode unit. As described above, pausing execution of a thread may lead to a decrease in overall power consumption. In response to decoding a pause instruction, the processing system <b>10</b> may take other steps to lower overall power consumption further as desired.</p><p>Although several embodiments are specifically illustrated and described herein, it will be appreciated that modifications and variations of the present invention are covered by the above teachings and within the purview of the appended claims without departing from the spirit and intended scope of the invention.</p><?DETDESC description=\"Detailed Description\" end=\"tail\"?></description>"}], "inventors": [{"first_name": "Deborah T.", "last_name": "Marr", "name": ""}, {"first_name": "Dion", "last_name": "Rodgers", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "INTEL CORPORATION"}, {"first_name": "", "last_name": "INTEL CORPORATION", "name": ""}], "ipc_classes": [{"primary": true, "label": "G06F   9/48"}], "locarno_classes": [], "ipcr_classes": [{"label": "G06F   9/46        20060101A I20051008RMEP"}, {"label": "G06F   9/38        20060101A I20051008RMEP"}, {"label": "G06F   9/30        20060101A I20051008RMEP"}], "national_classes": [{"primary": true, "label": "712220"}, {"primary": false, "label": "712228"}, {"primary": false, "label": "712244"}, {"primary": false, "label": "712E09053"}, {"primary": false, "label": "712E09032"}, {"primary": false, "label": "712E09063"}, {"primary": false, "label": "718107"}], "ecla_classes": [{"label": "G06F   9/30A8P"}, {"label": "G06F   9/30A8S"}, {"label": "G06F   9/30A8T"}, {"label": "G06F   9/52"}, {"label": "G06F   9/38E4"}, {"label": "G06F   9/38P2"}], "cpc_classes": [{"label": "G06F   9/3869"}, {"label": "G06F   9/3009"}, {"label": "G06F   9/30083"}, {"label": "G06F   9/3851"}, {"label": "G06F   9/30087"}, {"label": "G06F   9/52"}], "f_term_classes": [], "legal_status": "Expired - Lifetime", "priority_date": "2000-01-21", "application_date": "2000-01-21", "family_members": [{"ucid": "DE-60109748-D1", "titles": [{"lang": "EN", "text": "METHOD AND DEVICE FOR EXECUTION INTERRUPTION IN A PROCESSOR"}, {"lang": "DE", "text": "VERFAHREN UND GER\u00c4T ZUR AUSF\u00dcHRUNGSUNTERBRECHUNG IN EINEM PROZESSOR"}]}, {"ucid": "AU-2001229506-A1", "titles": [{"lang": "EN", "text": "Method and apparatus for pausing execution in a processor"}]}, {"ucid": "DE-60109748-T2", "titles": [{"lang": "EN", "text": "METHOD AND DEVICE FOR EXECUTION INTERRUPTION IN A PROCESSOR"}, {"lang": "DE", "text": "VERFAHREN UND GER\u00c4T ZUR AUSF\u00dcHRUNGSUNTERBRECHUNG IN EINEM PROZESSOR"}]}, {"ucid": "AU-2950601-A", "titles": []}, {"ucid": "EP-1256054-B1", "titles": [{"lang": "FR", "text": "PROCEDE ET APPAREIL D'INTERRUPTION PROVISOIRE D'EXECUTION DANS UN PROCESSEUR"}, {"lang": "EN", "text": "METHOD AND APPARATUS FOR PAUSING EXECUTION IN A PROCESSOR"}, {"lang": "DE", "text": "VERFAHREN UND GER\u00c4T ZUR AUSF\u00dcHRUNGSUNTERBRECHUNG IN EINEM PROZESSOR"}]}, {"ucid": "EP-1256054-A1", "titles": [{"lang": "FR", "text": "PROCEDE ET APPAREIL D'INTERRUPTION PROVISOIRE D'EXECUTION DANS UN PROCESSEUR"}, {"lang": "EN", "text": "METHOD AND APPARATUS FOR PAUSING EXECUTION IN A PROCESSOR"}, {"lang": "DE", "text": "VERFAHREN UND GER\u00c4T ZUR AUSF\u00dcHRUNGSUNTERBRECHUNG IN EINEM PROZESSOR"}]}, {"ucid": "CN-102346689-B", "titles": [{"lang": "EN", "text": "Method and apparatus for pausing execution in a processor"}, {"lang": "ZH", "text": "\u7528\u4e8e\u6682\u505c\u5904\u7406\u5668\u4e2d\u6267\u884c\u8fc7\u7a0b\u7684\u65b9\u6cd5\u548c\u88c5\u7f6e"}]}, {"ucid": "EP-1522917-A2", "titles": [{"lang": "DE", "text": "Verfahren und Vorrichtung zur Unterbrechung von Befehlsausf\u00fchrungen in einem Prozessor"}, {"lang": "EN", "text": "Method and apparatus for pausing execution in a processor"}, {"lang": "FR", "text": "Proc\u00e9d\u00e9 et appareil d'interruption provisoire d'ex\u00e9cution dans un processeur"}]}, {"ucid": "US-6671795-B1", "titles": [{"lang": "EN", "text": "Method and apparatus for pausing execution in a processor or the like"}]}, {"ucid": "US-20040117604-A1", "titles": [{"lang": "EN", "text": "Method and apparatus for pausing execution in a processor or the like"}]}, {"ucid": "EP-1522917-A3", "titles": [{"lang": "FR", "text": "Proc\u00e9d\u00e9 et appareil d'interruption provisoire d'ex\u00e9cution dans un processeur"}, {"lang": "EN", "text": "Method and apparatus for pausing execution in a processor"}, {"lang": "DE", "text": "Verfahren und Vorrichtung zur Unterbrechung von Befehlsausf\u00fchrungen in einem Prozessor"}]}, {"ucid": "DE-60143230-D1", "titles": [{"lang": "DE", "text": "Verfahren und Vorrichtung zur Unterbrechung von Befehlsausf\u00fchrungen in einem Prozessor"}, {"lang": "EN", "text": "Method and apparatus for interrupting instruction execution in a processor"}]}, {"ucid": "CN-102346689-A", "titles": [{"lang": "EN", "text": "Method and apparatus for pausing execution in a processor"}, {"lang": "ZH", "text": "\u7528\u4e8e\u6682\u505c\u5904\u7406\u5668\u4e2d\u6267\u884c\u8fc7\u7a0b\u7684\u65b9\u6cd5\u548c\u88c5\u7f6e"}]}, {"ucid": "RU-2002122402-A", "titles": [{"lang": "RU", "text": "\u0421\u041f\u041e\u0421\u041e\u0411 \u0418 \u0423\u0421\u0422\u0420\u041e\u0419\u0421\u0422\u0412\u041e \u0414\u041b\u042f \u041f\u0420\u0418\u041e\u0421\u0422\u0410\u041d\u041e\u0412\u041a\u0418 \u0420\u0415\u0416\u0418\u041c\u0410 \u0412\u042b\u041f\u041e\u041b\u041d\u0415\u041d\u0418\u042f \u0412 \u041f\u0420\u041e\u0426\u0415\u0421\u0421\u041e\u0420\u0415"}, {"lang": "EN", "text": "METHOD AND DEVICE FOR SUSPENDING PERFORMANCE MODE IN THE PROCESSOR"}]}, {"ucid": "RU-2271035-C2", "titles": [{"lang": "EN", "text": "METHOD AND DEVICE FOR PAUSING EXECUTION MODE IN A PROCESSOR"}, {"lang": "RU", "text": "\u0421\u041f\u041e\u0421\u041e\u0411 \u0418 \u0423\u0421\u0422\u0420\u041e\u0419\u0421\u0422\u0412\u041e \u0414\u041b\u042f \u041f\u0420\u0418\u041e\u0421\u0422\u0410\u041d\u041e\u0412\u041a\u0418 \u0420\u0415\u0416\u0418\u041c\u0410 \u0412\u042b\u041f\u041e\u041b\u041d\u0415\u041d\u0418\u042f \u0412 \u041f\u0420\u041e\u0426\u0415\u0421\u0421\u041e\u0420\u0415"}]}, {"ucid": "EP-1522917-B1", "titles": [{"lang": "FR", "text": "Proc\u00e9d\u00e9 et appareil d'interruption provisoire d'ex\u00e9cution dans un processeur"}, {"lang": "EN", "text": "Method and apparatus for pausing execution in a processor"}, {"lang": "DE", "text": "Verfahren und Vorrichtung zur Unterbrechung von Befehlsausf\u00fchrungen in einem Prozessor"}]}, {"ucid": "CN-1426553-A", "titles": [{"lang": "EN", "text": "Method and apparatus for pausing execution in processor"}, {"lang": "ZH", "text": "\u7528\u4e8e\u6682\u505c\u5904\u7406\u5668\u4e2d\u6267\u884c\u8fc7\u7a0b\u7684\u65b9\u6cd5\u548c\u88c5\u7f6e"}]}, {"ucid": "CN-1426553-B", "titles": [{"lang": "EN", "text": "Method and apparatus for pausing execution in processor"}, {"lang": "ZH", "text": "\u7528\u4e8e\u6682\u505c\u5904\u7406\u5668\u4e2d\u6267\u884c\u8fc7\u7a0b\u7684\u65b9\u6cd5\u548c\u88c5\u7f6e"}]}, {"ucid": "US-7451296-B2", "titles": [{"lang": "EN", "text": "Method and apparatus for pausing execution in a processor or the like"}]}, {"ucid": "WO-2001053935-A1", "titles": [{"lang": "EN", "text": "METHOD AND APPARATUS FOR PAUSING EXECUTION IN A PROCESSOR"}, {"lang": "FR", "text": "PROCEDE ET APPAREIL D'INTERRUPTION PROVISOIRE D'EXECUTION DANS UN PROCESSEUR"}]}]}