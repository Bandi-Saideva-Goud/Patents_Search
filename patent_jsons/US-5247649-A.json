{"patent_number": "US-5247649-A", "publication_id": 70714406, "family_id": 26448838, "publication_date": "1993-09-21", "titles": [{"lang": "EN", "text": "Multi-processor system having a multi-port cache memory"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA37256761\"><p>A multi-port cache memory of multi-port memory structure is connected to and shared with a plurality of processors. The multi-port cache memory may have two sets of interface signal lines, for instruction fetch and for data read/write, to each processor. The multi-port cache memory may also be used only for data read/write. The system performance is further improved if a plurality of processors and a multi-port cache memory are fabricated on a single LSI chip.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"1\"><claim-text>1. A multi-processor system comprising:<claim-text>a plurality of processors, each having a set of address/data interface signal lines; and</claim-text><claim-text>a multi-port cache memory shared by said plurality of processors, said cache memory having a plurality of ports, each port being connected to a set of address/data interface signal lines of a respective one of said plurality of processors, and said cache memory also having a plurality of memory cells each being connected to all of said ports and being accessed by all of said plurality of processors by way of said sets of address/data interface signal lines, thereby allowing a read/write operation of each of said memory cells by all of said plurality of processors.</claim-text></claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"2\"><claim-text>2. A multi-processor system according to claim 1, wherein said plurality of processors and said multi-port cache memory are fabricated on a single LSI chip.</claim-text></claim>"}, {"num": 3, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"3\"><claim-text>3. A multi-processor system comprising:<claim-text>a plurality of processors, each having a first set of address/data interface signal lines for instruction fetch and a second set of address/data interface signal lines for operand fetch;</claim-text><claim-text>a plurality of instruction cache memories for storing instructions, each of said instruction cache memories being connected to a respective one of said first set of address/data interface lines of said plurality of processors; and</claim-text><claim-text>a data cache memory shared by said plurality of processors, said data cache memory having a plurality of ports, each port being connected to a second set of address/data interface signal lines of a respective one of said plurality of processors, and said data cache memory also having a plurality of memory cells each being accessed by said plurality of processors by way of said second sets of address/data interface signal lines, thereby allowing a read/write operation of each of said memory cells by said plurality of processors in common.</claim-text></claim-text></claim>"}, {"num": 4, "parent": 3, "type": "dependent", "paragraph_markup": "<claim num=\"4\"><claim-text>4. A multi-processor system according to claim 3, wherein said plurality of processors and said multi-port cache memory are fabricated on a single LSI chip.</claim-text></claim>"}, {"num": 5, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"5\"><claim-text>5. A multi-processor system comprising:<claim-text>a plurality of processors, each having a first set of address/data interface signal lines for instruction fetch and a second set of address/data interface signal lines for operand fetch; and</claim-text><claim-text>a multi-port cache memory shared by said plurality of processors, said cache memory having a plurality of ports, each port being connected to a first set of address/data interface signal lines and a second set of address/data interface signal lines of a respective one of said plurality of processors, and said cache memory also having a plurality of memory cells each being connected to all of said ports and being accessed by said plurality of processors by way of said first and second sets of address/data interface signal lines, thereby allowing a read/write operation of each of said memory cells by plural processors independently of each other between instruction fetch and operand fetch.</claim-text></claim-text></claim>"}, {"num": 6, "parent": 5, "type": "dependent", "paragraph_markup": "<claim num=\"6\"><claim-text>6. A multi-processor system according to claim 5, wherein said plurality of processors and said multi-port cache memory are fabricated on a single LSI chip.</claim-text></claim>"}, {"num": 7, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"7\"><claim-text>7. A multi-processor system comprising:<claim-text>a plurality of processors, each processor having a set of address lines and data lines; and</claim-text><claim-text>a single multi-port cache memory connected to said processors via said sets of address lines and data lines, and having a plurality of memory cells, a plurality of address decoders equal to the number of said processors for addressing said memory cells and a plurality of read/write data lines equal to the number of said processors;</claim-text><claim-text>wherein each of said address decoders is connected to a respective set of address lines of said plurality of processors; each of said read/write data lines is connected to a set of data lines of a respective one of said plurality of processors; and each of said memory cells is provided with a set of gate means, each gate means being connected to a respective one of said read/write data lines and being on-off controlled by a respective one of said address decoders so as to selectively connect that memory cell to one of said read/write data lines.</claim-text></claim-text></claim>"}, {"num": 8, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"8\"><claim-text>8. A multi-processor system comprising:<claim-text>a plurality of processors, each having a first set of address lines and data lines for instruction fetch, and a second set of address lines and data lines for operand fetch; and</claim-text><claim-text>a single multi-port cache memory having a first set of ports and a second set of ports connected to said first set of address lines and data lines and second set of address lines and data lines, respectively, and also having a plurality of memory cells, a number of address decoders equal to the number of said processors for each set of ports and a number of read/write data lines equal to the number of said processors for each set of ports;</claim-text><claim-text>wherein each of said address decoders is connected to a respective set of address lines of said plurality of processors for each set of ports;</claim-text><claim-text>each of said read/write data lines being connected to a set of data lines of a respective one of said plurality of processors for each set of ports;</claim-text><claim-text>each of said memory cells being addressed by said address decoders for each set of ports; and</claim-text><claim-text>each of said memory cells for each port being provided with a set of gate means, each gate means being connected to a respective one of said read/write data lines and being on-off controlled by one of said address decoders so as to selectively connect that memory cell to one of said read/write data lines.</claim-text></claim-text></claim>"}, {"num": 9, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"9\"><claim-text>9. A multi-processor system comprising:<claim-text>a plurality of processors, each having a first set of address lines and data lines for instruction fetch, and a second set of address lines and data lines for operand fetch;</claim-text><claim-text>a plurality of instruction cache memories for storing instructions, each of said instruction cache memories being connected to each first set of address lines and data lines of said plurality of processors; and</claim-text><claim-text>a data multi-port cache memory connected to said processors via said second sets of address lines and data lines, and having a plurality of memory cells, a number of address decoders equal to the number of said processors and a number of read/write data lines equal to the number of said processors;</claim-text><claim-text>wherein each of said address decoders is connected to a respective second set of address lines of said plurality of processors;</claim-text><claim-text>each of said read/write data lines is connected to a respective second set of data lines of said plurality of processors;</claim-text><claim-text>each of said memory cells is addressed by said address decoders; and</claim-text><claim-text>each of said memory cells is provided with a set of gate means, each gate means being connected to a respective one of said read/write data lines and being on-off controlled by one of said address decoders so as to selectively connect that memory cell to one of said read/write data lines.</claim-text></claim-text></claim>"}, {"num": 10, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"10\"><claim-text>10. A multi-processor system comprising:<claim-text>a plurality of processors, each having a set of address/data interface signal lines; and</claim-text><claim-text>a single multi-port cache memory for storing a portion of data stored in a main memory and having a number of cells and a plurality of ports each accessible to all of said number of cells, each port being connected to a set of address/data interface signal lines of a respective one of said plurality of processors.</claim-text></claim-text></claim>"}, {"num": 11, "parent": 10, "type": "dependent", "paragraph_markup": "<claim num=\"11\"><claim-text>11. A multi-processor system according to claim 10, wherein each of said cells of said cache memory is connected to all of said ports.</claim-text></claim>"}, {"num": 12, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"12\"><claim-text>12. A multi-processor system comprising:<claim-text>a plurality of processors, each having a first set of address/data interface signal lines for instruction fetch and a second set of address/data interface signal lines for operand fetch; and</claim-text><claim-text>a single multi-port cache memory for storing both instructions and operand data, said single cache memory having a number of cells and a plurality of ports each accessible to all of said number of cells, each port being connected to a first set of address/data interface signal lines and a second set of address/data interface signal lines of a respective one of said plurality of processors.</claim-text></claim-text></claim>"}, {"num": 13, "parent": 12, "type": "dependent", "paragraph_markup": "<claim num=\"13\"><claim-text>13. A multi-processor system according to claim 12, wherein each of said cells of said cache memory is connected to all of said ports.</claim-text></claim>"}, {"num": 14, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"14\"><claim-text>14. A multi-processor system comprising:<claim-text>a plurality of processors, each having a first set of address lines and data lines for instruction fetch and a second set of address lines and data lines for operand fetch;</claim-text><claim-text>a plurality of instruction cache memories for storing instructions, each of said instruction cache memories being connected to each first set of address/data interface signal lines of said plurality of processors; and</claim-text><claim-text>a single multi-port cache memory having a plurality of ports, each port being connected to a second set of address lines and data lines of a respective one of said plurality of processors.</claim-text></claim-text></claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES66339862\"><?RELAPP description=\"Other Patent Relations\" end=\"lead\"?><p>This application is a continuation of Ser. No. 347,222, filed May 4, 1989, now abandoned.</p><?RELAPP description=\"Other Patent Relations\" end=\"tail\"?><?BRFSUM description=\"Brief Summary\" end=\"lead\"?><h4>BACKGROUND OF THE INVENTION</h4><p>The present invention relates to a multi-processor system, and more particularly to a multi-processor system having a multi-port cache memory which is shared with a plurality of processors.</p><p>A multi-processor system using a plurality of microprocessors is now being developed extensively. For example, there is disclosed in JP-A-56-127261 a system having a plurality of processors connected via busses, each processor having its own cache memory in order to attain high performance and reduce bus traffic. Prior to accessing main memory in this system, each processor first accesses its associated cache memory, and only when a miss occurs, the main memory is accessed via a bus.</p><p>The problem associated with such a system concerns the coherence control of cache memories. The coherence control is effected so as to make the contents of cache memories of all processors always coincident with each other. In the system of the above-referenced JP-A-56-127261, a write-through type cache memory system is used wherein, when data is written in a cache memory and the main memory, the write address thereof is supplied to the other cache memories so that the contents of the other cache memories at the same address are made invalid.</p><p>Use of such write-through type cache memories results in a high frequency of write operations into the main memory. In order to further reduce the write operation frequency, algorithms using write-back type cache memories, more improved write-once type cache memories, or the like have been developed. The details of these algorithms are discussed in James R. Goodman \"USING CACHE MEMORY TO REDUCE PROCESSOR--MEMORY TRAFFIC\", The 10th Annual International Symposium on COMPUTER ARCHITECTURE, Vol. 11, No. 3, Jun., 13-17, 1983.</p><p>Cache memories of the above-described types are suitable for those systems executing parallel processings of coarse grain units, such as task or process units. However, parallel processings of fine grain units such as subroutines or modules are associated with a problem that data to be shared with processors become large. A larger amount of shared data results in frequent invalidations of data in cache memories upon a data write operation into the main memory, and in a low hit rate at each cache memory.</p><p>The above system configurations have been realized aiming at reducing signal lines for linkage among processors each provided in one LSI chip. However, these configurations will not become optimum if a plurality of processors are fabricated in one LSI chip by employing an ultra very LSI technology.</p><h4>SUMMARY OF THE INVENTION</h4><p>It is therefore an object of the present invention to provide a multi-processor system having a cache memory suitable for parallel processing of smaller data by each processor.</p><p>With the above object of this invention, the system performance is not degraded even if write operations for shared data are frequently carried out.</p><p>It is another object of the present invention to provide a multi-processor system suitable for use with an ultra very LSI chip in which a plurality of processors can be fabricated.</p><p>The structural aspect of the present invention resides in that a plurality of processors and a multi-port cache memory are fabricated in a single LSI chip. A multi-port cache memory is constructed of a single data storage area and a plurality of data read/write ports. Therefore, all processors refer to the same data stored in the memory, with immediate reflection of a write operation by any one of the processors. Contrary to this, a conventional system uses a plurality of cache memories so that if one of the processors writes data in an associated cache memory, the corresponding contents of the cache memories of the other processors should be made invalid, hence degrading the system performance. The present invention can overcome such disadvantages.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4><p>FIG. 1 is a schematic block diagram showing an embodiment of a multi-processor system according to the present invention;</p><p>FIG. 2 is a schematic diagram showing an example of a multi-port memory;</p><p>FIG. 3 is a timing chart illustrating the operation of the multi-port memory shown in FIG. 2;</p><p>FIG. 4 is a circuit diagram showing an example of the circuit arrangement of a multi-port memory;</p><p>FIG. 5 is a schematic block diagram showing an embodiment of a cache memory using a multi-port cache memory;</p><p>FIG. 6 shows the functions of LINK;</p><p>FIG. 7 is a schematic block diagram showing a second embodiment of the multi-processor system using a multi-port cache memory according to the present invention; and</p><p>FIG. 8 is a schematic block diagram showing a third embodiment of the multi-processor system using a multi-port cache memory according to the present invention.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>DESCRIPTION OF THE PREFERRED EMBODIMENTS</h4><p>The configuration of a multi-processor system of this invention is shown in FIG. 1. A plurality of processors P0 to Pn (3-0 to 3-n) are fabricated in a single LSI chip 8 and use in common a multi-port cache memory 2. The operation of the cache memory 2 is the same as that of a general cache memory. Namely, if a memory access by a processor is a hit, then data in the cache memory is accessed. Alternatively, in the case of a mishit, the main memory is accessed, and the data is stored in the cache memory and also sent back to the processor.</p><p>As shown in FIG. 1, a multi-port memory is used as cache memory. FIG. 2 shows the structure of a multi-port memory. The multi-port memory has interface signals constituted by a plurality of sets of address signals A0 to An (each set is constructed of a plurality of address lines), a plurality of sets of input data signals DI0 to DIn (each set is constructed of a plurality of data lines), a plurality of sets of output data signals DO0 to DOn (each set is constructed of a plurality of data lines) and control signals (not shown) such as a write enable signal. Thus, the multi-port cache memory 2 is considered as an independent memory as seen from each processor. Specifically, processor P0 can write data from DI0 in the memory and read data in the memory via DO0 at designated address A0.</p><p>Data read/write operations at respective ports are carried out synchronously with each other, the timings of which are shown in FIG. 3. If a plurality of processors access data at the same address, the same data is read and supplied to the processors. If read and write operations are designated at the same address A, data D0 at the address is first read and thereafter, new data DI is written at the address. If a plurality of write operations are designated at the same address, the write operations are executed in the order of higher priority among the addresses A0 to An under control of a priority control circuit.</p><p>The circuit arrangement of a multi-port memory is shown in FIG. 4. Information is stored in a memory cell indicated at 9-i, 9-j.</p><p>In a data read operation, gates 14-0 to 14-n and gates 15-0 to 15-n are closed since all lines WRITE 0-n are disabled. In the case of an access from address A0 for example, address A0 is decoded at a decoder DECO 18-0 and gates 10-i-0 and 11-i-0 are opened so that information in the memory cell 9-i is read out onto bit lines 12-0 and 13-0 which are then amplified at a sense amplifier SA0 17-0 and outputted from port D00.</p><p>Similarly, in the case of an access from address Al, information is outputted via a sense amplifier SAl from port DOl, and in the case of an access from address An, information is outputted via a sense amplifier SAn from port DOn.</p><p>In a data write operation, data from DI0 is applied to a gate 14-0, and after inversion at an inverter 16 to a gate 15-0. Upon reception of a write signal WRITE 0, the gates 14-0 and 15-0 are opened so that data of opposite polarities are transferred onto bit lines 12-0 and 13-0 and written into a memory cell 9-i via gates 10-i-0 and 11-i-0. 10-i-0 and 11-i-0.</p><p>If read and write operations are designated for the same memory cell, e.g., if a read operation is designated by address A0 and a write operation is designated by address Al, data in first read from the memory cell and applied to sense amplifier SA0 and thereafter, write signal WRITE 1 becomes true to open gates 14-0 and 15-0 and conduct a write operation.</p><p>The structure of a cache memory 2 using multi-port memories is shown in FIG. 5. An address to access the cache memory 2 from a processor is designated by PADDR. This cache memory is of a set associative type. The field \u03b1 in PADDR represents an address in an address block in the cache memory 2, and a column address of the cache memory 2 is represented by \u03b2 field in PADDR.</p><p>A directory (which may be called \"tag\") DIR 20 stores therein the contents indicating which data of the address blocks are stored in the cache memory 2. DATA 22 is an area for storing cache data. The \u03b2 field within PADDR sent from a processor is used for access to DIR 20. The access result is compared with the \u03b3 field within PADDR at 23. The contents corresponding in number to the number of sets are read from DIR 20. If any one of the read-out contents has the same value as \u03b3, it means that the access is a hit. Bits V 21 indicate whether the entries of DIR 20 are valid or invalid. The contents corresponding in number to the number of sets are also read from DATA 22 using the \u03b2 field within PADDR as their address. Data corresponding to the hit set are selected by a selector SEL 24 and sent via a selector 25 to the processor as data DATAOUT.</p><p>If the cache memory is not hit, address fields \u03b3 and \u03b2 are transferred via a selector 26 to the main memory. In writing data into the main memory, data DATAIN supplied from a processor is written in DATA 22 of the cache memory 2 via a selector 27, and also in a store buffer 28 and then into the main memory via a selector 29. In this embodiment, a store-through type cache memory is used.</p><p>In FIG. 5, reference numerals with an asterisk represent interfaces with other processors. Namely, the \u03b3 fields from other processors (hereinafter indicated by \u03b3' field) are supplied to *1' and the \u03b2 fields within PADDR from other processors (hereinafter indicated by \u03b2' field) are supplied to *2. The corresponding read-out contents are represented by *3 which are compared with \u03b3'. If they are coincident with each other, the accesses are considered as hits so that the read-out data *6 is selected. \u03b2' and Y' from other processors are inputted to *4. Outputs from store buffers of other processors are supplied to *7. The output of the selector 27 of other processors is supplied to *5.</p><p>Multi-port memories are used for DIR 20, V21 and DATA 22 so that a plurality of processors can access the cache memory 2 at the same time.</p><p>FIG. 6 shows the functions of LINK which is a device for interconnecting processors constituting a multi-processor system.</p><p>There are three interruption functions, i.e., an interruption while designating the number of a processor, an interruption while broadcasting to ALL processors, and an interruption allowing ANYONE of processors to accept.</p><p>Control functions include various operations so as to efficiently execute parallel processings. They are a WAIT control for waiting for a start signal from another processor, a START control for releasing the WAIT control, and other controls. The START control can be executed while designating an execution start address.</p><p>A lock function is used for subjecting the cache memory to a Test and Set operation and a Compare and Swap operation. In the Compare and Swap operation, data in the memory is read and the value of read-out data is checked, and then a data write operation to the memory may be carried out in accordance with the check result. During the Compare and Swap operation by a processor, it is necessary that other processors not to execute the Compare and Swap operation at the same address.</p><p>For this reason, prior to executing a Compare and Swap operation, each processor sends a Compare and Swap execution request to LINK. If the request is acknowledged, then the Compare and Swap operation is executed and thereafter the request is cancelled. If a plurality of requests are sent from processors, LINK allows only one request to be executed.</p><p>The multi processor system using a multi-processor-on-chip having a plurality of processors, a multi-port cache memory and LINK has been described above. Use of this multi-port cache memory allows a system high performance not realized in a conventional system having frequent invalidations and performance degradation in preserving coherence.</p><p>FIG. 7 shows a modification of a multi-port cache memory. A recent high performance processor controls instruction execution by using a multi-stage pipeline. A typical example of dividing an instruction execution includes an instruction fetch (IF), decode (D), address translation (A), operand fetch (OF) and execution (E). Memory access is carried out two times, i.e. at the instruction fetch cycle and operand fetch cycle. In executing the two cycles in parallel, two sets of interfaces are required for a multi-port cache memory. FIG. 7 shows the system configuration for such use. Two sets of interfaces 6A-0 and 6B-0, respectively for instruction/operand fetch (data read/write), are used instead of one set 6-0 shown in FIG. 1.</p><p>FIG. 8 shows another modification of a multi-port cache memory, wherein each processor has its own cache memory for instructions, and a multi-port cache memory shared with all processors is used only for operands. The reason for this is that an instruction generally involves pure procedure, and so, there is no need for rewriting it; thus, there is no need of using a multi-port cache memory for instructions.</p><p>A multi-port cache memory has a number of writings and a large area as compared with its memory capacity. Therefore, a multi-port cache memory is less cost effective than a single port cache memory. The system configuration shown in FIG. 8 accordingly has a multi-port cache memory which is used only for minimum necessary data.</p><?DETDESC description=\"Detailed Description\" end=\"tail\"?></description>"}], "inventors": [{"first_name": "Tadaaki", "last_name": "Bandoh", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "HITACHI, LTD."}], "ipc_classes": [{"primary": true, "label": "G06F  12/08"}, {"primary": false, "label": "G11C   7/00"}, {"primary": false, "label": "G06F  13/00"}], "locarno_classes": [], "ipcr_classes": [{"label": "G06F  12/08        20060101A I20051008RMUS"}], "national_classes": [{"primary": true, "label": "711130"}, {"primary": false, "label": "711E12048"}, {"primary": false, "label": "711E12038"}, {"primary": false, "label": "3650491"}, {"primary": false, "label": "711131"}, {"primary": false, "label": "36523005"}], "ecla_classes": [{"label": "G06F  12/08B6N"}, {"label": "G06F  12/08B4S"}], "cpc_classes": [{"label": "G06F  12/084"}, {"label": "G06F  12/084"}, {"label": "G06F  12/0853"}, {"label": "G06F  12/0853"}], "f_term_classes": [], "legal_status": "Expired - Fee Related", "priority_date": "1988-05-06", "application_date": "1992-08-24", "family_members": [{"ucid": "US-5247649-A", "titles": [{"lang": "EN", "text": "Multi-processor system having a multi-port cache memory"}]}]}