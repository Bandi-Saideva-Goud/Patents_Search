{"patent_number": "US-6496919-B1", "publication_id": 73256938, "family_id": 11877080, "publication_date": "2002-12-17", "titles": [{"lang": "EN", "text": "Data processor"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA50424274\"><p>A data processor which includes a first processor for executing a first instruction set and a second processor for executing a second instruction set different from the first instruction set. When the first processor executes a predetermined instruction of the first instruction set the second processor executes an instruction of the second instructions set. The first processor may be a reduced instruction set computer (RISC) type processor, the second processor may be a very long instruction word (VLIW) type processor, the first instruction set may be a RISC instruction set and the second instruction set may be a VLIW instruction set. The predetermined instruction of the RISC instruction set executed by the first processor may be a branch instruction causing a branch to a specific address space at which VLIW instructions are stored. Thereafter, the VLIW instructions at the specific address space are executed by the VLIW type processor.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6496919-B1-CLM-00001\" num=\"1\"><claim-text>1. A data processing system comprising:</claim-text><claim-text>a bus; </claim-text><claim-text>a Read Only Memory (ROM), connected to said bus, for storing a program; </claim-text><claim-text>a Random Access Memory (RAM), connected to said bus, for storing data; </claim-text><claim-text>a data processor for executing said program stored in said ROM; and </claim-text><claim-text>at least one peripheral device connected to said bus, </claim-text><claim-text>wherein said data processor comprises: </claim-text><claim-text>a first core for executing an instruction of a first program, a table for storing instructions of a second program, a second core for executing an instruction of the second program, and a start decision unit for controlling operation switching between said first core and said second core, </claim-text><claim-text>wherein when said first core executes a subroutine call or a branch instruction out of instructions of the first program, an instruction of the second program is read from said table by use of a branch destination address, operation is transferred by said start decision unit from said first core to said second core, and said second core is caused to operate until an instruction completion code is read from said table, and </claim-text><claim-text>a circuit for examining whether an operation of the instruction of the second program executed subsequent to a branch to the instruction of the second program is relevant to an operation of the instruction of the first program which is restored after the execution of the instruction of the second program, said data processor being capable of executing the instruction of the first program at the restoring destination in parallel without waiting for the completion of the instruction of the second program when no relevance exists. </claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6496919-B1-CLM-00002\" num=\"2\"><claim-text>2. A data processing system according to <claim-ref idref=\"US-6496919-B1-CLM-00001\">claim 1</claim-ref>, wherein an instruction of said program has a variable length, whereas an instruction of said second program has a fixed length.</claim-text></claim>"}, {"num": 3, "parent": 2, "type": "dependent", "paragraph_markup": "<claim id=\"US-6496919-B1-CLM-00003\" num=\"3\"><claim-text>3. A data processing system according to <claim-ref idref=\"US-6496919-B1-CLM-00002\">claim 2</claim-ref>, wherein a maximum length of an instruction of said first program is greater than a length of an instruction of said second program.</claim-text></claim>"}, {"num": 4, "parent": 2, "type": "dependent", "paragraph_markup": "<claim id=\"US-6496919-B1-CLM-00004\" num=\"4\"><claim-text>4. A data processing system according to <claim-ref idref=\"US-6496919-B1-CLM-00002\">claim 2</claim-ref>, wherein a maximum length of an instruction of said first program is shorter than a length of an instruction of said second.</claim-text></claim>"}, {"num": 5, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6496919-B1-CLM-00005\" num=\"5\"><claim-text>5. A data processing system according to <claim-ref idref=\"US-6496919-B1-CLM-00001\">claim 1</claim-ref>, wherein an instruction of said first program and an instruction of said second program each have a fixed length.</claim-text></claim>"}, {"num": 6, "parent": 5, "type": "dependent", "paragraph_markup": "<claim id=\"US-6496919-B1-CLM-00006\" num=\"6\"><claim-text>6. A data processing system according to <claim-ref idref=\"US-6496919-B1-CLM-00005\">claim 5</claim-ref>, wherein a length of an instruction of said first program is shorter than a length of an instruction of said second program.</claim-text></claim>"}, {"num": 7, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6496919-B1-CLM-00007\" num=\"7\"><claim-text>7. A data processing system according to <claim-ref idref=\"US-6496919-B1-CLM-00001\">claim 1</claim-ref>, wherein said first and second programs are separately arranged</claim-text></claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES53683800\"><?RELAPP description=\"Other Patent Relations\" end=\"lead\"?><p>This is a continuation of application Ser. No. 08/791,811, now U.S. Pat. No. 6,023,757, filed Jan. 30, 1997.</p><?RELAPP description=\"Other Patent Relations\" end=\"tail\"?><?BRFSUM description=\"Brief Summary\" end=\"lead\"?><h4>BACKGROUND OF THE INVENTION</h4><p>The present invention relates to a data processor such as a microprocessor or a microcomputer. More particularly the present invention relates to a method and apparatus for use in a data processor to cause the data processor to attain high-speed performance while maintaining software compatibility.</p><p>There are varieties of architectures for microprocessors. For example, there are microprocessors of CISC (Complexed Instruction Set Computer), RISC (Reduced Instruction Set Computer) and VLIW (Very Long Instruction Word) (or LIW (Long Instruction Word)) types to name a few.</p><p>With, for example, 8 or 16 bits as a minimum instruction length unit, the CISC type microprocessor forms an instruction system (an instruction set) with a variable-length instruction format of integral multiples of the minimum instruction length unit. In this case, a maximum instruction length ranges from 48 bits to 64, 80 bits and so forth. Due to microprogrammed control with a large number of instructions constituting an instruction set and due to the fact that a plurality of processes are performed by one instruction and the instruction length is variable, the amount of required hardware is large, so that the architecture is said to have a drawback in seeking high-speed performance. Motorola's 680X0 and Intel's 80X86 are typical examples of the CISC type microprocessor.</p><p>A key to attaining such high-speed performance, the RISC type microprocessor has been introduced. The RISC type microprocessor forms an instruction system with an instruction format of fixed 16-bit, 32-bit or 64-bit length wherein a simple process is performed by one instruction, whereby a relatively small number of instructions constitute the instruction system. Since the instruction is simple, the amount of required hardware of the control unit of the microprocessor is smaller than that of the CISC type microprocessor. Therefore this architecture is fit for pipeline processing and relatively easy to attain high-speed performance. An instruction format with a mixture of 16- and 32-bit length instructions constitutes the instruction system in some cases. Sun Microsystems' SPARC and MIPS Technologies' MIPS (e.g., R3000) are typical examples of the RISC processor.</p><p>In order to meet a growing demand for increasing operating speed, there has recently been employed a method of increasing the number of arithmetic units to be simultaneously operated in addition to the method of improving the operating frequency. The system for simultaneously operating a plurality of arithmetic units is called a superscalar system. However, the superscalar system needs the function of examining whether a plurality of instructions can simultaneously be executed, that is, the function of the instruction dependency and therefore the circuit scale tends to increase.</p><p>The VLIW type processor is a processor forming an instruction system with an instruction format of long instruction length though fixed length. In such a VLIW processor, a plurality of computing units are simultaneously operated by means of an instruction of 128 bits or longer. The number of computing units (the number of processing instructions executable in parallel) to be simultaneously operated is greater than that of the superscalar system. In the VLIW type processor, instruction dependency is checked beforehand at the time of compiling the source program and simultaneously executable instructions are combined into one instruction. When the number of simultaneously executable instructions does not reach the maximum number of simultaneously executable instructions, a NOP (No-operation) instruction is inserted by a compiler. The circuit scale of the VLIW type processor is smaller than that of the superscalar system of the RISC type microprocessor because the instruction dependency need not be checked at the time of execution of the VLIW type processor. Trace ce/300 of multiflow Computer Co. carried in Nikkei Electronics of Nov. 27, 1989 (No. 487), pp 196-197 is a typical example of the VLIW type processor.</p><p>The adoption of the RISC type architecture, for example, has improved operating frequency and increased the number of simultaneously executable instructions, thus resulting in improved performance of microprocessors. It has therefore been planned to use software for compression/expansion (MPEG (Moving Picture Experts Group) decoder/encoder) of moving pictures and three-dimensional graphic processing that have heretofore been done by using dedicated hardware or controllers.</p><p>The VLIW type microprocessor is thought to be fit for a processing for multimedia use dealing with a large quantity of data by repeating the same process including MPEG decoder/encoder and three-dimensional graphic processing.</p><p>A typical conventional microprocessor or a CPU (Central Processing Unit) is of a CISC or RISC type and possesses an accumulation of software assets. Microprocessors of the CISC, RISC and VLIW types each have different instruction sets, instruction formats, addressing modes, programming modes and the like; that is, no software compatibility exits.</p><p>There are limitations to improvement in the performance of a microprocessor having one of the above-described with the same architectures (including the instruction system). Thus, in order to improve performance the architecture of the microprocessor must be altered. However, altering the architecture of the microprocessor causes the problem to arise of compatibility with the accumulated software assets.</p><h4>SUMMARY OF THE INVENTION</h4><p>An object of the present invention is to provide a high-performance processor capable of executing software using a new architecture (instruction system) while maintaining compatibility with conventional software.</p><p>Another object of the present invention is to provide a high-performance processor capable of jointly processing or using resources in the processor such as arithmetic units so as to prevent an increase in the amount of required hardware.</p><p>Still another object of the present invention is to realize high-speed operation and low power consumption through a processor-to-processor operation control system.</p><p>The present invention provides a data processor which includes a first processor for executing a first instruction set and a second processor for executing a second instruction set different from the first instruction set and when the first processor executes a predetermined instruction of the first instruction set, the second processor executes an instruction of the second instruction set.</p><p>The data processor executes a program stored in a memory unit. The program includes a first program having instructions of a first instruction set and a second program having instructions of a second instruction set different from the first instruction set. The first and second programs are arranged in an address space of the data processor.</p><p>An instruction of the first instruction set has a variable length, whereas an instruction of the second instruction set has a fixed length. The maximum word length of an instruction of the first instruction set may be greater than the word length of an instruction of the second instruction set. The maximum word length of an instruction of the first instruction set may be shorter than the word length of an instruction of the second instruction set.</p><p>An instruction of the first instruction set and an instruction of the second instruction set may have a fixed length. The word length of an instruction of the first instruction set may be shorter than the word length of an instruction of the second instruction set.</p><p>The data processor includes a first data processing unit which has a plurality of computing units and is used for reading an instruction from a first memory which stores a first group of instructions and executing the instruction, a second data processing unit which has a plurality of computing units capable of parallel operation and is used for executing instructions simultaneously executable as one instruction, and a second memory for storing a group of instructions which the second data processing unit executes. When the instruction read by the first data processing unit is a predetermined instruction, an instruction to be executed by the second data processing unit is read from the second memory.</p><p>The present invention further provides a microprocessor which includes a RISC core for executing RISC instruction, a VLIW table for storing VLIW instructions, a VLIW core for executing a VLIW instruction, and a VLIW start decision unit for controlling operation switching between the RISC core and the VLIW core. When the RISC core executes a subroutine call or a branch instruction out of RISC instructions, a VLIW instruction is read from the VLIW table by use of a branch destination address and operation is transferred by the VLIW start decision unit from the RISC core to the VLIW core, whereby the VLIW instruction is caused to operate until a VLIW core completion code is read from the VLIW table.</p><p>The microprocessor further includes an address translation table translation-lookaside-buffer (TLB) for subjecting the branch destination address to address translation so that a signal for expanding the VLIW instruction read from the VLIW table may be read from the TLB simultaneously when the address translation is conducted.</p><p>The microprocessor even further includes a circuit for examining whether the operation of the VLIW instruction executed subsequent to a branch to the VLIW instruction is relevant to the operation of the RISC instruction which is restored after the execution of the VLIW instruction. The microprocessor is capable of executing the RISC instruction at the restoring destination in parallel without waiting for the completion of the VLIW instruction when no relevance exists.</p><p>The microprocessor includes a register for prohibiting and controlling the execution of the VLIW instruction in the processor and a function of lowering power consumption by causing a branch to a string of RISC instructions performing an operation equivalent to the VLIW instruction at the time the execution of the VLIW instruction is prohibited so as to suspend the operation of the VLIW core.</p><p>A non-volatile memory has a built-in VLIW table. The non-volatile memory is preferably one of a masked ROM, a flash memory and a ferroelectric memory. A volatile memory has a built-in VLIW table. The volatile memory of the VLIW table is preferably either SRAM or DRAM. A memory rewritable with the processor of the RISC core preferably has a built-in VLIW table.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4><p>The present invention will be more apparent from the following detailed description, when taken in conjunction with the accompanying drawings, in which:</p><p>FIG. 1 is a block diagram of a microprocessor embodying the present invention;</p><p>FIG. 2 is a block diagram of a modified microprocessor in reference to FIG. 1;</p><p>FIG. 3 is a detailed illustration of the VLIW start theory of the microprocessor in FIGS. 1 and 2;</p><p>FIG. 4 is a detailed illustration of the VLIW start theory when a translation table in a translation-lookaside-buffer (TLB) is used for the microprocessor in FIGS. 1 and 2;</p><p>FIGS. 5A and 5B illustrate an example of pipeline configuration and instruction codes when the VLIW instruction is executed;</p><p>FIG. 6 is a general view of a system utilizing a microprocessor according to the present invention;</p><p>FIG. 7 is a block diagram of a one-chip processor;</p><p>FIG. 8 is a block diagram of a microcomputer as another embodiment of the present invention; and</p><p>FIG. 9 is a memory map of the microcomputer of FIG. <b>8</b>.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</h4><p>Embodiment 1</p><p>FIG. 1 is a block diagram of a microprocessor <b>100</b> embodying the present invention. The microprocessor <b>100</b> includes a RISC core section <b>106</b> where processing of RISC instructions is performed, a VLIW core section <b>140</b> where processing of VLIW instructions is performed and a data cache <b>129</b>. The technology of manufacturing semiconductor integrated circuits is used to form the microprocessor <b>100</b> on one semiconductor substrate of single crystal silicon and the resin molding technique is used for the packaging of the semiconductor substrate by so-called plastic packaging. A RISC instruction is, for example, an instruction to be executed by the RISC type microprocessor described above, whereas a VLIW instruction is, for example, an instruction to be executed by the VLIW type microprocessor described above.</p><p>The RISC core section <b>106</b> includes an instruction fetch unit <b>101</b>, an instruction cache <b>107</b>, a RISC instruction decode unit <b>114</b>, a floating-point arithmetic unit <b>118</b>, an integer arithmetic unit <b>119</b> and a RISC load/store unit <b>127</b>. The floating-point unit <b>118</b> is an arithmetic unit specifically dealing with floating-point data and also performing operations on the floating-point data. The integer arithmetic unit <b>119</b> is an arithmetic unit specifically dealing with integer data and also performing operations on the integer data.</p><p>The VLIW core section <b>140</b> includes a VLIW start decision unit <b>104</b>, a VLIW table <b>113</b>, a VLIW instruction decode unit <b>115</b>, N pieces of arithmetic units <b>120</b> and a VLIW load/store unit <b>131</b>.</p><p>The instruction fetch unit <b>101</b> transfers the address of an instruction to be executed to an instruction address bus <b>105</b>. When a RISC instruction is executed, an instruction corresponding to an address of the instruction address bus <b>105</b> is read from the instruction cache <b>107</b> to an instruction bus <b>108</b> and the RISC instruction is decoded by the RISC instruction decode unit <b>114</b>. When an applicable instruction is absent (cache miss) in the instruction cache <b>107</b>, an address bus <b>134</b> and a data bus <b>135</b> are used to read an instruction from a memory outside the microprocessor via a bus controller (not shown). The decoded result in the RISC decode unit <b>114</b> is used to control the floating-point arithmetic unit <b>118</b>, the integer arithmetic unit <b>119</b> and the like through a RISC arithmetic unit control signal <b>117</b>. Access to the arithmetic units <b>120</b> may occur because the arithmetic units <b>120</b> of the VLIW core and the integer arithmetic unit <b>119</b> as well as the floating-point arithmetic unit <b>118</b> of the RISC core are jointly owned as shown in FIG. <b>1</b>.</p><p>In a case where the instruction is a memory access instruction, moreover, access to not only the RISC load/store unit <b>127</b> but also the data cache <b>129</b> occurs via an address bus <b>126</b>, so that data is stored in the registers of the integer arithmetic unit <b>119</b> and the floating-point arithmetic unit <b>118</b> via a data bus <b>128</b> and a data bus <b>121</b> for RISC. When applicable data is absent (cache miss) in the data cache <b>129</b>, an address bus <b>139</b> and a data bus <b>138</b> are used to provide access to the memory outside the microprocessor via the bus controller.</p><p>When there occurs a branch instruction (part of the RISC instruction) for executing the VLIW instruction while the RISC instruction is executed, the instruction fetch unit <b>101</b> is notified by the RISC instruction decode unit <b>114</b> through a VLIW branch instruction decode signal <b>142</b> that the branch instruction has been given. A signal branch destination address is transmitted via a branch destination address bus <b>136</b>. In a case where the branch destination address is stored in the register of a register file, it is transferred from the integer arithmetic unit <b>119</b> via a branch destination address bus <b>141</b> to the RISC instruction decode unit <b>114</b>. The VLIW table <b>113</b> is allocated to a specific address space of the memory space of the RISC core and the VLIW instruction stored in the VLIW table <b>113</b> is made accessible by gaining access to the address space, whereby the VLIW instruction from the VLIW table <b>113</b> can be read and rewritten.</p><p>On receiving the notification of the branch instruction through the VLIW branch instruction decode signal <b>142</b>, the instruction fetch unit <b>101</b> notifies the fact that a branch to a VLIW instruction has occurred to the VLIW start decision unit <b>104</b> through the VLIW instruction branch signal <b>103</b>. The VLIW start decision unit <b>104</b> decides the condition of activating the VLIW instruction and makes the RISC instruction decode unit <b>114</b> suspend the execution of the instruction that is read with the address on the instruction address bus <b>105</b> through a RISC core control signal <b>109</b>. The clock of the whole or part of the RISC core <b>106</b> may be stopped so as to reduce power consumption when designated by the register in the RISC instruction decode unit <b>114</b> or the VLIW instruction decode unit <b>115</b>. Even when the VLIW instruction is not executed, the clock of the whole or part of the VLIW core may also be stopped likewise.</p><p>The address of the instruction address bus <b>105</b> is used to read the VLIW instruction from the VLIW table <b>113</b> to a VLIW instruction bus <b>112</b>. The VLIW instruction decode unit <b>115</b> decodes the VLIW instruction on the VLIW instruction bus <b>112</b> on the basis of the activating condition transferred from the VLIW start decision unit <b>104</b> through a VLIW instruction decode start signal <b>111</b>, and individually controls the arithmetic units <b>120</b> or the integer arithmetic unit <b>119</b> and floating-point arithmetic unit <b>118</b> of the RISC core section <b>106</b> in parallel through a VLIW arithmetic unit control signal <b>116</b>. The arithmetic units <b>120</b> include an integer arithmetic unit, a floating-point arithmetic unit, a DSP (Digital Signal Processor: e.g., product. sum computation) dealing with fixed-point data and the like. FIG. 1 shows an example of a local register file type processor when arithmetic units each have their own register files. A transfer of data between arithmetic units is conducted through a computing unit-to-computing unit data bus <b>123</b>. When the memory access instruction is contained in the VLIW instruction, the VLIW load/store unit <b>131</b> has access to the data cache <b>129</b> via an address bus <b>125</b>, a data bus <b>130</b> and a data bus <b>124</b> for VLIW.</p><p>When VLIW instructions are continuously given, the address information held in the VLIW start decision unit <b>104</b> via the instruction address bus <b>105</b> is used for the VLIW instruction to be read from the VLIW table <b>113</b> through an address on an instruction address bus <b>132</b> and a VLIW table control signal <b>133</b>. When the VLIW instruction thus read contains a completion code indicative of the final instruction, the VLIW start decision unit <b>104</b> is notified by the VLIW instruction decode unit <b>115</b> through a VLIW instruction running state signal <b>110</b> that a string of VLIW instructions has been completed. The VLIW instruction running state signal <b>110</b> also outputs information which affects the execution of the VLIW instruction such as interruption, exception and the like in addition to the completion of the VLIW instruction. On admitting the completion of the VLIW instruction string, the VLIW start decision unit <b>104</b> communicates the completion of the VLIW instruction through a VLIW instruction completion signal <b>102</b> and the RISC core control signal <b>109</b> to the instruction fetch unit <b>101</b> and the RISC instruction decode unit <b>114</b>, and returns to the RISC instruction.</p><p>More specifically, the RISC core section <b>106</b> is used for the execution of a RISC instruction, whereas the VLIW core section <b>140</b> is used for the execution of a VLIW instruction. The execution of instructions in the VLIW core section <b>140</b> is carried out by making the VLIW start decision unit <b>104</b> successively read VLIW instructions from the VLIW table <b>113</b> that the VLIW start decision unit <b>104</b> holds within the microprocessor, with the branch instruction to the VLIW instruction newly added to the RISC instruction or specific address branching as a trigger. After the VLIW instruction is executed, the processing is restored to the RISC instruction string. In other words, VLIW instructions to be executed are dealt with like a subroutine, whereby the processing which needs high-speed action can be executed under the VLIW instruction by storing the instructions in the VLIW table <b>113</b>. Use of instructions thus reduced to a subroutine makes it possible to maintain compatibility by arranging a string of RISC instructions acting like VLIW instructions at a branch destination even in the case of a microprocessor having no VLIW circuitry.</p><p>In a case where action of low power consumption is needed and no high-speed action using the VLIW instruction is needed, the operation of only the RISC core section <b>106</b> may be relied upon while the operation of the VLIW core section <b>140</b> is suspended, depending on the state of the built-in control register. Conversely in a case where the operation of the RISC core section <b>106</b> is not needed, the operation of only the VLIW core section <b>140</b> may be relied upon while the operation of the RISC core section <b>106</b> is suspended.</p><p>It is possible to use resources in common because the computing units (including register files) of the VLIW core section <b>140</b> are usable while the RISC instruction is executed and because the computing units (including register files) of the RISC core section <b>140</b> are usable while the VLIW instruction is executed. Therefore, the chip area of a semiconductor integrated circuit becomes reducible.</p><p>The VLIW start decision unit <b>104</b> decides, on the basis of the decoded result obtained through a control signal <b>137</b>, whether the VLIW instruction which is being executed is dependent on the RISC instruction as a destination to which the VLIW instruction returns after the VLIW instruction has completely been executed. In the absence of such dependency, selection of control of parallel execution of the RISC and VLIW instructions is possible through the VLIW instruction completion signal <b>102</b> and the RISC core control signal <b>109</b>.</p><p>For the VLIW table <b>113</b>, use can be made of a non-volatile memory such as a masked ROM to be programmed during the process of manufacturing semiconductors, an EPROM (electrically writable ultraviolet ray erasable non-volatile memory), an EEPROM (electrically erasable/writable non-volatile memory), a flash memory (flash EEPROM) and a ferroelectric memory; and a volatile memory such as a DRAM (Dynamic RAM) and an SPRAM (Static RAM). When a rewritable memory, for example, an EEPROM, a flash memory, a ferroelectric memory, a DRAM and a SRAM is employed, the VLIW table <b>113</b> corresponding to the system may be set via a VLIW table data bus <b>122</b>, whereby the VLIW table <b>113</b> is made dynamically most suitable for the system during the operation of the microprocessor <b>100</b>. The VLIW table data bus <b>122</b> is also used to provide access to the register in the VLIW start decision unit <b>104</b>. If SRAM is employed for the VLIW table <b>113</b>, writing and reading can be carried out at higher speed as compared with the use of any other memory. Since the memory element of DRAM is composed of one transistor while the memory element of SRAM is composed of four to six transistors, a VLIW table using DRAM can be made smaller than when using SRAM. Although the ferroelectric memory is a non-volatile memory, write time can be made substantially equal to read time. Therefore, the use of such a ferroelectric memory makes the rewriting of the VLIW table <b>113</b> as quick as that of DRAM.</p><p>Modified Embodiment 1</p><p>FIG. 2 shows a modified example of the microprocessor of FIG. <b>1</b>. What is shown in FIG. 2 is a global register type microprocessor having the registers of the RISC and VLIW cores <b>106</b>, <b>140</b> in common, wherein like reference characters designate like component parts of the microprocessor of FIG. <b>1</b>. The technology of manufacturing semiconductor integrated circuits is used to form a microprocessor <b>200</b> on one semiconductor substrate of single crystal silicon and the resin molding technique is used for the packaging of the semiconductor substrate by so-called plastic packaging.</p><p>In the microprocessor <b>200</b>, a register file <b>201</b> is used for read/write operations from and to the floating-point arithmetic unit <b>118</b>, the integer arithmetic unit <b>119</b> and the arithmetic units <b>120</b> via a bus <b>202</b> between the arithmetic units and the register file. In the case of a memory access instruction, access to a load/store unit <b>204</b> occurs via the data bus <b>121</b> for RISC and the data bus <b>124</b> for VLIW. Data is transferred between the register file <b>201</b> and the load/store unit <b>204</b> via a bus <b>203</b>. Data is also transferred between the load/store unit <b>204</b> and the data cache <b>129</b> via an address bus <b>206</b> and a data bus <b>205</b>. Unlike FIG. 1, FIG. 2 refers to a case where arithmetic units are allowed to control the RISC arithmetic unit control signal <b>117</b> and the VLIW arithmetic unit control signal <b>116</b> are limited to the arithmetic units in the respective cores.</p><p>Since the RISC and VLIW cores <b>106</b>, <b>140</b> have the register file <b>201</b>, the load/store unit <b>204</b> and the data cache <b>129</b> in common, the chip area of the semiconductor integrated circuit is reducible.</p><p>Detailed Description of VLIW Core</p><p>FIG. 3 is a block diagram illustrating in detail the instruction fetch unit <b>101</b>, the VLIW table <b>113</b>, the VLIW start decision circuit <b>104</b> and the VLIW instruction decode unit <b>115</b> shown in FIGS. 1 and 2.</p><p>The instruction fetch unit <b>101</b> comprises a branch condition decision circuit <b>315</b>, a program counter <b>316</b> for the RISC core and an adder <b>317</b>.</p><p>In the instruction fetch unit <b>101</b>, the branch condition decision circuit <b>315</b> receives the VLIW branch-to-VLIW instruction decode signal <b>142</b> and communicates the occurrence of a branch to the VLIW instruction to the VLIW start decision circuit <b>104</b> through the VLIW instruction branch signal <b>103</b>. The branch condition decision circuit <b>315</b> also decides whether the VLIW instruction has completed through the VLIW instruction completion signal <b>102</b> from the VLIW start decision circuit <b>104</b>. It is thus possible to prevent the VLIW core <b>140</b> from being doubly activated during the parallel operation of the VLIW core <b>140</b>. When such a branch to the VLIW instruction occurs, an address set in the program counter (PC) <b>316</b> for the RISC core is transferred form the branch destination address bus <b>136</b> to the instruction address bus <b>105</b>. The program counter <b>316</b> for the RISC core is updated by the adder <b>317</b>.</p><p>The VLIW table <b>113</b> includes a selector <b>303</b>, an address latch <b>304</b>, a data latch <b>305</b> and a VLIW table storage memory <b>306</b>. In the VLIW table <b>113</b>, the selector <b>303</b> is used to select an address set by the instruction fetch unit <b>101</b> via the instruction address bus <b>105</b> and an address set by a program counter <b>302</b> for VLIW held in the VLIW start decision circuit <b>104</b> via the instruction address bus <b>132</b>. The address thus selected is set at the address latch <b>304</b> and used to transfer the VLIW instruction from the VLIW table storage memory <b>306</b> to the VLIW instruction bus <b>112</b>. The VLIW table is changed by means of the data transferred to the VLIW table data bus <b>122</b> via the data latch <b>305</b> with respect to the VLIW table storage memory <b>306</b> indicative of the address designated by the address latch <b>304</b>.</p><p>The VLIW start decision circuit <b>104</b> includes the VLIW program counter <b>302</b> of holding the address on the instruction address bus <b>105</b>, an adder <b>301</b> for incrementing the program counter <b>302</b>, a decoder <b>309</b> for decoding the address from the program counter <b>302</b>, a VLIW core control register (REG) for holding information as to acceptability of VLIW activation and what is necessary for VLIW activation, a VLIW start decision circuit <b>310</b> for deciding the activation of VLIW on receiving information about the signal <b>103</b> informing a branch to the VLIW instruction based on the decoded result, a value of a VLIW core control register <b>308</b> and the VLIW instruction running state signal <b>110</b>, and the VLIW table storage memory <b>307</b> for controlling the VLIW table according to information from the VLIW core control register <b>308</b>. In this case, the VLIW core control register <b>308</b> is updated via the VLIW table data bus <b>122</b>.</p><p>The VLIW instruction decode unit <b>115</b> includes a multiplexer <b>313</b> for selecting the VLIW instruction from the VLIW instruction bus <b>112</b>, an adjusting circuit <b>311</b> for deciding execution control on receiving information about a VLIW instruction completion code on the VLIW instruction bus <b>112</b> and an RISC instruction code on a control signal <b>137</b>, a starting circuit <b>312</b> for controlling the activation of VLIW computing units on receiving the VLIW instruction decode start signal <b>111</b>, and a VLIW arithmetic unit control circuit <b>314</b> for controlling a plurality of arithmetic units prepared for VLIW.</p><p>Modified Example of VLIW Core</p><p>FIG. 4 refers to a case where the microprocessor of FIGS. 1 and 2 has a built-in address translation table in a translation-lookaside-buffer (TLB) of a memory management unit (MMU) for translating logical addresses into physical addresses.</p><p>As shown in FIG. 4, in contrast to FIG. 3, an address translation buffer <b>401</b> is situated between the instruction fetch unit <b>101</b> and the VLIW table <b>113</b>, wherein like reference characters designate like component parts of FIG. <b>3</b>.</p><p>The address translation buffer <b>401</b> is used to translate an instruction address (logical address) <b>105</b> into an instruction address (physical address) <b>403</b>, which is transferred to the instruction cache <b>107</b>, the VLIW table <b>113</b> and the VLIW start decision circuit <b>104</b>. When the instruction address is translated in the address translation buffer <b>401</b>, a VLIW start auxiliary information signal <b>402</b> is read out and utilized for the operation of the VLIW start decision circuit <b>310</b> and the stating circuit <b>312</b>.</p><p>Operating Timing</p><p>FIG. 5A shows a timing chart and an example of VLIW instruction code allocation in a case where the VLIW and RISC instructions are executed in parallel by the VLIW branch instruction.</p><p>The VLIW branch instruction is a sort of RISC instruction and like RISC instructions <b>1</b>, <b>2</b>, <b>3</b>, executed through the pipeline processing in the RISC core section <b>106</b> and reference numerals <b>501</b>, <b>504</b>, <b>506</b> and <b>507</b> denote their pipeline stages. Namely, I represents an instruction fetch; D, an instruction code; E, execution; M, memory access; and W, a write stage. Further, VLIW instructions <b>1</b>, <b>2</b>, <b>3</b> are executed through the pipeline processing and reference numerals <b>502</b>, <b>503</b>, <b>505</b> denote their pipeline stages; namely, VI, VD, VE, VM, VW represent an instruction fetch for VLIW, an instruction decode, execution, memory access and a write stage, respectively.</p><p>Assuming that a branch to the VLIW instruction <b>1</b> occurs three cycles after the VLIW branch instruction, the pipeline <b>502</b> of the VLIW instruction <b>1</b> starts at a cycle <b>4</b>. When the VLIW instruction which follows the VLIW instruction <b>2</b> is not dependent on the RISC instruction at the return destination after the execution of the VLIW instruction, it is possible to carry out the execution <b>503</b> of the VLIW instruction <b>2</b> and the execution <b>504</b> of the RISC instruction <b>1</b> in parallel. The execution <b>505</b> of the VLIW instruction <b>3</b> and the execution <b>506</b> of the RISC instruction <b>2</b> may also be carried out in parallel and when the VLIW instruction is completed, the pipeline for the VLIW instruction disappears and only the execution <b>507</b> of the RISC instruction <b>3</b> is carried out.</p><p>An example of the code allocation of the VLIW instruction read from the VLIW table at the VI stage is shown in FIG. 5B. A code for controlling the plurality of computing units is buried in one VLIW instruction. The instruction length of the VLIW instruction is a fixed length of 128 or 256 bits. Reference numeral <b>508</b> denotes a field for controlling the VLIW computing units <b>1</b>; <b>509</b>, a field for controlling the VLIW computing units <b>2</b>; <b>510</b>, a field for controlling the integer computing units; <b>511</b>, a field for controlling the floating-point computing units; and <b>512</b>, a field for storing the completion of the VLIW instruction and other items of information. Each of the fields <b>508</b>, <b>509</b>, <b>510</b>, <b>511</b>, <b>512</b> is 32-bit long and the operational code of <b>513</b>, the displacement of <b>514</b>, the source register <b>1</b> of <b>515</b>, the source register <b>2</b> of <b>516</b> and the destination register of <b>517</b> are allocated. A VLIW decoder decodes this instruction code so as to control each computing units.</p><p>System Configuration</p><p>FIG. 6 is a general view of a system utilizing the present invention. Reference numeral <b>601</b> denotes a system built on one or a plurality of printed boards to which a display <b>611</b>, a CD-ROM (Compact Disc-ROM) <b>612</b>, a video camera <b>615</b>, an LCD (Liquid Crystal Display) <b>618</b> and peripheral devices <b>620</b> such as a keyboard and a printer are connected. The system <b>601</b> includes a processor <b>602</b>, a ROM <b>608</b> for storing programs, an SRAM <b>609</b> for storing data and programs, a DRAM <b>614</b> and an SDRAM (Synchronous DRAM) <b>614</b>, a three-dimensional graphic frame buffer <b>610</b> for storing display image data and the like, a CD-ROM decoder <b>613</b> for controlling the CD-ROM, a video controller <b>616</b> for controlling the video camera, a LCD controller <b>619</b> for controlling a liquid crystal display (LCD), and a peripheral device controller <b>621</b> for controlling the peripheral devices <b>620</b> such as the keyboard and the printer, these component parts being connected to a system bus <b>607</b>.</p><p>The processor <b>602</b> includes a processor <b>1</b> (<b>603</b>) having a first instruction set and a processor <b>2</b> (<b>605</b>) having a second instruction set, wherein the processor <b>2</b> is controlled by the processor <b>1</b> through a control signal <b>606</b> and the processor <b>1</b> by the processor <b>2</b> through a control signal <b>604</b>. As the processor <b>602</b> is capable of processing three-dimensional graphics and encoding/decoding of MPEG at high speed, it is possible to dispense with a conventional dedicated hardware circuit, decrease the number of semiconductor chips to be packaged on the printed board and decrease the number of printed boards or the size of a printed board itself.</p><p>One Chip Processor</p><p>FIG. 7 is a block diagram of a processor when the processor <b>602</b> of FIG. 6 is formed with one semiconductor integrated circuit device (processor contained in one chip). In this case, the technology of manufacturing semiconductor integrated circuits is used to form a processor <b>701</b> on one semiconductor substrates of single crystal silicon and the resin molding technique is used for the packaging of the semiconductor substrate by so-called plastic packaging. Memories such as ROM <b>608</b> and RAM <b>609</b> may be contained.</p><p>The one-chip processor <b>701</b> includes a processor <b>1</b> (<b>708</b>) having a first instruction set, a processor <b>2</b> (<b>711</b>) having a second instruction set, the data cache <b>129</b>, a peripheral unit, a clock pulse generator circuit (CPG) <b>714</b> and an input-output circuit (I/O) <b>715</b>.</p><p>When the processor <b>1</b> (<b>708</b>) and the processor <b>2</b> (<b>711</b>) are used in combination, a combination of a RISC processor with a 16-bit fixed length instruction and a VLIW processor with a 64-bit fixed length instruction, a combination of a RISC processor with a 32-bit fixed length instruction and a VLIW processor with a 128-bit fixed length instruction, a combination of a RISC processor with a 64-bit fixed length instruction and a VLIW processor with a 256-bit fixed length instruction or the like may be used. In these combinations, the processors <b>1</b> and <b>2</b> may be reversed in order. FIG. 7 refers to a case where the processor <b>1</b> (<b>708</b>) is a RISC processor (RISC core <b>106</b> of FIG. <b>1</b>), and the processor <b>2</b> (<b>711</b>) a VLIW processor (VLIW core <b>140</b> of FIG. <b>1</b>).</p><p>The processor <b>1</b> (<b>708</b>) includes the instruction fetch unit <b>101</b>, the instruction cache <b>107</b>, the RISC instruction decode unit <b>114</b>, one or a plurality of arithmetic units <b>704</b> and the RISC load/store unit <b>127</b>, these being mutually connected by an internal bus <b>702</b>. The instruction fetch unit <b>101</b> reads an instruction from the instruction cache <b>107</b> and the RISC instruction decode unit <b>114</b> analyzes the instruction thus read, causing the arithmetic units <b>704</b> to operate, whereby the RISC load/store unit <b>127</b> is activated whenever memory access is needed. A multiplication unit, an integer arithmetic unit, a floating-point unit, a substraction unit, a DSP and so forth are placed in the arithmetic unit <b>704</b>. The arithmetic unit may have a plurality of similar arithmetic units. A bus <b>709</b> is used to input an instruction to the instruction cache from a bus control unit <b>712</b>. The RISC load/store unit <b>127</b> uses the bus <b>705</b> to access the data cache <b>129</b> and the bus control unit <b>712</b> uses the bus <b>707</b> to fetch data into the data cache <b>129</b>.</p><p>The processor <b>2</b> (<b>711</b>) includes the VLIW start decision circuit <b>104</b>, the VLIW table <b>113</b>, the VLIW instruction decode unit <b>115</b>, one or a plurality of arithmetic units <b>704</b> and the VLIW load/store unit <b>131</b>, these being mutually connected by the internal bus <b>702</b>. When the activation of the VLIW instruction is decided by the VLIW start decision circuit <b>104</b>, it is read from the VLIW table <b>113</b> and analyzed in the VLIW instruction decode unit <b>115</b> and the arithmetic units <b>704</b> operate, whereby the VLIW load/store unit <b>131</b> is activates whenever memory access is needed. For the VLIW table <b>113</b>, use can be made of a non-volatile memory such as a masked ROM and a flash memory or a volatile memory such as a SRAM and a DRAM. When the VLIW table is located outside the chip, the VLIW instruction is read from outside via a bus control unit. A multiplication unit, an integer arithmetic unit, a floating-point arithmetic unit, a substraction unit, a DSP and so forth are placed in the arithmetic unit <b>704</b>. The arithmetic unit may have a plurality of similar arithmetic units. The VLIW load/store unit <b>131</b> uses a bus <b>706</b> to gain access to the data cache <b>129</b>.</p><p>The bus control unit <b>712</b> uses a bus <b>713</b> to gain access to the I/<b>0</b><b>715</b>, which transfers data to from the outside of the chip using an address signal <b>717</b> and a data signal <b>716</b>. A peripheral module <b>710</b> and the like may be connected to the bus <b>713</b>. An internal clock signal is generated by a CPG <b>714</b>.</p><p>A control signal line (or bus) <b>713</b> is used for interfacing between the processor <b>1</b> (<b>708</b>) and the processor <b>2</b> (<b>711</b>). As shown in FIG. 7, coincidence control of data is facilitated because the data cache is owned commonly by the processors <b>1</b> and <b>2</b> incorporated into one chip. Moreover, security is reinforced since the processor-to-processor signal is confined to the chip. Further, cost reduction and high-speed performance are achievable because processor-to-processor communication speed can be increased and because the quantity of information to be transferred therebetween can be decreased.</p><p>A branch instruction for switching the processors or a branch to a specific address space is used as a trigger in the method of switching operations between the processors having different instruction sets according to this embodiment of the invention. When the operations are switched between the first processor and the second processor, either first or second processor is made the master processor for controlling the whole operation, whereas the other is made the slave processor. However, the master processor need not always be limited to one particular processor but either processor can be the master processor as occasion demands.</p><p>In a case where the operation of the master processor that has returned to the master position remains unaffected by that of the slave processor after operation is transferred from the master processor to the slave processor, the two processors may be operated in parallel by judging the dependency of the slave processor or the master processor.</p><p>Embodiment 2</p><p>FIG. 8 is a block diagram of a microcomputer <b>800</b> as another embodiment of the present invention. The technology of manufacturing semiconductor integrated circuits is used to form the microcomputer <b>800</b> on one semiconductor substrate of single crystal silicon and the resin molding technique is used for the packaging of the semiconductor substrate by so-called plastic packaging.</p><p>The microcomputer <b>800</b> includes a first processor <b>801</b>, a second processor <b>802</b>, a first memory <b>803</b>, a second memory <b>804</b>, a processor switching circuit <b>805</b>, an address bus <b>806</b>, a data bus <b>807</b> and a bus control unit <b>808</b>.</p><p>The first processor <b>801</b> is a RISC type processor for executing an instruction of 16-bit fixed length. The second processor <b>802</b> is a VLIW type processor for executing an instruction of 64-bit length. The first and second processors <b>801</b>, <b>802</b> are different in instruction system (instruction set, instruction format, programming model or the like). An instruction (program) to be executed by the first processor <b>801</b> is stored in the first memory <b>803</b>, whereas an instruction (program) to be executed by the second processor <b>802</b> is stored in the second memory <b>804</b>. The first and second memories <b>803</b>, <b>804</b> are non-volatile or volatile memories. By making the first and second memories <b>803</b>, <b>804</b> rewritable memories, not only the semiconductor supplier but also semiconductor users are able to write programs. In other words, users are allowed to construct both programs using a first and a second instruction set. Volatile, non-volatile and rewritable memories are similar to those used in the VLIW table <b>113</b> of the microprocessor of FIG. <b>1</b>.</p><p>Memory Map</p><p>As shown in a memory map of FIG. 9, a program of the first processor <b>801</b> and a program of the second processor <b>802</b> are placed in the address space of the first processor <b>801</b> or the second processor <b>802</b>. The whole or part of the program of the first processor is stored in the first memory <b>803</b>, whereas the whole or part of the program of the second processor is stored in the second memory <b>804</b>.</p><p>An address in the first processor <b>801</b> or the second processor <b>802</b> is input to the processor switching circuit <b>805</b> to decide which one of the first and second memories <b>803</b>, <b>804</b> is accessed. When the first processor <b>801</b> has access to the first memory <b>803</b>, it inputs an address signal and a control signal <b>812</b> to the processor switching circuit <b>805</b>. The processor switching circuit <b>805</b> outputs an address signal and a control signal <b>808</b> necessary for providing access to the first memory <b>803</b>. The processor switching circuit <b>805</b> also transfers to the second processor <b>802</b> a control signal <b>810</b> for suspending the operation of a pre-read instruction and a clock in order to lower power consumption. When the second processor <b>802</b> has access to the second memory <b>804</b>, on the other hand, it inputs an address signal and a control signal <b>813</b> to the processor switching circuit <b>805</b>. The processor switching circuit <b>805</b> transfers an address signal and a control signal necessary for providing access to the second processor <b>802</b> to a signal line <b>809</b>. The processor switching circuit <b>805</b> also transfers to the first processor <b>801</b> a control signal <b>811</b> for suspending the operation of a pre-read instruction and a clock in order to lower power consumption. The processor switching circuit <b>805</b> causes the first and second processors to operate exclusively.</p><p>The first processor <b>801</b> executes its own program and outputs an address indicative of the program area of the second processor <b>802</b> by means of a branch instruction in the program, whereby it is allowed to execute the program of the second processor <b>802</b> in the second processor <b>802</b>. The second processor <b>802</b> also outputs an address indicative of the program area of the first processor by means of a branch instruction in the program of the second processor <b>802</b>, whereby the operation can return to the program of the first processor <b>801</b>.</p><p>Incidentally, the processor switching circuit <b>805</b> contains a control register and the memory map of FIG. 9 can be altered by rewriting the register. The program area of the first processor, the program area of the second processor, the bead address and the final address of each data area and the like can be designated by the control register.</p><p>Thus programs in different instruction systems can be executed by one microcomputer. Moreover, software compatibility is maintainable because a program specified by a new architecture is executed by the second processor even though the program of the first processor is software that has been stored so far.</p><p>In addition, power consumption can effectively be lowered by suspending the operation of the clock in the unoperating processor.</p><p>Since the instruction length in the first and second processors <b>801</b>, <b>802</b> is relatively short, the control unit such as an instruction decoder and the arithmetic unit can be small-sized, so that the capacity of the first memory <b>803</b> or the second memory <b>804</b> is increasable. In a case where the area occupied by the processor is not critical, the instruction length may be increased.</p><p>Since the operations can be switched between processors different in instruction set by a specific instruction according to this embodiment of the invention, extension to the processor having a different instruction set is possible while compatibility is maintained. Moreover, cost reduction is feasible because resources such as arithmetic units can be owned by different processor jointly.</p><p>In the case where processors having different instruction sets are incorporated into one chip, processor-to-processor communication speed can be increased and security is reinforced since the internal information is not output outside. The operation of one operating processor which requires no high-speed processing is completely stopped, whereas the other processor is made to perform the same function as that of the one processor whose operation has thus been stopped so as to lower power consumption.</p><p>Thus (1) performance as high as IGIPS (Giga Instructions Per Second), or maximum IOGOPS (Giga Operations Per Second), is achievable while complete software compatibility is maintained. (2) Performance of a middleware section can be increased ten times while existing software is kept in use. (3) New applications can be prepared with instruction sets maintained as they are. (4) All applications are achievable with software.</p><p>The foregoing invention has been described in detail in terms of preferred embodiments. However, the present invention is not limited to those embodiments but may be practiced in various modified ways without departing from the spirit and scope thereof. Although the microprocessor of FIG. 1, for example, is configured so that the computing units of the RISC and VLIW cores are arranged for common use mutually, they may be used independently as in the microprocessor of FIG. <b>2</b>. FIG. 2 refers to a case where the load/store unit <b>204</b> is commonly used by the RISC and VLIW cores; however, there may be provided two load/store units for both the cores, respectively. Two processors having different instruction sets may be arranged instead of providing the RISC type processor as the first processor and the VLIW type processor as the second processor. In other words, processors of RISC and RISC types, RISC and CISC types, CISC and CISC types, CISC and VLIW types, VLIW and VLIW types or the like. Although combinations of 16 bits and 64 bits, 32 bits and 128 bits, and 64 bits and 256 bits have been shown to constitute the instruction lengths of the RISC processor and the VLIW processor by way of example, instruction lengths are not limited to the combinations above. Moreover, new embodiments may be formed according to the present invention by replacing the whole or part of the combinations of the instruction lengths if necessary.</p><p>Thus, according to the above the data processor of the present invention has a first processor for executing conventional software and a second processor for executing software of a new architecture. Since the first processor is able to activate the second processor, it is possible to attain a high-performance processor capable of executing software using a new architecture (instruction system) while maintaining compatibility with conventional software. High-performance can be realized by jointly forming for common use resources in the two processor such as arithmetic units so as to prevent an increase in hardware. Both high-speed operation and low power consumption can be realized since two control systems are possible under which two processors are operated in parallel or intermittently.</p><p>While the present invention has been described in detail and pictorially in the accompanying drawings it is not limited to such details since many changes and modifications recognizable to those of ordinary skill in the art may be made to the invention without departing from the spirit and the scope thereof.</p><?DETDESC description=\"Detailed Description\" end=\"tail\"?></description>"}], "inventors": [{"first_name": "Junichi", "last_name": "Nishimoto", "name": ""}, {"first_name": "Hideo", "last_name": "Maejima", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "HITACHI, LTD."}, {"first_name": "", "last_name": "RENESAS ELECTRONICS CORPORATION", "name": ""}], "ipc_classes": [{"primary": true, "label": "G06F   9/46"}], "locarno_classes": [], "ipcr_classes": [{"label": "G06F   9/30        20060101ALI20051220RMJP"}, {"label": "G06F   9/38        20060101A I20051008RMEP"}, {"label": "G06F   9/318       20060101A I20051008RMEP"}], "national_classes": [{"primary": true, "label": "712024"}, {"primary": false, "label": "712E0906"}, {"primary": false, "label": "712E09071"}, {"primary": false, "label": "712E09035"}, {"primary": false, "label": "712032"}, {"primary": false, "label": "712E09049"}], "ecla_classes": [{"label": "G06F   9/30X"}, {"label": "G06F   9/38S"}, {"label": "G06F   9/38C4"}, {"label": "G06F   9/30X8"}, {"label": "G06F   9/38E"}, {"label": "G06F   9/38T"}, {"label": "G06F   9/38H"}], "cpc_classes": [{"label": "G06F   9/3861"}, {"label": "G06F   9/3822"}, {"label": "G06F   9/3836"}, {"label": "G06F   9/3885"}, {"label": "G06F   9/30149"}, {"label": "G06F   9/3877"}, {"label": "G06F   9/3857"}, {"label": "G06F   9/30196"}, {"label": "G06F   9/3857"}, {"label": "G06F   7/00"}, {"label": "G06F   9/30196"}, {"label": "G06F   9/3822"}, {"label": "G06F   9/3885"}, {"label": "G06F   9/3836"}, {"label": "G06F   9/3877"}, {"label": "G06F   9/3861"}, {"label": "G06F   9/30149"}], "f_term_classes": [], "legal_status": "Expired - Fee Related", "priority_date": "1996-01-31", "application_date": "1999-08-25", "family_members": [{"ucid": "TW-334544-B", "titles": [{"lang": "EN", "text": "Data processor"}]}, {"ucid": "KR-970059916-A", "titles": [{"lang": "KO", "text": "\ub370\uc774\ud0c0\ucc98\ub9ac\uc7a5\uce58"}, {"lang": "EN", "text": "Data processing device"}]}, {"ucid": "US-6023757-A", "titles": [{"lang": "EN", "text": "Data processor"}]}, {"ucid": "US-6496919-B1", "titles": [{"lang": "EN", "text": "Data processor"}]}, {"ucid": "JP-3623840-B2", "titles": [{"lang": "JA", "text": "\u30c7\u30fc\u30bf\u51e6\u7406\u88c5\u7f6e\u53ca\u3073\u30de\u30a4\u30af\u30ed\u30d7\u30ed\u30bb\u30c3\u30b5"}, {"lang": "EN", "text": "Data processing apparatus and microprocessor"}]}, {"ucid": "US-20030065911-A1", "titles": [{"lang": "EN", "text": "Data processor"}]}, {"ucid": "US-6760832-B2", "titles": [{"lang": "EN", "text": "Data processor"}]}, {"ucid": "KR-100535852-B1", "titles": [{"lang": "KO", "text": "\ub370\uc774\ud0c0\ucc98\ub9ac\uc7a5\uce58"}, {"lang": "EN", "text": "Data processing device"}]}, {"ucid": "JP-H09212358-A", "titles": [{"lang": "JA", "text": "\u30c7\u30fc\u30bf\u51e6\u7406\u88c5\u7f6e\u53ca\u3073\u30de\u30a4\u30af\u30ed\u30d7\u30ed\u30bb\u30c3\u30b5"}, {"lang": "EN", "text": "DATA PROCESSOR AND MICROPROCESSOR"}]}]}