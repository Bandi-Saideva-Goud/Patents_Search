{"patent_number": "US-5909694-A", "publication_id": 72017969, "family_id": 25362308, "publication_date": "1999-06-01", "titles": [{"lang": "EN", "text": "Multiway associative external microprocessor cache"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA37914839\"><p>A cache system provides for accessing set associative caches with no increase in critical path delay, for reducing the latency penalty for cache accesses, for reducing snoop busy time, and for responding to MRU misses and cache misses. A multiway cache includes a single array partitioned into a plurality of cache slots and a directory, both directory and cache slots connected to the same data bus. A first cache slot is selected and accessed; and then corresponding data is accessed from alternate slots while searching said directory, thereby reducing the latency penalty for cache access.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"1\"><claim-text>1. Method for accessing a multiway associative cache, said cache being partitioned into a plurality of cache slots and further including a directory, comprising the steps of:<claim-text>selecting and accessing a first cache slot; and then thereafter</claim-text><claim-text>fetching corresponding data from alternate slots while searching said directory;<claim-text>thereby reducing the latency penalty for cache access.</claim-text></claim-text></claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"2\"><claim-text>2. The method of claim 1, including the step of accessing said directory and said plurality of cache slots in parallel, with a cache address bit that corresponds to the slot value defaulting to a predetermined value.</claim-text></claim>"}, {"num": 3, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"3\"><claim-text>3. The method of claim 1, including the step of accessing said directory and said plurality of cache slots in parallel, with a cache address bit that corresponds to the slot value being based on the last slot used.</claim-text></claim>"}, {"num": 4, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"4\"><claim-text>4. System for accessing a cache, comprising:<claim-text>a multiway associative cache partitioned into a plurality of cache slots;</claim-text><claim-text>a directory;</claim-text><claim-text>control means responsive to a cache address for selecting and accessing a first cache slot and thereafter alternate cache slots while simultaneously searching said directory for the correct cache slot; and</claim-text><claim-text>said control means being further responsive to a successful directory search for sequentially accessing the correct cache slot;</claim-text><claim-text>thereby reducing the latency penalty for cache access.</claim-text></claim-text></claim>"}, {"num": 5, "parent": 4, "type": "dependent", "paragraph_markup": "<claim num=\"5\"><claim-text>5. The system of claim 4, wherein a bit in a cache address that corresponds to the slot value defaulting to a predetermined value.</claim-text></claim>"}, {"num": 6, "parent": 4, "type": "dependent", "paragraph_markup": "<claim num=\"6\"><claim-text>6. The system of claim 4, wherein a bit in a cache address that corresponds to the slot value being based on the last slot used.</claim-text></claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES67287040\"><?RELAPP description=\"Other Patent Relations\" end=\"lead\"?><h4>CROSS-REFERENCES TO RELATED APPLICATIONS</h4><p>U.S. patent applications Ser. No. 08/873,783, filed Jun. 12, 1997, entitled \"Cache Address Generation\", assignee docket EN996101; Ser. No. 08/873,991, filed Jun. 1, 1997, entitled \"Pipelined Snooping of Multiple L1 Data Cache Lines\", assignee docket EN996038; and Ser. No. 08/873,962, filed Jun. 12, 1997, entitled \"Data Register for Multicycle Data Cache Read\", assignee docket EN996096; filed concurrently are assigned to the same assignee hereof and contain subject matter related, in certain respect, to the subject matter of the present application. The above-identified patent applications are incorporated herein by reference.</p><?RELAPP description=\"Other Patent Relations\" end=\"tail\"?><?BRFSUM description=\"Brief Summary\" end=\"lead\"?><h4>BACKGROUND OF THE INVENTION</h4><p>1. Technical Field of the Invention</p><p>This invention generally relates to set associative caches for computer systems, and more particularly to reducing the latency penalty for cache access.</p><p>2. Background Art</p><p>The use of caches for performance improvements in computing systems is well known and extensively used. See, for example, U.S. Pat. No. 5,418,922 by L. Liu for \"History Table for Set Prediction for Accessing a Set Associative Cache\", and U.S. Pat. No. 5,392,410 by L. Liu for \"History Table for Prediction of Virtual Address Translation for Cache Access\", the teachings of both of which are incorporated herein by reference.</p><p>A cache is a high speed buffer which holds recently used memory data. Due to the locality of references nature for programs, most of the access of data may be accomplished in a cache, in which case slower accessing to bulk memory can be avoided.</p><p>In typical high performance processor designs, the cache access path forms a critical path. That is, the cycle time of the processor is affected by how fast cache accessing can be carried out.</p><p>In order to achieve increased performance, microprocessors are being designed with ever-faster clock rates. Keeping the microprocessor supplied with instructions and data from memory becomes more difficult as processor speeds increase, and it is becoming more common to implement Level 2 (L2) caches using SRAMS operatively coupled to the microprocessor. The least expensive SRAMS are the industry-standard, commodity-priced modules which are typically 64K\u00d718-bit or 256K\u00d718-bit devices. Several of these SRAMs are usually used in parallel to create an external L2 cache. An example of a pipelined SRAM is the IBM 32K\u00d736 &amp; 64K\u00d718 SRAM 03H9040, described in IBM publication SA 14-4659-03, revised 7/96 at page 3 of 21.</p><p>Until now, the vast majority of these L2 caches have been direct-mapped, or 1-way associative, due to the simplicity of such a design, and more importantly, due to the fact that the limited number of signal pins on a typical microprocessor makes it difficult to implement a multi-way associative cache using standard SRAMS. There is, therefore, a need in the art for a circuit design which enables a multiway off-chip cache to be implemented with standard SRAMS.</p><p>There are two common ways to implement a multiway cache.</p><p>The first way is to implement the cache as a set of caches operating in parallel, with the desired data being obtained from one of the caches based on information obtained from a directory which is usually accessed at the same time as the cache. A two-way cache, for example, would be implemented-with two parallel arrays, and the output of one array would be selected based on matching an entry in one of the directories associated with the cache. This method usually results in the best performance, because the cache and directory accesses are done at the same time, resulting in the minimum latency for obtaining the desired data. The major disadvantage, especially as it relates to microprocessor external caches, is that a data bus from each array must be connected to the microprocessor, unless some sort of external multiplexer (which increases latency and adds cost) is used.</p><p>A second approach for implementing a multiway cache is to use a single array, and partition it to contain the various cache sets, or slots as they are sometimes called. However, this usually means that the directory must be searched before the array access can begin, because the slot must be known in order to generate the array address bit(s) which correspond(s) to the desired cache slot. The advantage of this method is that only one data bus need be connected to the SRAMs to access data. The disadvantage is that access latency is increased because the directory must be searched before beginning the cache access.</p><p>It is, therefore, an object of the invention to avoid increased access latency in multi-way cache accessing due to the need to search a directory before beginning the cache access.</p><h4>SUMMARY OF THE INVENTION</h4><p>In accordance with the invention, an apparatus and method is provided for accessing a multiway cache, said cache including a single array partitioned into a plurality of cache slots and a directory, both directory and cache slots connected to the same data bus. A first cache slot is selected and accessed; and then corresponding data is accessed from alternate slots while searching the directory, thereby reducing the latency penalty for cache access.</p><p>Other features and advantages of this invention will become apparent from the following detailed description of the presently preferred embodiment of the invention, taken in conjunction with the accompanying drawings.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4><p>FIG. 1 is a block diagram illustrating a typical microprocessor architecture within which a preferred embodiment of the invention is implemented.</p><p>FIG. 2 illustrates how FIGS. 2A through 2C relate, while the latter are block diagrams further describing the microprocessor of FIG. 1.</p><p>FIGS. 3-6 are block diagrams illustrating the system and L2 cache bus interfaces 101 and 103 of FIG. 1, with FIG. 3 generally illustrating the system data bus; FIG. 4, the system bus controls; FIG. 5, the L2 cache data bus; and FIG. 6, the L2 cache controls of the preferred embodiment of the invention.</p><p>FIG. 7 is a table illustrating the operation of the multi-way external cache of the invention for the case when the correct slot is accessed first.</p><p>FIG. 8 is a table illustrating the operation of the multi-way external cache of the invention for the case when the wrong slot is accessed first.</p><p>FIG. 9 is an example syntax for a memory address.</p><p>FIG. 10 is a logic diagram showing the L2 directory SRAM and L2 cache SRAMs according to a preferred embodiment of the invention.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>BEST MODE FOR CARRYING OUT THE INVENTION</h4><h4>Part 1</h4><p>Referring to FIG. 1, the microprocessor architecture within which a preferred embodiment of the invention is implemented will be described.</p><p>Microprocessor chip 100 is organized to interface system bus 102 and L2 cache 104, and includes the following functional units: fixed point unit (FXU) 106, floating point unit (FPU) 108, load store unit (LSU) 110, instruction unit (IU) 112, instruction cache unit (ICU) 114, data cache unit (DCU) 116, L2 cache control unit 118, processor interface unit (PIU) 120, clock distribution and control 122, and address translation unit (ATU) 124. In a multiprocessor environment, several processors 100 and their associated L2 caches 104 may interface system bus 102 over buses equivalent to bus 101, and share access through system bus 102 bus to main memory (sometimes referred to as L3 memory) 126.</p><p>The various functional units of microprocessor 100 interface over data, address, and/or control I/O pins, lines and/or busses as will be described hereafter. When referring to a figure, \"line\" can refer to either a single signal line or a collection of signal lines (i.e., a bus). Those functional units most pertinent to the invention, and which will be described in greater detail hereafter, include the load/store unit (LSU) 110, the data cache unit (DCU) 116, the L2 cache control unit (CCU) 118, and the address translation unit (ATU) 124.</p><p>In broad overview, the functional units on chip 100 communicate as follows. Clock distribution and control 122 provides clocking signals to all functional units on microprocessor chip 100. System bus 102 interfaces to PIU 120 over bidirectional bus 101, and thence over buses 105 with CCU 118. L2 cache 104 communicates with CCU 118 over buses 103. CCU 118 communicates instructions with ICU 114 over buses 109, with DCU 116 over buses 111, and provides address information to ATU 124 and receives miss interface signals over buses 107. LSU110 and IU 112 provide request interfaces to ATU 124 and receive translation state information over lines 129 and 131. ATU 124 provides translated address to ICU 114 over lines 115, and to DCU 116 over lines 113. ICU 114 interfaces to instruction unit 112 over bus 119. DCU 116 provides data to FXU 106, FPU 108 and LSU 110 over bus 121, and IU 112 provides instructions to FXU 106, FPU 108 and LSU 110 over bus 123. LSU 110 provides data to DCU 116 over bus 125. FPU 108 provides and receives data to DCU 116 over buses 127 to LSU 110, then across buses 125. Processor 100 accesses main memory through system bus 102.</p><h4>Microprocessor Core 100</h4><p>Referring to FIGS. 2A through 2C, and FIGS. 3-6, the core of microprocessor 100 will be described. FIG. 2A generally corresponds to load/store unit (LSU). 110, FIG. 2B to address translation unit (ATU) 124, and FIG. 2C to data cache unit (DCU) 116. FIGS. 3-6 generally correspond to L2 cache control unit (CCU) 118 and processor interface unit (PIU) 120.</p><p>Dispatch block 300 directs instructions from instruction unit 112 to the DECODE stage buffers of the various execution units 106, 108, 110, including on bus 301 (which is that portion of buses 123 directed to LSU 110) to LSU pipeline buffer 302.</p><p>The function of load/store unit 110 is to generate effective addresses on 64 bit wide bus 313 for load and store instructions and to serve as a source and sink for GPR data. During writes to cache 400, registers 314 and 316 hold the data and address, respectively; the effective address is on bus 313, and data select block 320 puts the data out on bus 323. During cache reads, data from cache 400 comes in on line 461, is latched in register 330, and from there sent on line 333 to general purpose registers 306 or to fixed point unit 106.</p><p>The output of LSU pipeline buffer 302 is fed on line 303 to the LSU decode and address generation block AGEN 304, which contains the general purpose registers 306 and address generation adders. The data output of decode block 304 is fed on lines 311 to data register 314 and thence on line 319 to data select block 320. The address output of AGEN 304 is fed on lines 313 to EXECUTE stage buffer 316, and on bus 309 to real address MRU 430. AGEN 304 output also includes control line 307, which it sets to indicate either real or virtual mode addressing to data cache control block 470.</p><p>The outputs of buffer 316 are fed on lines 317 to data select block 320 and to data cache address register 408, DIR address register 414 and register slot MRU address register 406. The output of register 408 is fed on line 409 to multiplexer 412. Data select block 320 contains the data to be stored to data cache 400 from load store unit 110, and this is fed thereto on store data output lines 323 via multiplexer 432, lines 433, align block 460, lines 461, register 456, lines 457, and line 427 via multiplexer 426. Data select block 320 also provides control signals to data cache controller 470 on lines 321. The other inputs to multiplexer 432 are (1) L2 corrected data 609 via multiplexer 426 and line 427, which is also fed to data cache 400, (2) bypass data to DC on line 621, and (3) unaligned data (aka store merging and correction) register 452 via lines 453 to line 427 via multiplexer 426. Multiplexer 432 output line 433 is also fed via align block 460 and line 461 to register 456 and thence via multiplexer 424 to L2 cache controller on line 425, along with the output of castout buffer 450 on line 451. Align block 460 is, in this embodiment, a barrel rotator or shifter which aligns D cache 400 data to quad word boundaries on reads, and from multiplexer 432 to quad word boundaries on stores.</p><p>An effective address from instruction unit 112 on line 367 (a portion lines 131) is latched in register 364 and fed on line 365 to ITLB 358 and to the compare and address select block 356 at ISLB 354. Line 313 from AGEN 304 is latched in register 384, and fed on line 385 to DTLB array 378 and compare and address select block 374 at DSLB 376. In this preferred embodiment, DTLB 378 may be a standard design, such as that described by Liu, supra. Whereas the Liu TLB design is 32 bits wide, in this preferred embodiment a 64 bit wide TLB 378 is used.</p><p>Data select 320 output on line 325 is fed to PUTAWAY stage buffer 330, which also receives data on lines 461 from data cache 400 (via lines 401 and align block 460) for LSU 110, and FPU 108 results on line 327 which is a portion of bus 127. The output of PUTAWAY stage buffer 330 is fed on lines 333 to a floating point register in FPU 108, special purpose registers 334 (among which are the timers), and general purpose registers 306. Special purpose registers 334 output line 335 is fed back to data select block 320 which allows the processor to read them. Line 333 carries the data for FPU 108 when doing a fetch from cache 400.</p><p>The selected output of instruction segment look aside buffer (ISLB) 354 is fed on lines 355 to comparator 362, along with the virtual address output of ITLB 358 on lines 359. ITLB real address output lines 361 are input to IC controls 350 (which includes instruction directory 352) and status information on line 361 is fed to ATU controls 370. The output of comparator 362 is fed on lines 363 to IC controls 350 and to ATU controls 370. The output of DSLB 376 is fed on lines 377 to comparator 382, along with the output of DTLB 378 on lines 379. The output of comparator 382 is fed on lines 383 to ATU controls 370 and DC control 470. DTLB 378 status output 381 is fed to ATU controls 370 and DC control 470. ATU controls 370 outputs include control lines 369 to data cache controller 470, L2 address 371 and ATU write data 373. IC controls 350 output is L2 address line 351. Real address from DTLB 378 is fed on lines 381 to DC address register 408 and directory address register 414.</p><p>Predicted real address MRU 430 output signals on line 431, representing the predicted read address bits 50:51, are latched in registers 410 and 416. The output of data cache address register 410 on line 411 is multiplexed with bits 50:51 of the output of register 408 in multiplexer 412, and its output is fed on address lines 413 to data cache 400. The remaining bits of DC address register 408 are fed straight through on line 413 to data cache 400. Similarly, the output of register 416 is fed on lines 417 to multiplexer 436, where it is multiplexed with bits 50:51 of the output of register 414 on line 415, and the result fed on lines 437 to directory array 440. The output of register 414 on line 415 is also fed to address register 408.</p><p>The function of real address MRU 430 is to provide predicted real address bits 50:51 to data cache 400 and directory array 440.</p><p>During the fetch stage, data cache 400 output 401 is fed to unaligned data register 452 and align block 460, and thence on line 461 to registers 456 and 330. Line 401 contains the data to be read from data cache 400 by the load store unit 110, snoop data to the L2 cache controller 118, merge data for partial stores to the data cache 400, and castout data to castout buffer 450. Slot MRU 402 output line 403 controls the selection of one of four sets of data to load on bus 401 through a multiplexer (not shown) on the output of data cache 400.</p><p>The output of castout buffer 450 is multiplexed in multiplexer 424 with the output of register 452 on lines 453 and line 457 from DC putaway register 456, the output appearing on lines 425 to the L2 cache controller. The output of register 452 along with DC putaway register 456 and L2 corrected data on line 609 is also fed to data cache input multiplexer 426, the output of which appears on lines 427 to data cache 400 and multiplexer 432. The output of register 406 is fed on line 407 to slot MRU 402. Slot MRU 402 output 403 is fed to data cache 400 where it controls a data multiplexer which selects the appropriate cache set (as taught by Liu, supra.)</p><p>Data cache (DC) control 470 receives inputs from directory array 440 on lines 441 (signifying a directory array hit or miss), from AGEN 304 on lines 307, data select and execute cycle control block 320 on lines 321, ATU controls 370 on lines 369, and comparator 382 on lines 383. Its output is fed to L2 address line 471, and includes a signal signifying a miss condition. Miss information is also sent to ATU controls 370 and PA controls (not shown) in LSU 110.</p><p>The function of data cache control 470 is to control the data flow multiplexing into and out of data cache 400 and send results to the load/store unit 110, address translation unit 124, and L2 cache control unit 118, and also to control writing of data into data cache 400.</p><p>Data directory 440 contains address tags to indicate if the contents of the real address are present in cache 400, and the status of the cache lines, whether modified, shared, or invalid. It also contains an LRU pointer for each congruence class, indicating which cache 400 line should be replaced.</p><p>Address translation unit (ATU) control 370 handles translations from effective addresses to virtual addresses to real addresses. It receives as inputs L2 corrected data on line 353, and provides TLB reload data output on lines 375 to instruction translation lookaside buffer (ITLB) 358 and data translation lookaside buffer (DTLB) 378, ISLB 354, and DSLB 376. With respect to look aside tables 354, 358, 376, 378, if a miss condition is detected, ATU sequencer 370 requests data (address and length) to L2 cache on bus 371 (FIG. 6.) When L2 responds on bus 353 (FIG. 5), ATU examines the data to select data for look aside buffer 378, 376, 354, 358, as the case may be, or signals a translation exception back to the instruction unit. ATU controls 370 tracks segment and page table updates and sends them to L2 controls on line 371. Line 381 provides the real address to the data cache directory for comparison.</p><p>The effective address is compared in ISLB 354 comparator 356 with the virtual address. If these match, then a valid effective to virtual address translation exists in buffer 354, which transmits the virtual address on line 355 to compare block 362.</p><p>ITLB 358 is accessed by an effective address on line 365 from register 364 for doing virtual to real address translation. The address input to ITLB 358 is a portion of the effective address from IU 112 on lines 367. Comparator 362 compares virtual addresses on lines 355 and 359, and signals the result on line 363. Associated with each virtual address in ITLB array 358 is a real address. The signal on line 363 indicates whether or not the address on line 361 is valid.</p><p>DTLB 378 is accessed by an address from register 384. Comparator 382 compares data on lines 379 and 377, and signals the result on line 383. The signal on line 383 indicates whether or not the address on line 379 is valid.</p><h4>System Bus Interface 120</h4><p>Referring to FIGS. 3 though 6, the system bus interface 120 and L2 cache control unit 118 of FIG. 1 will be further described.</p><p>Correspondence between the high level block diagram of FIG. 1, and the more detailed illustration of the preferred embodiment in FIGS. 3 to 6, is as follows. Bus 101 of FIG. 1 corresponds in FIGS. 3-6 to system controls lines 559 at driver/receiver 556, system address lines 569 at driver/receiver 564, system data hi bus 513 at driver/receiver 512, and system data low bus 517 at driver receiver 516. Bus 103 to L2 cache 104 of FIG. 1 corresponds to L2 cache address lines 691 out of driver 690, L2 tag address line 693 out of driver 692, L2 tag data lines 697 at driver/receiver 694, and L2 cache data bus 645 at driver/receiver 644. ICU bus 109 of FIG. 1 corresponds (from ICU) to IC request lines 351, and (to ICU) DOIC register 606 output lines 607, and bypass to IC multiplexer 616 on lines 617. DCU bus 111 of FIG. 1 corresponds (from DCU) to DC request lines 471 and data cache write data bus 425, and (to DCU) to bypass to DC multiplexer 620 on lines 621 and data cache data out (DODC) register 608 output line 609. Address translation unit (ATU) input/output bus 107 of FIG. 1 corresponds to ATU request lines 371, ATU write data bus 373, and multiplexer 612 output lines 353.</p><p>Referring to FIGS. 4 and 6, requests to L2 cache control 118 are latched in address/command register 650 from ATU request lines 371, IC request lines 351, DC request lines 471, and on lines 567 from address in register 566, which latches system bus addresses on lines 565 from receiver 564. These address/command signals are latched as required in registers 650, 652 and 654 connected via lines 651 and 653. The output of the third register 654 is fed to control block 660 on line 655. The output of first stage register 650 is fed on lines 651 to register 652, driver 690 to provide L2 cache address signal 691, driver 692 to provide L2 tag address signal 695, ECC checking circuit 684, address comparator 664, controls block 660, cache controller (CC) snoop address register 670, processor address registers CBPADR 674 and CBMADR 676, and address multiplexer 680. ECC 684 output is fed on lines 685 to driver 694 to provide L2 tag data on lines 697. CBPADR address register 674 contains the address to the system bus in the event of a cache miss, the output of which is fed to multiplexer 680 on line 675. CBMADR address register 676 contains the snoop address portion, and its output is fed to multiplexer 680 on line 677. Receiver 694 output from L2 tag data lines 697 is fed on lines 695 to L2 tag in register (L2TAGIN) 688 and thence on lines 689 to error correction code (ECC) block 686. The output of ECC block 686 is fed on lines 687 to comparator 664, address registers 670, 674 and 676. The output of comparator 664 is fed on line 665 to controls block 660. CCS address register 670 output line 671 represents the data cache snoop address. The output of address out multiplexer 680 is fed on lines 681 to address out register 560, and thence on line 561 to the system address bus 569 through driver 564. The output of controls block 660 is fed on lines 663 to arbitration and control block 552, and on lines 661 to address/command register 658. Arbitration and control block 552 receives control data from receiver 556 via lines 557, and provides output on lines 555 to controls block 660, and in the event of an L2 cache miss request out control signals are sent on line 553 through driver 556 to system controls bus 559. Another output of controls block appears on lines 661 to address/command register 658, the output of which appears on line 659 to multiplexer 672. Multiplexer 672 also receives input from lines 653 and 655, and provides its output on lines 673 back to register 650.</p><p>Referring to FIG. 5, ECC block 632, DOIC register 606, DODC register 608, L2PDO register 636, multiplexer 616 and multiplexer 620 each receive inputs from data input register 624 on bus 625. The output of ECC block 632 is fed on line 633 to L2 data out register 638, and thence to driver 644 on line 639. The output of L2PDO register 636 is fed on line 637 to inpage buffer 646, the output of which is fed on line 647 to L2PDI register 642 and ECC circuit 632. The output of L2PDI register 642 is fed on line 643 to DOIC register 606, DODC register 608, CCDI register 624, and to bypass multiplexers 620 and 616. The output of multiplexers 620 and 616 represent bypass data, and are fed on lines 621 and 617 to the DC and IC, respectively. Data cache write data line 425 is fed to CMCD register 628 and CCDI register 624. The output of CMCD register 628 is fed on lines 629 to L2PDO register 636, and castout buffers 602.</p><p>Referring to FIGS. 3 and 5, L2 cache data in from bus 645 is received at receivers 644, fed on line 649 to L2 data in register 640 and thence on lines 641 to ECC circuitry 634 and bypass multiplexers 616 and 620. From ECC circuitry 634, L2 cache data in is fed on lines 635 to cache controller data in register (CCDI) 624, DOIC register 606 and DODC register 608. DODC register 608 output 609 is fed to data cache unit 116 (FIG. 1), DC bypass multiplexer 620, ATU multiplexer 612, and castout buffers 602. The output of DOIC register 606 is fed on lines 607 to instruction cache unit 114 (FIG. 1), ATU multiplexer 612, and castout buffers 602. Castout buffers 602 output on lines 603 is fed to data high output register 502 and multiplexer 520, the output of which is fed on lines 521 to data output registers 502 and 504.</p><p>In operation, registers 624 and 636 form a pipeline buffer to inpage buffer 646 and register 642. Inpage buffer 646 caches a line from the system bus. Line 641 from L2 data in register 640 to bypass multiplexers 616, 620 allows the saving of a cycle on cache misses when error correction is not required. DOIC register 606 provides corrected data to instruction cache unit 114, and DODC provides corrected data to data cache unit 116. Either register may supply data to the ATU 124.</p><p>The normal path for routing L2 cache data is through register 640, ECC 634, and DOIC register 606 and DODC register 608.</p><h4>Processor Interface Unit 120</h4><p>Referring now to FIG. 3, a more detailed description of processor interface unit 120 of FIG. 1, and associated circuitry, will be provided. FIG. 3 represents the data flow portion of PIU 120 and System Bus 102.</p><p>System bus 102 data high bus 513 and data low bus 517 communicate through driver/receivers 512 and 516, respectively with data high output register 502 on lines 503, data high in register 506 on lines 515, data low out register 504 on lines 505, and data low input register 508 on lines 519. Each of busses 513, 517 is capable of handling eight bytes of data, providing a 16 byte data bus. If the system is operating on only eight bytes, only one set of the input/output registers (such as 504, 508) is used.</p><p>System data input register 508 outputs on line 509, are fed to multiplexer 524 and thence, along with register 506 output lines 507, on lines 525 to cache control data in (CCDI) register 624 (FIG. 5), which is the main data input register of the cache controller. Data input register 624 output is fed on bus 625 to multiplexer 520.</p><h4>Load/Store Unit (LSU) 110</h4><p>Load/store unit (LSU) 110 functions to decode fixed point and floating point loads and store and cache management operations, and to send effective addresses and storage commands to the data cache unit (DCU) 116. LSU 110 also handles most move-to and move-from special purpose register (SPR) 334 instructions. In addition to functioning as a load/store unit, LSU 110 also controls instruction execution sequencing after instructions have been dispatched, through detection of most instruction execution interlocks, and the generation of resulting pipeline hold signals.</p><p>LSU 110 provides a six port register file 306, made up of four 32\u00d718 register array macros, arranged as a 32\u00d772 array with two write ports and four read ports. This array implements the 64-bit general purpose registers (GPRs) 306. GPR array 306 also provides operands for fixed point unit (FXU) 106 decode stage (not shown) as well as for LSU 110. FXU 106 decodes its own instructions and generates requests to LSU 110 for the necessary operands, as well as providing on line 327 a result operand and address when appropriate. LSU 110 accesses GPRs 306 for registers needed to generate effective addresses (EA), and for data for store instructions. Data operands received from data cache 116 on line 461, and updated effective addresses are written back to the GPRs by LSU 110. Lines 327 contain the FPU results, and are fed to register 330.</p><p>In handling floating point loads and stores, LSU 110 generates effective addresses using operands from GPR 306, and accesses the necessary floating point register (FPR) operands from the floating point unit (FPU) 108.</p><p>Instructions dispatched to LSU 110 are latched in its DECODE cycle instruction register 302 at the end of the I-fetch cycle. The basic LSU 110 pipe is three stages: DECODE 302/304, EXECUTE 316/320, and PUTAWAY 330. During the DECODE cycle corresponding to 302/304, the instructions are decoded, and operands are fetched from the GPR 306 array. Addressing operands are gated to a 64-bit address generation (AGEN) adder, and a 64-bit effective address is calculated. The effective address (EA) is sent on lines 313 to the address translation unit (ATU) 124 and to data cache unit (DCU) 116 and latched at the end of the DECODE cycle in pipeline buffer 316 which holds the effective address during the EXECUTE cycle.</p><p>During the EXECUTE cycle, the operand for store operations is passed to the DCU on line 323, where it is aligned in block 460 and saved in register 456 for PUTAWAY in D-cache 400. At the end of the EXECUTE cycle, if a load type instruction is being executed, the data operand returns on line 461 to LSU 110 from the DCU, and is saved in pipeline buffer 330 for PUTAWAY.</p><p>During PUTAWAY cycle 330, as is represented by lines 333, up to two 8-byte or one 16-byte operand may be written to GPR 306. Floating point loads are limited to one 8-byte operand per cycle. GPRs 306 are not written until late in the PUTAWAY cycle 330. This requires that operands being written to these arrays be bypassed around the arrays to reduce pipeline interlocks. Delaying the write to GPR 306 also allows sign extension for algebraic load operations to be performed, helping to balance path delays between EXECUTE 316/320 and PUTAWAY 330 cycles for these instructions.</p><h4>Fixed Point Unit (FXU) 106</h4><p>Fixed Point Unit (FXU) 106 executes the fixed point instructions, not including storage access instructions. FXU 106 includes a 64-bit adder, a 64-bit logical unit, a 64-bit rotate-merge unit, and a 64-bit carry save adder which supports two-bit-per-cycle product formation during multiply instructions.</p><p>During division, quotient formation occurs one bit per cycle, through repeated subtraction of the divisor from the shifted dividend.</p><h4>Floating Point Unit (FPU) 108</h4><p>Floating point unit (FPU) 108 executes the floating point instructions, but not the storage access instructions. In one exemplary embodiment, FPU 108 includes a 5-port 32\u00d772-bit register array, a 32-bit status-control register, a 3-bit overlap scan booth encoder unit, 2-bit quotient generation unit, a 106-bit carry save adder, a 106-bit increment-full adder, an operand alignment shifter unit, a normalizer unit, and a rounder unit.</p><h4>Address Translation Unit (ATU) 124</h4><p>Referring, primarily, to FIG. 2B, address translation unit (ATU) 124 translates the data effective address (EA) from load/store unit (LSU) 110 and the instruction effective address from instruction unit 112 into real addresses used by the Data and Instruction Caches to access their L1 Caches and used by the L2 Cache Control Unit 118 to access the L2 Cache 104.</p><p>Microprocessor 100 implements segment lookaside buffers (SLB) 354, 376 and translation lookaside buffers (TLB) 358, 378, which function as caches for segment and page table entries, When a required entry is not found in a look aside buffer, ATU 124 initiates a fetch to L2 cache control 118 to access segment and page table entries from memory 126 or L2 cache 104.</p><p>ATU 124 reports any translation data storage interrupts (DSI) to the load/store unit 110 and any translation instruction interrupts to the instruction unit 112. Reference, change and tag change bits are all updated by store requests to cache control 118 from ATU 124.</p><p>Microprocessor 100 provides a 4-entry SLB 354 for instruction address translation and an 8-entry SLB 376 for data address translation. SLBs 354, 376 contain the most-recently translated segments in a fully associative arrangement. The ESID (Effective Segment ID) portion of the effective data or instruction address is compared 356, 374 simultaneously to all entries in the respective SLB 354, 376 ESIDs when segment translation is enabled.</p><p>ATU 124 includes separate instruction and data TLBs 358, 378, respectively, to hold the results of virtual to real address translations. With virtual to real translation active, the VSID from the matching SLB 354, 376 is compared in comparators 362, 382 against the VSID stored in the TLB 358, 378. If a compare is found, the Real Page Number (RPN) stored in the matching TLB 358, 378 entry is used to form the real address. Replacement is managed independently in each TLB 358, 378 by an LRU bit for each of the 256 pairs of entries.</p><h4>L1 Data Cache Unit (DCU) 116</h4><p>In a preferred embodiment, L1 data cache unit (DCU) 400 has the following attributes: 64 KB size, 64 byte line size, 4-way set-associative, 2 subline-modified bits per line, MRU slot selection, 40-bit real address, 16-byte dataflow to/from processor, store-in design, and multi-processor support. The term \"cache line\" refers to a 64-byte block of data in the cache which corresponds to a single cache directory entry. Slot MRU 402 provides selection of one of four sets of cache data during an execute cycle. Real address MRU 430 supplies bits 50:51 to cache 400 and cache directory 440. Error correction ECC (not shown) is provided on cache 400 and cache directory 440. Write-thru mode is implemented.</p><p>The data cache 116 array 400, representing a collection of sub arrays 152, 162, is based on a 1024\u00d778 1R1W \"virtual\" 2-port array macro. It provides for a read operation followed by a write operation within a processor cycle. Read data remains valid on the array outputs until the next read operation begins even if there is an intervening write operation. Eight of these arrays are used to form a 64 KB cache 400. Two arrays are used per slot to form a 16-byte dataflow in and out of the array, represented by lines 401. Data parity is stored in the array. The last bit stored in the array is odd address parity across bits 50:59 of the address used to access the data cache.</p><p>Two arrays are needed to implement data cache directory 440. The directory implements a 28-bit real page number (RPN) along with five ECC check bits. A valid and two subline modified status bits are maintained, and three check bits are stored with them. The RPN and status fields are replicated four times to represent the four sets accessed at a particular directory array address. A 3-bit LRU is shared between two directory arrays to indicate the least recently used slot.</p><p>Slot MRU 402 logically appears as a 1024\u00d74 array where each entry is associated with a cache line in data cache 400. Bits 48:51 of the 48:57 used to access the logical array 400 are effective address bits. MRU 402 bits are updated whenever an incorrect slot guess or a cache miss occurs.</p><p>Real address (RA) MRU 430 is used to generate a prediction of real address bits 50 and 51 for addressing both cache 400 and cache directories 440. As is represented by line 309, array 430 is read as part of the AGEN stage 304 of the pipeline. If a load/store unit pipeline EXECUTE stage or latched PUTAWAY stage hold is present, then the array 430 output is not used. Real mode is also used to determine if the array 430 (FIG. 2C) output is used. Real mode determination occurs in AGEN 304 which sets control line 307 to either the real or virtual mode addressing. If real mode is determined, then load/store effective address (LSEA) 317 bits 50:51 are used by register 408 to access cache 400 and register 414 to access cache directory 440 instead of RA MRU array 430 output.</p><p>Real address (RA) MRU array 430 is updated from DC address register 408 via lines 281 whenever a wrong prediction occurs with respect to translated address bits 50:51. Also, data cache address register 408 and data cache directory address register 414 are updated with proper values of address bits 50:51 via line 381 for reaccessing the cache 400 and cache directory 440 arrays. Multiplexor 412 is then switched under control of data cache control block 470 so that address register 408 is used to access cache array 400. A similar function occurs with multiplexer 436 so that register 414 is used to access the directory array 440. The LSU 110 pipeline is stalled for one cycle to allow cache 400 and directory 440 to be reaccessed in parallel in the same cycle. Data is then returned to LSU 110 via line 461 in the following cycle.</p><h4>Instruction Cache Unit (ICU) 114</h4><p>Instruction Cache Unit (ICU) 114 contains the physical arrays, address compares, and error checking circuitry to provide a 64 KB 4-way associative instruction cache with single-bit error detection and recovery. The single-cycle cache access provides up to four instructions from a selected 128-byte cache line. Instruction cache unit 114 provides instructions to other functional units, including branch prediction.</p><h4>L2 Cache Control Unit 118</h4><p>The functions of the L2 cache control unit 118 are to provide processor 100 with access to a private L2 cache 104, plus access to memory 126 through system bus 102 which also supports memory coherence control for multiprocessor operations. L2 cache 104 is implemented as external static RAMs, with one set of SRAMs for the directory and another set for the data.</p><p>CCU 118 accepts commands from four sources: data cache unit 116, instruction cache unit 114, address translation unit 124, and system bus 102 via Processor Interface Unit (PIU) 120. To handle these commands, CCU 118 uses the buffer structure shown in FIG. 6. External and internal commands are prioritized by CCU controls 660 and placed into ADR/CMD buffer 650. ADR/CMD buffer 650 output 651 is then used to access an L2 directory (not shown) via interface lines 693 driven by driver circuits 692 to determine the hit/miss status. Additionally, appropriate address bits from bus 651 are concurrently used to access an L1 status array (not shown) in controls 660 to determine if a data cache snoop needs to be done. Finally, ADR/CMD buffer 650 is used to control updating status and tag information in the L2 directory as required, a process well understood in the art.</p><p>The four L2 hit/miss states are:</p><p>1) Modified</p><p>This line is different from memory and no other coherent cache has a copy of this line.</p><p>2) Exclusive</p><p>This line is the same as memory and no other coherent cache has a copy of this line.</p><p>3) Shared</p><p>This line is the same as memory and other caches may have a copy of this line.</p><p>4) Invalid</p><p>This cache and this processor's data cache do not have a copy of this line.</p><p>Data can be in the data cache only if it is also in the L2 cache.</p><p>Commands only stay in ADR/CMD buffer 650 for three cycles, at which time the command moves to ADR/CMD buffer 652 or ADR/CMD buffer 658. A processor command is moved into the ADR/CMD buffer 652 when said command is in ADR/CMD buffer 650 and the resources it needs, such as the data flow, are not available. The command will stay in ADR/CMD buffer 652 until the resource becomes available.</p><p>Commands are moved to the ADR/CMD buffer 658 from ADR/CMD buffer 650 by way of controls block 660 when a system bus snoop command needs to use the data path. The command will stay in ADR/CMD buffer 658 until the data path is available. Commands that need to issue address commands on the system bus are placed in ADR/CMD buffer 654. The command will stay in ADR/CMD buffer 654, being retried if necessary until a successful address status and response is received from system bus 102. If data movement is required the command is then turned over to the CCU data flow logic.</p><p>Feedback from ADR/CMD buffer 658 to ADR/CMD buffer 650 is necessary for two separate functional operations. The first feedback case is for processor read commands that encountered a shared address response from system bus 102. When the processor read command is first in the ADR/CMD buffer 650 the L2 directory is marked Exclusive, assuming that this L2 will have the only copy of the data. If another device indicates that it also has a copy of this data, by a shared address response on system bus 102, then the L2 directory must be changed from Exclusive to Shared.</p><p>The second feedback operation is used for processor write operations that must wait for a successful system bus 102 address status and response before the data can be written. For processor stores or data-cache-block-zero (dcbz) instructions that hit shared in the L2 directory, the processor must make sure that it holds the line in the exclusive state before it updates the data. Before the processor can get ownership of the shared line it may lose the line to another device, so the feedback path is provided to reinitiate the directory access.</p><p>L2 Cache Control Unit Snoop Operations</p><p>Snoop commands from system bus 102 come in through processor interface unit 120 and are presented to ADR/CMD buffer 650 via bus 567. At the same time a shift register (not shown) is started. The shift register is used to `time out` the snoop command. Snoop commands require a response within a fixed time, but the command may be delayed before being brought into ADR/CMD buffer 650 because of other higher priority commands. If the shift register `times out`, an address retry response will be issued to the system bus 102.</p><p>When a snoop command is accepted into ADR/CMD buffer 650 the L2 directory and L1 status array are checked. If the command hits in the L2 directory and the L1 status array, then a snoop command is issued to the data cache. If data must be moved to complete the snoop command, it will be first moved out of the L2 cache into the castout buffer 602. Then if the data cache has a modified copy of the data, its copy of the data will be moved to the castout buffer 602 and subsequently via bus 603 to system bus 102.</p><p>The memory management policy is such that segment and page translation table entries may not be accessed directly from the L1 data cache by the ATU 124. Consequently, another type of snoop operation is done for ATU commands. When an ATU command comes in, the data cache is snooped using the L1 status array. If the data cache has modified data, the ATU command is stopped until the data is moved from the data cache to the L2 data RAMS.</p><h4>Processor Interface Unit (PIU)/Bus Interface Unit (BIU) 120</h4><p>Referring to FIGS. 1 and 3, Processor interface unit (PIU) 120 controls and monitors all communications with the main system bus 102. The main functions of PIU 120 are:</p><p>1) Transport commands, address, and data between CCU 118 and system bus 102.</p><p>2) Prune out incoming command-address transfers that do not require the attention of CCU 118.</p><p>3) Compensate for clock domain differences between the processor 100 units and 6xx Bus 102.</p><p>4) Maintain and monitor system checkstop logic for Processor Run-Time Diagnostics (PRD).</p><p>System bus interface, or processor interface unit (PIU) 120, in general, receives commands from L2 cache controller (CCU) 118 on lines 663, transforms them in block 552 to the system bus clock domain and presents them on lines 559 to bus 102. It then monitors status and response information received on lines 559 for the command and informs CCU 118 on lines 555. As commands arrive from the bus on lines 559, PIU 120 categorizes them into one of three categories: master operations, snoop operations and other operations. Master operations are those originated by CCU 118 on the same chip 100 as PIU 120. These operations need to the monitored for status and response, updating CCU 118 as this information arrives. Snoop operations are those that are originated by other bus units and require the attention of CCU 118. PIU 120 will pass these operations on to CCU 118 indicating a snoop and continue to monitor status and response. Other operations are those originated by other units that do not require the attention of the CCU 118. For these operations, PIU 120 only monitors status and response without informing CCU 118.</p><h4>Clock Distribution and Control 122</h4><p>Clock distribution and control 122 contains the logic for gating, shaping, and distributing the internal clocks as well as the off chip cache and directory clocks.</p><p>During normal system operation, all clocks are derived from and synchronized to a single oscillator input by a phase locked loop (PLL) circuit which provide a `zero delay` clock tree relative to the input oscillator and also a frequency multiplier function. Microprocessor 100 uses this function to run the internal processor logic at a faster rate than the system bus 102 interface logic, which runs at the same rate as the oscillator input. A second on-chip 100 PLL is employed to derive the clocks for the off-chip L2 cache 104. This PLL uses the frequency multiplied output of the first PLL as its input. An off-chip feedback path, constructed to match the path to the cache chips, results in a low skew delay relative to the processor clock domain and allows for synchronous communication between processor 100 and cache 104.</p><h4>Part 2</h4><h4>Multiway-Associative External Microprocessor Cache</h4><p>Referring to FIG. 10, in accordance with a preferred embodiment of the invention, a multiway associative external microprocessor cache (L2 cache 104) is provided which reduces the latency penalty by guessing which slot is to be fetched first, and then subsequently fetching corresponding data from alternate slots as a hedge during the period in which the cache directory 698 is being searched. The preferred embodiment is a 2-way associative cache, which will be described in more detail, but the invention could be used with other cache organizations.</p><p>Referring further to FIG. 10 in connection with FIGS. 1, and 3-6, microprocessor 100 is connected to system bus 102, to L2 directory SRAM 698 over address bus 693 and tags bus 697; and to L2 cache SRAMS 699 over address bus 691 and data lines 645.</p><p>Referring to FIG. 7, in connection with FIG. 10, in operation, it takes three cycles to access a pipelined SRAM. As shown in FIG. 7, one cycle 300 is used to send the address to the SRAM 699, the second cycle 304 accesses array 699 itself, and the third cycle 306 transfers data back to the microprocessor on lines 645. (While not shown in FIG. 7, with current technology, each of these cycles will usually correspond to one microprocessor 100 clock cycle.) After the three-cycle initial latency, data can be sent to processor 100 on every subsequent clock cycle in normal pipeline fashion.</p><p>L2 cache directories are also usually constructed from external SRAM 698 modules to save space on the microprocessor chip. These arrays may be the same speed as the data arrays 699, but in the present embodiment, and as is shown in FIG. 7, a faster array 698 is chosen, resulting in a two cycle latency (clock cycles 1 and 2 only, with data appearing on the data bus in clock cycle 2.) The choice of the faster array improves performance, but does not materially affect the concept of the overall invention. The address used to access cache 699 and cache directory 698 are components of the same address, and are simultaneously available. Directory 698 and cache 699 are accessed in parallel, with the cache address bit on line 691 that corresponds to the slot value either defaulting to a 0 or a 1, or alternatively being based on some recent history of which slot 600, 601 was previously used. This address is sent to the SRAMs 699 in Cycle 1, and is used to fetch the first portion of the cache line, call it word 0 of slot 0 (600) (WO/SO in FIG. 7). During clock cycle 2 (SRAM cycle 304), the SRAM array 699 is accessed, and the address for the second word (or doubleword or quadword, depending on how many arrays are used) is sent to the array on line 691. Normally, the second word accessed is sequential data, or word 1 of the selected slot 600 or 601. However, in the present invention, the second word accessed (address cycle 300, clock cycle 2) is word 0 of the alternate slot 601, or WO/S1. During clock cycle 3, the address of the third word is sent to array 699, and in normal practice, this would be word 2 of the selected slot, but in the present invention, this will be word 1 of the originally guessed slot 600, designated W1/S0. Thus, the microprocessor alternately fetches data from each slot 600, 601 of external cache 699 until the directory 698 has been accessed and its tags (on line 697) compare with the cache address, at which point alternate slot fetching ceases, and the remainder of the correct cache line data is accessed sequentially. In the preferred embodiment, the correct slot is known after three addresses have been sent to the cache (i.e., the end of directory compare in clock cycle 3) and beginning with Cycle 4 and on subsequent cycles, only the data from the selected slot is accessed. In FIG. 7, where correct slot S0 is the initial guess, this sequential operation is shown in the address cycle 300 sequence for clock cycles 4 and 5 by the word designations W2/S0, W3/S0. In FIG. 8, where the correct slot S1 was not guessed first, this sequential operation is shown in the address cycle 300 sequence for clock cycles 4 through 6 by the word designations W1/S1, W2/S1, W3/S1.</p><p>With an ideal 2-way external cache implemented from standard arrays (the method 1 version), the first data is available in three cycles, with subsequent data being available every cycle after that. This is known as 3-1-1-1 for a line which requires four transfers, in shorthand. In the present invention, with random or default selection of the first slot, half the time the first word accessed will be the correct one, shown as Case A in FIG. 7, and half the time the second word accessed will be the correct one (Case B, FIG. 8), so average latency for the first word increases by one-half a cycle, from 3 cycles to 3.5 cycles. Latency to the second word, on average is two more cycles, and thereafter one cycle, resulting in a 3.5-2-1-1 overall latency. Latency for the method where the directory is first searched before accessing the cache, using the same types of arrays, would be 6-1-1-1 (2 cycles to access the directory, 1 cycle to compare the tags, plus 3 more to access the cache itself). Latency for the first data, which is a very important performance parameter, is reduced from six cycles to 3.5 cycles using the present invention. Total latency to the second word is reduced from seven cycles to 5.5 cycles, and all subsequent words fetched have 1.5 cycles better latency than the prior art allows.</p><p>Writing of the cache 699 is accomplished in traditional fashion; that is, directory 698 must first be searched to establish which slot 600, 601 is the correct one. Timing of this operation is the same for any of the three methods described herein, since the SRAM write enable signal must be valid when the initial address is sent to the array.</p><h4>Advantages over the Prior Art</h4><p>The advantages of the method of the preferred embodiments of this invention include avoiding increased access latency in cache accessing due to the need to search a directory before beginning the cache access.</p><h4>Alternative Embodiments</h4><p>It will be appreciated that, although specific embodiments of the invention have been described herein for purposes of illustration, various modifications may be made without departing from the spirit and scope of the invention.</p><p>Accordingly, the scope of protection of this invention is limited only by the following claims and their equivalents.</p><?DETDESC description=\"Detailed Description\" end=\"tail\"?></description>"}], "inventors": [{"first_name": "Steven Lee", "last_name": "Gregor", "name": ""}, {"first_name": "Thomas Leo", "last_name": "Jeremiah", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "INTERNATIONAL BUSINESS MACHINES CORPORATION"}, {"first_name": "", "last_name": "INTERNATIONAL BUSINESS MACHINES CORPORATION", "name": ""}], "ipc_classes": [{"primary": true, "label": "G06F  13/14"}], "locarno_classes": [], "ipcr_classes": [{"label": "G06F  12/08        20060101A I20051008RMEP"}], "national_classes": [{"primary": true, "label": "711128"}, {"primary": false, "label": "711140"}, {"primary": false, "label": "711E12018"}, {"primary": false, "label": "711154"}, {"primary": false, "label": "711129"}], "ecla_classes": [{"label": "G06F  12/08B10"}], "cpc_classes": [{"label": "G06F  12/0864"}, {"label": "G06F  12/08"}, {"label": "G06F  12/0864"}], "f_term_classes": [], "legal_status": "Expired - Fee Related", "priority_date": "1997-06-12", "application_date": "1997-06-12", "family_members": [{"ucid": "TW-393604-B", "titles": [{"lang": "EN", "text": "Multiway associative external microprocessor cache"}]}, {"ucid": "KR-19990006468-A", "titles": [{"lang": "EN", "text": "Multidirectional Associative External Microprocessor Cache"}, {"lang": "KO", "text": "\ub2e4\uc911 \ubc29\ud5a5 \uc5f0\uad00 \uc678\ubd80 \ub9c8\uc774\ud06c\ub85c\ud504\ub85c\uc138\uc11c \uce90\uc26c"}]}, {"ucid": "KR-100308682-B1", "titles": [{"lang": "EN", "text": "MULTIWAY ASSOCIATIVE EXTERNAL MICROPROCESSOR CACHE"}, {"lang": "KO", "text": "\ub2e4\uc911\ubc29\ud5a5\uc5f0\uad00\uc678\ubd80\ub9c8\uc774\ud06c\ub85c\ud504\ub85c\uc138\uc11c\uce90\uc26c"}]}, {"ucid": "US-5909694-A", "titles": [{"lang": "EN", "text": "Multiway associative external microprocessor cache"}]}, {"ucid": "CA-2240619-A1", "titles": [{"lang": "EN", "text": "MULTIWAY ASSOCIATIVE EXTERNAL MICROPROCESSOR CACHE"}, {"lang": "FR", "text": "CACHE EXTERNE ASSOCIATIVE MULTIPLE DE MICROPROCESSEUR"}]}]}