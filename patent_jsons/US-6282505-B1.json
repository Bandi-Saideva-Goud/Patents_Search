{"patent_number": "US-6282505-B1", "publication_id": 72771448, "family_id": 14152927, "publication_date": "2001-08-28", "titles": [{"lang": "EN", "text": "Multi-port memory and a data processor accessing the same"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA72605486\"><p>In a cache memory of a super-scalar or VLIW processor to concurrently process a plurality of memory accesses, to provide a memory capable of multi-port access operation, there is provided a unit which subdivides the cache memory into a plurality of memory banks for concurrent operations thereof and which allocates memory ports independently to the respective memory banks. In a first cycle, the first and second memory ports are allocated to the first and second memory banks, respectively. If a hit occurs, the plural accesses are completed in one cycle. If a miss results, the first and second memory ports are allocated respectively to the second and first memory banks in a second cycle.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6282505-B1-CLM-00001\" num=\"1\"><claim-text>1. A multi-port cache memory comprising:</claim-text><claim-text>a plurality of memory banks, each of which stores plural data and addresses in pairs; </claim-text><claim-text>determining means for determining whether an address corresponding to an address inputted from an external device is stored in the memory bank; </claim-text><claim-text>means for accessing and outputting data paired with the address corresponding to the address inputted from the external device; </claim-text><claim-text>plural memory ports, each having an address input port and a data output port; </claim-text><claim-text>first means for selecting each of a plurality of addresses inputted from address input ports and inputting the selected address to either one of the plural memory banks; and </claim-text><claim-text>means for outputting data read from each of the memory banks to a data output port corresponding to the address input port from which the address inputted to the memory bank is supplied. </claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6282505-B1-CLM-00002\" num=\"2\"><claim-text>2. A multi-port memory in accordance with claim <b>1</b>, wherein:</claim-text><claim-text>the first means inputs, in a first cycle, a first address supplied from a first memory port of the plural memory ports to a first memory bank of the plural memory banks and a second address supplied from a second memory port of the plural memory ports to a second memory bank of the plural memory banks; </claim-text><claim-text>the first means inputs, when the determining means of the first memory bank determines absence of data to be paired with the first address, the first address to the second memory bank in a cycle after the first cycle; and </claim-text><claim-text>the first means inputs, when the determining means of the second memory bank determines absence of data to be paired with the second address, the second address to the first memory bank in a cycle after the first cycle. </claim-text></claim>"}, {"num": 3, "parent": 2, "type": "dependent", "paragraph_markup": "<claim id=\"US-6282505-B1-CLM-00003\" num=\"3\"><claim-text>3. A data processor connected for use to the multi-port memory serving as a data memory in accordance with claim <b>2</b>, comprising:</claim-text><claim-text>means for decoding information of a predetermined number of bits arranged in an instruction of accessing the data memory; and </claim-text><claim-text>means for executing the instruction in accordance with a result of the decoding in which the information is used for specifying one of the plural memory ports to be accessed. </claim-text></claim>"}, {"num": 4, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6282505-B1-CLM-00004\" num=\"4\"><claim-text>4. A multi-port memory in accordance with claim <b>1</b>, wherein:</claim-text><claim-text>the first means inputs, in a first cycle, a first address supplied from a first memory port of the plural memory ports to all memory banks of the plural memory banks. </claim-text></claim>"}, {"num": 5, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6282505-B1-CLM-00005\" num=\"5\"><claim-text>5. A data processor connected for use to the multi-port memory serving as a data memory in accordance with claim <b>1</b> comprising:</claim-text><claim-text>means for decoding information of a predetermined number of bits arranged in an instruction of accessing the data memory; and </claim-text><claim-text>means for executing the instruction in accordance with a result of the decoding, wherein the information is used for specifying one of the plural memory ports to be accessed. </claim-text></claim>"}, {"num": 6, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6282505-B1-CLM-00006\" num=\"6\"><claim-text>6. A multi-port cache memory located between a processor and a main memory for temporally storing plural copies of data stored in the main memory, and for receiving an address from the processor and sending a copy of data designated by the address if such a copy exists therein, said multi-port cache memory comprising:</claim-text><claim-text>a plurality of memory banks, each of which has address storage portions for storing plural partial addresses and data storage portions for storing plurality of copies, wherein a partial address includes a part of bits of an address issued by an instruction register of the processor, and a pair of a partial address and a copy is retrieved by using other part of bits of the processor issuing address; </claim-text><claim-text>a first selector for receiving a plurality of addresses from plural instruction registers of the processor and, respectively directing the received addresses to the memory banks to select a pair of a partial address and a copy, wherein each instruction register also designates a destination register in a register file; </claim-text><claim-text>each of the memory banks having a comparator for comparing a partial address read-out therefrom with a part of address bits of the processor issuing address, the memory bank outputting a copy as its output if coincidence is detected, wherein the address bits are selected from the same bit locations of the partial address; and </claim-text><claim-text>a second selector for receiving a plurality of copies outputted from each of the memory banks and, respectively outputting the received copies in connection with designation registers specified with the plural instruction registers. </claim-text></claim>"}, {"num": 7, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6282505-B1-CLM-00007\" num=\"7\"><claim-text>7. A computer system, comprising:</claim-text><claim-text>a host processor; </claim-text><claim-text>a main memory arranged to store programs and data; and </claim-text><claim-text>a multi-port data cache arranged to accommodate one or more memory access operations concurrently from said host processor so as to prevent access collision, said multi-port data cache comprising: </claim-text><claim-text>a plurality of memory banks each of which stores plural data and addresses in pairs, and each of which has a memory port indicating an address input port and a data output port; </claim-text><claim-text>first selector means arranged to receive a plurality of addresses from said host processor, and respectively direct the addresses to said memory banks; and </claim-text><claim-text>second selector means arranged to receive a plurality of copies of data outputted from each of said memory banks, and respectively produce the copies of data to said host processor as designated by the addresses to said memory banks. </claim-text></claim>"}, {"num": 8, "parent": 7, "type": "dependent", "paragraph_markup": "<claim id=\"US-6282505-B1-CLM-00008\" num=\"8\"><claim-text>8. A computer system in accordance with claim <b>7</b>, wherein each of said memory banks contains a comparator arranged to compare a partial address read-out therefrom with a part of the address issued from said host processor, and produce a copy of data if the partial address read-out corresponds to the address issued form said host processor.</claim-text></claim>"}, {"num": 9, "parent": 7, "type": "dependent", "paragraph_markup": "<claim id=\"US-6282505-B1-CLM-00009\" num=\"9\"><claim-text>9. A computer system in accordance with claim <b>7</b>, wherein all of said memory banks can be accessed concurrently by said host processor during a single cycle.</claim-text></claim>"}, {"num": 10, "parent": 7, "type": "dependent", "paragraph_markup": "<claim id=\"US-6282505-B1-CLM-00010\" num=\"10\"><claim-text>10. A computer system in accordance with claim <b>7</b>, wherein said host processor comprises a plurality of register files arranged to store data and instructions for memory access operations; and an arithmetic logic unit (ALU) arranged to execute instructions for specifying a selected memory port of said memory banks to be accessed.</claim-text></claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES54716321\"><?BRFSUM description=\"Brief Summary\" end=\"lead\"?><h4>TECHNICAL FIELD</h4><p>The present invention relates to a cache memory to increase the data access speed in a computers and data processors, and in particular, to a cache memory suitable for a super-scalar processor or a very long instruction word processor (to be referred to as a VLIW processor herebelow) capable of executing a plurality of memory access operations during one cycle.</p><h4>BACKGROUND ART</h4><p>When a super-scalar processor and/or a VLIW processor is employed in a computer or a data processor, a plurality of memory accesses during one cycle depending on cases. To conduct a plurality of memory access operations during one cycle, it is necessary to use memory ports as many as there are memory accesses during one cycle. A conventional example of a dual-port memory capable of conducting a plurality of memory accesses during one memory cycle has been described in pages 168 to 170 of an article \u201cPower and PowerPC\u201d published from Morgan Kaufmann Publishers, Inc. in 1994.</p><p>In accordance with a first method, there is used a memory including memory cells which can be accessed via two ports. For one memory cell in which information of one bit is stored, there are disposed two sets of address decoders, two sets of word lines, two sets of data bit lines, and two sets of sense amplifiers. This leads to a memory which can be accessed via two ports. The first method requires two sets of work lines and data bit lines. When compared with the single-port configuration, the memory cell area is doubled to implement the memory having the same memory capacity.</p><p>In a second method, the conventional single-port memory is disposed in a duplicated constitution to implement a memory which can be accessed via two ports. When compared with the dual-port memory of the first embodiment, this memory differs in that the memory cells are also duplicated. Consequently, to write data in the memory, the same data is required to be written in both memory areas at the same address. Since the memory cells are duplicated in the second method, the capacity of the necessary memory cells is two times that of the inherent memory. In other words, only one half of the actual memory cells can be used to store independent data. Namely, for the same memory capacity, the area of memory cells is doubled when compared with the prior art.</p><p>Between the first method and the second method, there exists only quite a small difference in the memory cell area. Additionally, in the first method using the memory cells in a shared manner, when the memories are accessed at the same address via two ports, one of the accesses is set to a wait state and hence the access time inevitably becomes doubled.</p><p>In a third method, the memory is subdivided into two memory banks in accordance with addresses. In an operation to access two memory banks, the accesses are simultaneously processed. Data at an address exists only in either one of the memory banks. Consequently, when compared with the dual-port memory, there is required a selector for each of an address input section and a data output section to establish a correspondence between the memory ports and the memory banks. In this connection, the lower-most bit of the accessing address is used to indicate the selection for the selector.</p><p>Since the memory cells are not duplicated in the third method, the capacity of memory cells indicates the inherent memory capacity. When compared with the second method, the memory capacity is doubled with the same number of memory cells. However, the memory bank to be accessed is determined by one bit of the address in the third method, the total memory access time includes, in addition to the memory access time, the selection time of the selector. In consequence, there is a fear of elongation of the total memory access time when compared with the second method.</p><p>In a fourth method, one single-port memory is used in a time-shared fashion. One cycle is subdivided into two sections in which a first-half cycle is used for an access via a first memory port and a second-half cycle is utilized for an access via a second memory port to thereby implement a dual-port memory.</p><p>Since the memory cells and the like are not duplicated in the fourth method, the capacity of memory cells directly indicates the inherent memory capacity like in the third method. However, to execute two memory access operations during one cycle, the memory access operation is required to be increased, i.e., the memory cell access time is required to be reduced to half that of the original access time. Conversely, when the memory cell access time is used as the reference (when the access time is kept unchanged), the total cycle time is to be doubled to achieve two memory access operations during one cycle.</p><p>The conventional multi-port memory described above is attended with the following problems. When the memory cell area is kept retained, the memory capacity is lowered to half that of memory cells or the memory access time becomes longer. Alternatively, when the memory cell access time is used as the criterion, the total cycle time is to be doubled.</p><p>It is therefore an object of the present invention, which solves the problems above, to provide a multi-port memory in which the memory capacity is substantially equal to that of memory cells in the single-port memory and a plurality of memory access operations can be simultaneously executed substantially without elongating the memory access time, without causing a bank access collision, and without increasing the total cycle time.</p><h4>DISCLOSURE OF INVENTION</h4><p>In accordance with the present invention, there is provided a multi-port memory subdivided into a plurality of memory banks, each memory banks including means for storing therein data and an address of the data in a pair, determining means for determining whether or not an address corresponding to an address inputted from an external device exists in the memory bank, and means for accessing and outputting data paired with the address to an external device. The memory comprises first means for selecting each of a plurality of addresses inputted from the plural memory ports and inputting the selected address to either one of the plural memory banks and means for outputting data read from each of the memory banks to a data output port corresponding to the memory port from which the address inputted to the memory bank is supplied.</p><p>Moreover, In the multi-port memory above, the first means inputs, in a first cycle, a first address supplied from a first memory port of the plural memory ports to a first memory bank of the plural memory ports and a second address supplied from a second memory port of the plural memory ports to a second memory bank of the plural memory ports, the first means inputs, when the determining means of the first memory bank determines absence of data to be paired with the first address, the first address to the second memory bank in a cycle after the first cycle, and the first means inputs, when the determining means of the second memory bank determines absence of data to be paired with the second address, the second address to the first memory bank in a cycle after the first cycle.</p><p>Moreover, in the multi-port memory described above, the first means inputs, in a first cycle, a first address supplied from a first memory port of the plural memory ports to all memory banks of the plural memory ports.</p><p>Next, there is provided a data processor connected for use to the multi-port memory, the memory being used as a data memory. The processor comprises means for decoding information of a predetermined number of bits arranged in an instruction of accessing the data memory, the instruction being selected from instructions of a control program of the data processor, and means for executing the instruction in accordance with a result of the decoding. The information is information specifying one of the plural memory ports to be accessed.</p><p>The multi-port memory operates as follows.</p><p>An address from the first memory port is inputted to the first memory bank in the first cycle and then a check is conducted to determine whether or not data to be accessed has been stored in the first memory bank. If the data exists therein, the data is accessed to thereby finish processing on the first memory port side. If the data is missing, the address is inputted to the second memory bank in the second cycle and then a check is conducted to determine whether or not data to be accessed has been stored in the second memory bank. If the data exists therein, the data is accessed to thereby finish the processing of the first memory port.</p><p>On the other hand, an address is inputted via the second memory port in the first cycle to a memory bank other than the first memory bank such that a check is made to determine whether or not data to be accessed has been stored therein. If this is the case, the data is accessed to thereby finish the processing of the second memory port. If the data is missing, an address is inputted to a memory bank other than the second memory bank in the second cycle such that a check is made to determine whether or not data to be accessed has been stored therein. If the data exists therein, the data is accessed to thereby finish the processing of the second memory port.</p><p>Incidentally, in first cycle of the operation above, since the first memory port accesses the first memory bank while the second memory port accesses a memory bank other than the first memory bank, there is prevented the access collision and hence both operations can be simultaneously, i.e., concurrently processed.</p><p>Additionally, in second cycle, since the first memory port accesses the second memory bank while the second memory port is accessing a memory bank other than the second memory bank, there is prevented the access collision also in this case and hence both operations can be concurrently processed.</p><p>Furthermore, when there is issued only one memory access, the memory access can be completed in one cycle by accessing all memory banks in the first cycle. That is, an address of the first memory port is inputted to all memory banks in the first cycle and a check is made to determined one of the memory banks in which the data to be accessed has been stored. When the data exists in either one of the memory banks, the data is accessed to thereby terminate the processing of the first memory port.</p><p>Moreover, in a data processor connected to the multi-port memory above as its data memory, when bit information is appropriately specified in an instruction to access the data memory, it is possible during the first cycle to access the memory bank in which the access data is stored. This makes it possible to conduct a plurality of memory accesses during one cycle.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF DRAWINGS</h4><p>FIG. 1 is a block diagram showing a cache memory and a peripheral block thereof in an embodiment in accordance with the present invention;</p><p>FIG. 2 is a diagram showing operation in a first cycle to simultaneously process two memory accesses in the cache memory shown in FIG. 1;</p><p>FIG. 3 is a diagram showing operation in a second cycle to simultaneously process two memory accesses in the cache memory shown in FIG. 1;</p><p>FIG. 4 is a diagram showing operation to process one memory access in the cache memory shown in FIG. 1;</p><p>FIG. 5 is a block diagram entirely showing a data processor connected to the cache memory shown in FIG. 1; and</p><p>FIG. 6 is a block diagram showing a cache memory and a peripheral block thereof in another embodiment in accordance with the present invention.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>BEST MODE FOR CARRYING OUT THE INVENTION</h4><p>Referring now to the drawings, description will be given of embodiments in accordance with the present invention.</p><p>FIG. 5 shows in a block diagram a data processor in an embodiment of the present invention. The data processor of the embodiment includes a processor <b>410</b> to execute instructions, an instruction cache <b>420</b> as a cache memory for instructions, a data cache <b>430</b> as a cache memory for data, and a main memory <b>440</b>. These components are connected to each other via address and data buses. The instruction cache <b>420</b> is used to keep copies of program areas of the main memory <b>440</b> and the data cache <b>430</b> is employed to keep copies of data areas of the main memory <b>440</b>.</p><p>The processor <b>410</b> includes a register file <b>106</b> to store data, an arithmetic unit <b>412</b> to execute operations in accordance with instructions, and a control circuit <b>413</b> to control these elements. The processor <b>410</b> reads an instruction as a processing unit of a program from the instruction cache <b>420</b> and then the control circuit <b>413</b> drives in accordance with indication of the instruction the circuits such as the register file and the arithmetic unit in the processor <b>410</b>.</p><p>There are provided the following kinds of instructions such as an instruction in which data in the register file <b>106</b> is operated by the arithmetic unit <b>412</b> or the like and a result of the operation is stored in the register file <b>106</b>. In addition, there are supported an instruction to write the contents of the register file <b>106</b> in the data cache <b>430</b> and an instruction to write the contents of the main memory <b>440</b> or the data cache <b>430</b> in the register file <b>106</b>.</p><p>In this configuration, the data cache <b>430</b> is a cache memory having two memory ports. When data to be accessed exists in the data cache <b>430</b>, two data accesses can be simultaneously accomplished. Data read as an access result from the data cache <b>430</b> is sent to the processor <b>410</b> via a signal line (a bus line or the like) which establishes a connection between the data cache <b>430</b> and the processor <b>410</b>. FIG. 1 shows in detail a partial configuration of the data cache <b>430</b>.</p><p>FIG. 1 includes an internal block configuration of instruction registers <b>100</b> and <b>110</b>, a register file <b>106</b>, address calculators <b>107</b> and <b>117</b> of the processor <b>410</b> and the data cache <b>430</b> (enclosed with broken lines).</p><p>In each of the instruction registers <b>100</b> and <b>110</b>, there is set an instruction for a memory access. The instructions set to the registers <b>100</b> and <b>110</b> are respectively subdivided into five sections. The five sections respectively include operation code fields <b>101</b> and <b>111</b> to stipulate types of operation, port specifying hint fields <b>102</b> and <b>112</b> indicating information for specifications of access ports to the data cache, destination register specification fields <b>103</b> and <b>113</b>, base address register specification fields <b>104</b> and <b>114</b>, and displacement specification fields <b>105</b> and <b>115</b>. Thanks to the constitution, the processor <b>410</b> can simultaneously execute two instructions.</p><p>Assume that an instruction \u201cLoad (LD)\u201d to transfer data from a memory to a register has been set to the instruction register <b>100</b> in FIG. <b>1</b>. The Load instruction can be determined by interpreting the operation code field <b>101</b> by a decoder or the like, not shown. When the instruction is executed, data of a register Rb0 specified by the base address register specification field <b>104</b> is read from the register file <b>106</b>, the value of the data is added to displacement disp<b>0</b> in the displacement specification field <b>105</b>, the memory is accessed with the result of addition as an access key to read data therefrom, and then the obtained data is stored in a register Rd0 of the register file <b>106</b>, the register Rd0 being specified by the destination register specification field <b>103</b>.</p><p>Moreover, it is assumed that the \u201cLoad (LD)\u201d instruction to transfer data from the memory to a register has been similarly set to the instruction register <b>110</b> of FIG. <b>1</b>. This instruction can also be determined by interpreting the operation code field <b>111</b> by a decoder or the like, not shown. When the instruction is executed, data of a register Rb1 specified by the base address register specification field <b>114</b> is similarly read from the register file <b>106</b>, the value of the data is added to displacement disp<b>1</b> in the displacement specification field <b>115</b>, the memory is accessed with the result of addition as an access key to read data therefrom, and then the obtained data is stored in a register Rd1 of the register file <b>106</b>, the register Rd1 being specified by the destination register specification field <b>113</b>.</p><p>When the instruction in the instruction register <b>100</b> is executed, a memory port 0 of the data cache <b>430</b> is accessed, whereas when the instruction in the instruction register <b>110</b> is executed, a memory port 1 of the data cache <b>430</b> is accessed. Therefore, when the processor <b>410</b> executes two Load instructions at the same time, two accesses to the data cache are simultaneously issued via the signal lines between the processor <b>410</b> and the data cache <b>430</b>. It is assumed that the signal can simultaneously transfer two access requests of two instructions.</p><p>The data cache <b>430</b> includes two memory banks <b>125</b> and <b>135</b>, four selectors <b>108</b>, <b>118</b>, <b>146</b>, and <b>156</b>, and a control circuit <b>160</b> to control these components. The selector <b>108</b> conducts selection to determine whether an input address to the memory bank 0 (<b>125</b>) is to be inputted from a memory port 0 (which is a port for the memory bank 0 and comprehensively indicates an address input port and a memory data output port for the memory 0) or from a memory port 1 (which is a port for the memory bank 1 and comprehensively indicates an address input port and a memory data output port for the memory 1). The selector <b>118</b> conducts selection to determine whether an input address to the memory bank 1 (<b>135</b>) is to be inputted from the memory port 0 or from the memory port 1. The selector <b>146</b> conducts selection to determine whether read data to be outputted to the memory port 0 is to be supplied from the memory bank 0 (<b>125</b>) or from the memory port 1 (<b>135</b>). The selector <b>156</b> conducts selection to determine whether read data to be outputted to the memory port 1 is to be fed from the memory bank 0 (<b>125</b>) or from the memory port 1 (<b>135</b>).</p><p>The memory bank 0 (<b>125</b>) is a cache memory of a two-way set-associative operation. Read operations of memory arrays <b>121</b> to <b>124</b> are carried out by decoding low-order bits of the address selected by the selector <b>108</b>. In the memory arrays <b>121</b> and <b>122</b>, there are stored tags of ways 0 and 1, respectively. Data of way 0 and that of way 1 are respectively stored in the memory arrays <b>123</b> and <b>124</b>. The tags of way 0 and way 1 respectively read from the memory arrays <b>121</b> and <b>122</b> are respectively compared by comparators <b>141</b> and <b>142</b> with high-order bits of the address selected by the selector <b>108</b>. In a state in which it is determined as a result of comparisons that there exists a matching address, namely, in a hit, data corresponding to the matching way is selected by a selector <b>143</b> from the data of way 0 and data of way 1 respectively read from the memory arrays <b>123</b> and <b>124</b>, and the selected data is delivered as output data from the memory bank 0 (<b>125</b>). A state in which the matching address is not found is called a miss.</p><p>The memory bank 1 (<b>135</b>) is, like the memory bank <b>125</b> above, a cache memory of a two-way set-associative operation. Read operations of memory arrays <b>131</b> to <b>124</b> are carried out by decoding low-order bits of the address selected by the selector <b>118</b>. In the memory arrays <b>131</b> and <b>132</b>, there are stored tags of ways 0 and 1, respectively. Data of way 0 and that of way 1 are respectively stored in the memory arrays <b>133</b> and <b>134</b>. The tags of way 0 and way 1 respectively read from the memory arrays <b>131</b> and <b>132</b> are respectively compared by comparators <b>151</b> and <b>152</b> with high-order bits of the address selected by the selector <b>118</b>. In a state in which it is determined as a result of comparisons that there exists a matching address, namely, in a hit, data corresponding to the matching way is selected by a selector <b>153</b> from the data of way 0 and data of way 1 respectively read from the memory arrays <b>133</b> and <b>134</b> and the selected data is delivered as output data from the memory bank 1 (<b>135</b>). A state in which the matching address is not found is called a miss.</p><p>The selectors <b>146</b> and <b>156</b> conduct operations such that the data outputted from each of the respective memory banks is outputted to the memory port 0 when the read input address is received from the memory port 0 and to the memory port 1 when the read input address is from the memory port 1. Thereafter, the read data outputted from the selector <b>146</b> is stored in a register of the register file specified by the destination register specification field Rd0 (<b>103</b>) of the instruction register <b>100</b>. Additionally, the read data outputted from the selector <b>15</b> is stored in a register of the register file specified by the destination register specification field Rd1 (<b>113</b>) of the instruction register <b>100</b>.</p><p>In this connection, although the selectors <b>143</b> and <b>153</b> respectively generating output data from the memory banks 0 (<b>125</b>) and 1 (<b>135</b>) and the selectors <b>146</b> and <b>156</b> respectively generating data to be respectively outputted to the memory port 0 and 1 are separately disposed in the configuration of the embodiment, it may also be possible to dispose two selectors each having four inputs and one output so as to implement a selector configuration achieving the same function of four selectors <b>143</b>, <b>153</b>, <b>146</b>, and <b>156</b>. Namely, assuming that data items read from the memory arrays <b>124</b>, <b>124</b>, <b>133</b>, and <b>134</b> are used as inputs of four-input selectors, it is only necessary that there are arranged two four-input and one-output selectors such that an output from one of the selectors is delivered to the memory port 0 and the other one thereof is fed to the memory port 1. In this case, the indication of selection is required to be independently conducted for the 4-input selectors.</p><p>The operation accomplished in the data cache <b>430</b> is controlled by the control circuit <b>160</b>. In this connection, signal lines for the control circuit <b>160</b> to gather states of respective constituent elements of the data cache and signal lines for the control circuit <b>160</b> to control the elements are not shown in the diagram. Incidentally, an arrow line specifying the register file <b>106</b> from the destination register specification field Rd0 (<b>103</b>) of the instruction register <b>100</b> passes the inside of the data cache <b>430</b> in FIG. <b>1</b>. However, this is only for simplicity of drawing, and it is not actually necessary that the line passes through the data cache <b>430</b>. This is also the case with an arrow line specifying the register file <b>106</b> from the destination register specification field Rd1 (<b>113</b>) of the instruction register <b>110</b> passes the inside of the data cache <b>430</b> in the diagram.</p><p>Next, description will be given of operation of the data cache <b>430</b> by referring to FIGS. 2, <b>3</b>, and <b>4</b>.</p><p>FIGS. 2 and 3 show operation to simultaneously process two Load instructions described in conjunction with FIG. <b>1</b>. Operations respectively of the first and second cycles are shown in FIGS. 2 and 3, respectively. In this regard, the term \u201ccycle\u201d indicates timing to operate the data cache <b>430</b> and has a fixed relationship with the clock signal to operate the processor <b>410</b> and the system clock signal to drive the overall data processor. For example, one system clock signal corresponds to one cycle or a plurality of system clock signals correspond to one cycle.</p><p>In the first cycle, as can be seen from FIG. 2, the input address selector <b>108</b> of the memory bank 0 selects the side of memory port 0, namely, an access address of a Load instruction set to the instruction register <b>100</b>. With the address, a search is conducted for the memory bank 0 (<b>125</b>) which is a cache memory of a two-way set-associative type. When a hit occurs with the address, the associated data is outputted from the selector <b>143</b>. Through the selector <b>146</b>, the data from the memory bank 0 (<b>125</b>) is outputted as read data on the memory port 0 side to thereby terminate the access on this side. If a miss occurs with the address, the operation of the first cycle is interrupted at the point and then the control circuit <b>160</b> determines that the memory bank 1 (<b>135</b>) is to be accessed in the second cycle.</p><p>On the other hand, as shown in FIG. 2, the input address selector <b>118</b> of the memory bank 1 selects the side of memory port 1, namely, an access address of a Load instruction set to the instruction register <b>110</b>. With the address, a search is made for the memory bank 1 (<b>135</b>) which is a cache memory of a two-way set-associative type. When a hit occurs with the address, the associated data is outputted from the selector <b>153</b>. Through the selector <b>156</b>, the data from the memory bank 1 (<b>135</b>) is outputted as read data on the memory port 1 side of the data cache <b>430</b> to thereby terminate the access on this side. If a miss occurs with the address, the operation of the first cycle is interrupted at the point and then the control circuit <b>160</b> determines that the memory bank 0 (<b>125</b>) is to be accessed in the second cycle.</p><p>FIG. 3 shows operation in the second cycle when both of the accesses through the memory ports 0 and 1 result in a miss respectively in the memory banks 0 (<b>125</b>) and 1 (<b>135</b>). The second cycle is advanced in time with respect to the first cycle.</p><p>In the second cycle, the input address selector <b>108</b> of the memory bank 0 selects the side of memory port 1, i.e., an access address of a Load instruction set to the instruction register <b>110</b>. With the address, a search is conducted for the memory bank 0 (<b>125</b>) which is a cache memory of a two-way set-associative type. When a hit occurs with the address, the corresponding data is outputted from the selector <b>143</b>. Through the selector <b>146</b>, the data from the memory bank 0 (<b>125</b>) is outputted as read data on the memory port 1 side to thereby terminate the access on this side. If a miss occurs with the address, the operation of the second cycle is interrupted at the point and then the control circuit <b>160</b> determines that the main memory <b>440</b> is to be accessed in the third cycle.</p><p>Similarly, the input address selector <b>118</b> of the memory bank 1 selects the side of memory port 0, namely, an access address of a Load instruction set to the instruction register <b>100</b>. With the address, a search is made for the memory bank 1 (<b>135</b>) which is a cache memory of a two-way set-associative type. When a hit occurs with the address, the associated data is outputted from the selector <b>153</b>. Through the selector <b>146</b>, the data from the memory bank 1 (<b>135</b>) is outputted as read data on the memory port 0 side of the data cache <b>430</b> to thereby terminate the access on this side. If a miss occurs with the address, the operation of the second cycle is interrupted at the point and then the control circuit <b>160</b> determines that the main memory <b>440</b> is to be accessed in the third cycle or later.</p><p>In the embodiment described above, in the memory accesses, a search is conducted for both of the memory banks 0 (<b>125</b>) and 1 (<b>135</b>) which are cache memories of a two-way set-associative type to thereby determine the hit condition. In other words, the data cache <b>430</b> operates as a cache memory of a four-way set-associative type with a total cache capacity of both memory banks.</p><p>When two memory access instructions are simultaneously executed, the data cache <b>430</b> operates as a cache memory of a four-way set-associative type with a total cache capacity of both memory banks as described above. In this situation, when the access on the memory port 0 side results in a hit in the memory bank 0 (<b>125</b>) and the access on the memory port 1 side results in a hit in the memory bank 1 (<b>135</b>), two memory access instructions can be simultaneously executed during one cycle.</p><p>Consequently, for the simultaneous execution and termination of two memory accesses during one cycle, it is only necessary that an Load instruction having a high probability of the hit in the memory bank 0 (<b>125</b>) is executed to access the data cache <b>430</b> on the memory port 0 side and an Load instruction having a high probability, of the hit in the memory bank 1 (<b>135</b>) is executed to access the data cache <b>430</b> on the memory port 1 side. Such a control operation can be accomplished in accordance with information of the memory port specifying hint fields <b>102</b> and <b>112</b> of the Load instructions.</p><p>In the control circuit <b>413</b> of the processor <b>410</b>, the system interprets the memory port specifying hint field of a memory access instruction, e.g., a Load instruction read from the main memory <b>440</b> or the main cache <b>420</b>. If the memory port 0 is specified, the instruction is set to the instruction register <b>100</b>; whereas, if the memory port 1 is specified, the instruction is set to the instruction <b>110</b>. In the first cycle, the memory access instruction set to the register <b>100</b> accesses the memory bank 0 (<b>125</b>) and the memory access instruction set to the register <b>110</b> accesses the memory bank 1 (<b>135</b>). Consequently, the probability of occurrence of the hit is increased in the respective memory banks <b>125</b> and <b>135</b>, which leads to a high probability of completion of two memory access instructions during one cycle.</p><p>For the setting of information to the memory port specifying hint fields <b>102</b> and <b>112</b> of the Load instructions, a compiler for the data processor having a processor including the data cache described above compiles the program in consideration of the structure of the data cache, the main memory accessing sequence in the program, and the utilization schedule of the data cache. Consequently, before the operation is executed, the information is already set to the memory port specifying hint fields <b>102</b> and <b>112</b> of the Load instructions. Due to the setting, it is possible during the execution of the program by the processor to lower the probability of simultaneous accessing to the same memory bank by the instructions respectively on the sides of the memory port 0 side and memory port 1.</p><p>In accordance with the embodiment described above, when two memory accesses are simultaneously executed, the cache operates as a cache memory conducting a four-way set-associative operation in two cycles. On the other hand, when only one memory access instruction is executed, the cache may be operated as a cache memory conducting a four-way set-associative operation in one cycle. FIG. 4 shows the operation.</p><p>FIG. 4 shows an operation of executing a Load instruction set to the instruction register <b>100</b>. Both of the input address selector <b>108</b> of the memory bank 0 and the input address selector <b>118</b> of the memory bank 1 select the memory port 0 side, i.e., an access address of the Load instruction set to the instruction register <b>100</b>. Using the address, a search is conducted simultaneously for the memory banks 0 (<b>125</b>) and 1 (<b>135</b>) which configure a cache memory of a the two-way set-associative type. When an address hit occurs in either one of the memory banks, the corresponding data is outputted from the selector <b>143</b> or <b>153</b>. The data is then delivered via the selector <b>146</b> as read data from the memory port 0 side of the data cache <b>430</b> to thereby terminate the access on the memory port 0 side. When an address miss occurs in both memory banks, the operation of the first cycle is interrupted at the point and then the control circuit <b>160</b> determines that the main memory <b>440</b> is accessed in the second cycle.</p><p>As above, when only one memory access instruction is executed, the cache can operate as a cache memory conducting the four-way set-associative operation in one cycle.</p><p>Description has been given up to this point mainly of a case in which a hit occurs in the memory bank 0 (<b>125</b>) or 1 (<b>135</b>) in the memory access operation. Next, description will be given of a case in which a miss occurs in both of the memory banks 0 (<b>125</b>) and 1 (<b>135</b>) in the memory access operation.</p><p>As a result of operation of FIG. 3, for the access address on the memory port 0 side, namely, for the access address of the Load instruction set to the instruction register <b>100</b>, when a miss results in both of the memory banks 0 (<b>125</b>) and 1 (<b>135</b>), the main memory <b>440</b> is accessed in the third cycle. Data read from the main memory <b>440</b> is transferred to the processor <b>410</b> to be stored in the register file <b>106</b>. In this situation, since the data is likely to be again accessed in near future, the data is also stored in the data cache <b>430</b>. One of the memory banks of the data cache <b>430</b> is selected as the storage in accordance with the memory port related to the access. In this case, since the access is made by the instruction on the memory port 0 side, namely, the instruction set to the instruction register <b>100</b>, the data is stored in the memory bank 0 (<b>125</b>). One of the ways of the memory bank 0 (<b>125</b>) is determined, for example, as follows. Namely, the way accessed at the earliest time is selected for the storage this is called an LRU algorithm.</p><p>Similarly, as a result of operation of FIG. 3, for the access address on the memory port 1 side, namely, the access address of the Load instruction set to the instruction register <b>110</b>, when a miss occurs in both of the memory banks 0 (<b>125</b>) and 1 (<b>135</b>), the main memory <b>440</b> is accessed in one of the third and subsequent cycles. Whether the main memory <b>440</b> is to be immediately accessed in the third cycle or thereafter is determined in accordance with the state of the miss on the memory port 0 side. That is, when the main memory <b>440</b> is accessed with the miss also on the memory port 0 side, the processing on the memory port 0 side is conducted in the third cycle and the processing on the memory port 1 side is carried out after the third cycle.</p><p>Data read from the main memory <b>440</b> is, like in the case of the access via the memory port 0 side, transferred to the processor <b>410</b> to be stored in the register file <b>106</b>. In this situation, since the data is likely to be again accessed in near future, the data is also stored in the data cache <b>430</b>. One of the memory banks of the data cache <b>430</b> is selected as the storage in accordance with the memory port related to the access. In this case, since the access is made by the instruction on the memory port 1 side, namely, the instruction set to the instruction register <b>110</b>, the data is stored in the memory bank 1 (<b>135</b>). One of the ways of the memory bank 1 (<b>135</b>) is determined, for example, in accordance with the LRU algorithm.</p><p>When only one memory access is processed during one cycle, a search is simultaneously made for both of the memory banks <b>125</b> and <b>135</b> to determine the hit or miss as shown in FIG. <b>4</b>. When the miss results in both of the memory banks <b>125</b> and <b>135</b>, the main memory <b>440</b> is accessed in the second cycle. Data read from the main memory <b>440</b> is transferred to the processor <b>410</b> to be stored in the register file <b>106</b>. In this situation, since the data is likely to be again accessed in near future, the data is also stored in the data cache <b>430</b>. One of the memory banks of the data cache <b>430</b> is selected as the storage in accordance with the memory port related to the access. In the case of FIG. 4, since the access is made by the instruction on the memory port 0 side, namely, the instruction set to the instruction register <b>100</b>, the data is stored in the memory bank 0 (<b>125</b>). One of the ways of the memory bank 0 (<b>125</b>) is determined, for example, in accordance with the LRU algorithm.</p><p>Moreover, there may be employed another control procedure in which two ways of the memory bank 0 (<b>125</b>) and two ways of the memory bank 1 (<b>135</b>) are equally treated, i.e., these ways are regarded as a total a four-way set-associative configuration and one of the ways is selected to store data therein. In this case, it is also possible to use the LRU algorithm in which the way accessed at the oldest time are selected from the ways for the storage of data.</p><p>In the configuration of FIG. 1 described above, when the miss occurs in both of the memory banks <b>125</b> and <b>135</b>, two cycles are required to detect the condition. By additionally disposing a few hardware items, the case in which the miss occurs in both of the memory banks <b>125</b> and <b>135</b> can be detected in one cycle. FIG. 6 shows a block diagram of the configuration.</p><p>In FIG. 6, the memory bank 0 (<b>125</b>) includes copies <b>126</b> and <b>127</b> respectively of address tag memory arrays <b>131</b> and <b>132</b> of the memory bank 1 (<b>135</b>); moreover, in addition to the configuration of FIG. 1, there are arranged comparators <b>144</b> and <b>145</b> to compare tags read from the memory arrays <b>126</b> and <b>127</b> with high-order bits of the address selected by the selector <b>108</b>. Consequently, in concurrence with the cycle In which the address search is being achieved for the memory bank 0 (<b>125</b>), the address search can be carried out for the memory bank 1 (<b>135</b>). Even if the miss occurs for both of the memory banks, it Is possible to detect the condition in one cycle. Therefore, the access to the main memory <b>440</b> can be initiated without accessing the memory bank 1 (<b>135</b>) in the second cycle, and hence the processing at the miss of the data cache <b>430</b> can be conducted at a higher speed.</p><p>Similarly, on the side of memory bank 0 (<b>125</b>), there are disposed copies <b>136</b> and <b>137</b> respectively of address tag memory arrays <b>121</b> and <b>122</b> of the memory bank 0 (<b>125</b>), and in addition to the configuration of FIG. 1, there are arranged comparators <b>154</b> and <b>155</b> to compare tags read from the memory arrays <b>136</b> and <b>137</b> with high-order bits of the address selected by the selector <b>118</b>. Consequently, in concurrence with the cycle in which the address search is being achieved for the memory bank 1 (<b>135</b>), the address search can be carried out for the memory bank 0 (<b>125</b>). Therefore, even if the miss occurs for both of the memory banks, it is possible to detect the condition in one cycle. In consequence, the access to the main memory <b>440</b> can be initiated without accessing the memory bank 0 (<b>125</b>) in one of the second and subsequent cycles, and hence the processing at the miss of the data cache <b>430</b> can be conducted at a higher speed.</p><p>In accordance with the embodiment as described above, since the miss in both memory banks <b>125</b> and <b>135</b> can be determined in one cycle, the processing speed at the miss of the data cache <b>430</b> is advantageously increased.</p><p>In relation to the description, although the embodiment includes two memory banks and two memory ports, the present invention is not restricted by the embodiment.</p><p>Within a scope of the present invention, there may be constructed an embodiment including three or more main banks and three or more memory ports.</p><p>For example, the scope of the present invention includes an embodiment including four main banks and four more memory ports. In this case, the first to fourth memory access ports respectively access the first to fourth memory banks in the first cycle, and the ports access the other banks in the second and subsequent cycles. For example, in the second cycle, the first to fourth memory access ports respectively access the second, third, fourth, and first memory banks. In the third cycle, the first to fourth memory access ports respectively access the third, fourth, first, and second memory banks. In the fourth cycle, the first to fourth memory access ports respectively access the fourth, first, second, and third memory banks.</p><p>In addition, there may be provided in the scope of the present invention an embodiment including four memory banks and two memory ports. In this case, the first memory access port accesses the first and second memory banks and the second memory access port accesses the third and fourth memory banks. In the second and subsequent cycles, the ports respectively access the different memory banks. For example, in the second cycle, the first memory access port accesses the third and fourth memory banks and the second memory access port accesses the first and second memory banks.</p><p>As described above, any cases including two or more memory banks and two or more memory ports are within the scope of the present invention.</p><p>The following advantages can be obtained in accordance with the present invention described above.</p><p>First, the memory is subdivided into a plurality of memory banks to conduct a concurrent operation and hence there can be implemented a function of a multi-port memory capable of simultaneously processing a plurality of memory accesses.</p><p>Additionally, when a memory bank accessed in the first cycle has an address to be accessed, it is possible to concurrently process a plurality of memory accesses in one cycle.</p><p>As a result, since a plurality of memory accesses can be concurrently processed in one cycle if an address to be accessed remains in a memory bank accessed in the first cycle, there can be implemented a function of a multi-port memory. For example, in a case in which there are provided two memory banks, a function of a dual-port memory can be provided without minimizing the memory cell access time to half the original time; conversely, without doubling the total cycle time.</p><p>Furthermore, since the memory bank selection is accomplished without using addresses, the selection by the address input selectors can be concurrently executed with other processing, namely, the selection time does not lead to a critical path. Therefore, the multi-port function can be materialized without elongating the memory access time.</p><h4>INDUSTRIAL APPLICABILITY</h4><p>As above, the multi-port memory in accordance with the present invention can be implemented without increasing the memory access time and therefore is suitable for a memory, particularly, for a cache memory of a data processor such as a super-scalar processor and a VLIW processor in which a plurality of memory accesses are required to be processed in one cycle.</p><p>While the present invention has been described with reference to the particular illustrative embodiments, it is not to be restricted by those embodiments but only by the appended claims. It is to be appreciated that those skilled in the art can change or modify the embodiments without departing from the scope and spirit of the present invention.</p><?DETDESC description=\"Detailed Description\" end=\"tail\"?></description>"}], "inventors": [{"first_name": "Makoto", "last_name": "Hanawa", "name": ""}, {"first_name": "Kenji", "last_name": "Kaneko", "name": ""}, {"first_name": "Kazumichi", "last_name": "Yamamoto", "name": ""}, {"first_name": "Kentaro", "last_name": "Shimada", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "HITACHI, LTD."}, {"first_name": "", "last_name": "HITACHI LTD", "name": ""}], "ipc_classes": [{"primary": true, "label": "G11C   8/00"}], "locarno_classes": [], "ipcr_classes": [{"label": "G06F  12/08        20060101A I20051008RMJP"}], "national_classes": [{"primary": true, "label": "703025"}, {"primary": false, "label": "711149"}, {"primary": false, "label": "36518511"}, {"primary": false, "label": "36518902"}, {"primary": false, "label": "711E12045"}, {"primary": false, "label": "710001"}, {"primary": false, "label": "36523002"}], "ecla_classes": [{"label": "G06F  12/08B6M"}], "cpc_classes": [{"label": "G06F  12/08"}, {"label": "G06F  12/0846"}], "f_term_classes": [], "legal_status": "Expired - Fee Related", "priority_date": "1996-02-16", "application_date": "1998-08-14", "family_members": [{"ucid": "US-6282505-B1", "titles": [{"lang": "EN", "text": "Multi-port memory and a data processor accessing the same"}]}, {"ucid": "JP-3593346-B2", "titles": [{"lang": "JA", "text": "\u30de\u30eb\u30c1\u30dd\u30fc\u30c8\u30e1\u30e2\u30ea\u53ca\u3073\u305d\u308c\u3092\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30c7\u30fc\u30bf\u51e6\u7406\u88c5\u7f6e"}, {"lang": "EN", "text": "Multiport memory and data processing device accessing the same"}]}, {"ucid": "EP-0881575-A1", "titles": [{"lang": "FR", "text": "MEMOIRE A ACCES MULTIPLES ET PROCESSEUR DE DONNEES PROCURANT L'ACCES A CETTE MEMOIRE"}, {"lang": "EN", "text": "MULTIPORT MEMORY AND DATA PROCESSOR MAKING ACCESS TO IT"}, {"lang": "DE", "text": "MULTIPORT-SPEICHER UND DATENPROZESSOR ZUM ZUGRIFF AUF DIESEN SPEICHER"}]}, {"ucid": "WO-1997030395-A1", "titles": [{"lang": "FR", "text": "MEMOIRE A ACCES MULTIPLES ET PROCESSEUR DE DONNEES PROCURANT L'ACCES A CETTE MEMOIRE"}, {"lang": "EN", "text": "MULTIPORT MEMORY AND DATA PROCESSOR MAKING ACCESS TO IT"}]}, {"ucid": "KR-19990082423-A", "titles": [{"lang": "EN", "text": "Multiport Memory and Data Processing Devices Accessing It"}, {"lang": "KO", "text": "\uba40\ud2f0\ud3ec\ud2b8\uba54\ubaa8\ub9ac \ubc0f \uadf8\uac83\uc744 \uc561\uc138\uc2a4\ud558\ub294 \ub370\uc774\ud0c0\ucc98\ub9ac\uc7a5\uce58"}]}, {"ucid": "EP-0881575-A4", "titles": [{"lang": "FR", "text": "MEMOIRE A ACCES MULTIPLES ET PROCESSEUR DE DONNEES PROCURANT L'ACCES A CETTE MEMOIRE"}, {"lang": "EN", "text": "MULTIPORT MEMORY AND DATA PROCESSOR MAKING ACCESS TO IT"}, {"lang": "DE", "text": "MULTIPORT-SPEICHER UND DATENPROZESSOR ZUM ZUGRIFF AUF DIESEN SPEICHER"}]}]}