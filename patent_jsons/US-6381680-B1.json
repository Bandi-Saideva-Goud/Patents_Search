{"patent_number": "US-6381680-B1", "publication_id": 72986343, "family_id": 26343109, "publication_date": "2002-04-30", "titles": [{"lang": "EN", "text": "Data processing system with an enhanced cache memory control"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA50307441\"><p>A detect circuit is provided in a system such as an I/O mapped microcomputer system in order to detect whether or not an access address for a read access request generated by a central processing unit (CPU) is for a part (such as a status register in the above-mentioned microcomputer system) accessible by another processing device, such as an I/O device, within the entire storage area (such as a main storage and the status register) accessible by the central processing system. If data to be fetched for an instruction executed by the central processing unit is not found in a cache memory, the data is fetched from the entire storage area. A write circuit is provided which writes the fetched data into the cache memory when the detect circuit shows that the access address is not for the part accessible by the other processing device within the entire storage area, but otherwise the write circuit does not write the fetched data into the cache memory.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00001\" num=\"1\"><claim-text>1. A data processing system in which at least two memory address regions are assigned, said data processing system comprising:</claim-text><claim-text>a main memory for storing data, said main memory being assigned a first memory address region of said memory address regions; </claim-text><claim-text>an output control circuit including a memory unit for storing data, said memory unit being assigned a second memory address region of said memory address regions; and </claim-text><claim-text>a microprocessor, said microprocessor comprises: </claim-text><claim-text>a processing circuit which executes an instruction and generates an address, </claim-text><claim-text>a cache memory, coupled to said processing circuit, for storing data, and </claim-text><claim-text>a logical circuit, coupled to said cache memory, for controlling writing of data in said cache memory in accordance with said address corresponding to said first memory address region and not writing of data in said cache memory in accordance with said address corresponding to said second memory address region, </claim-text><claim-text>wherein said logical circuit includes a plurality of registers which store address values indicating said second memory address region, said address values being used in said logical circuit to control whether data is written in said cache memory or not. </claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00002\" num=\"2\"><claim-text>2. A data processing system according to <claim-ref idref=\"US-6381680-B1-CLM-00001\">claim 1</claim-ref>, further comprising:</claim-text><claim-text>an output device coupled to said output control circuit for outputting data. </claim-text></claim>"}, {"num": 3, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00003\" num=\"3\"><claim-text>3. A data processing system comprising:</claim-text><claim-text>a memory device for storing data, wherein a first memory address region of a plurality of memory address regions is assigned to said memory device; </claim-text><claim-text>an output control unit including a memory unit for storing data, </claim-text><claim-text>wherein a second memory address region of said plurality of memory address regions is assigned to said memory unit; and </claim-text><claim-text>a processor, said processor comprises: </claim-text><claim-text>a processing unit for executing an instruction and generating an address, </claim-text><claim-text>a cache memory coupled to said processing unit for storing data, and </claim-text><claim-text>a control unit, coupled to said cache memory, for executing a data write operation of said cache memory when said address corresponds to said first memory address region, and not executing the data write operation when said address corresponds to said second memory address region, </claim-text><claim-text>wherein said control unit includes a register which is settable to an address value which indicates said second memory address region. </claim-text></claim>"}, {"num": 4, "parent": 3, "type": "dependent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00004\" num=\"4\"><claim-text>4. A data processing system according to <claim-ref idref=\"US-6381680-B1-CLM-00003\">claim 3</claim-ref>, further comprising:</claim-text><claim-text>an output device coupled to said output control unit for outputting data. </claim-text></claim>"}, {"num": 5, "parent": 4, "type": "dependent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00005\" num=\"5\"><claim-text>5. A data processing system according to <claim-ref idref=\"US-6381680-B1-CLM-00004\">claim 4</claim-ref>, wherein said address value is set in said register at an initial stage of operation of the data processing system.</claim-text></claim>"}, {"num": 6, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00006\" num=\"6\"><claim-text>6. a processing system comprising:</claim-text><claim-text>a main memory for storing data, said main memory being assigned a first memory address region; </claim-text><claim-text>an output control unit including a memory unit for storing data, said memory unit being assigned a second memory address region; and </claim-text><claim-text>a microprocessor, said microprocessor comprises: </claim-text><claim-text>a processing unit for executing an instruction and generating an address, and </claim-text><claim-text>a cache memory unit for writing data when it is detected that said address relates to said first memory address region and not writing data when it is detected that said address relates to said second memory address region, </claim-text><claim-text>wherein said cache memory unit includes a plurality of registers which are used to store values for detecting whether said address relates to said second memory address region or not. </claim-text></claim>"}, {"num": 7, "parent": 6, "type": "dependent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00007\" num=\"7\"><claim-text>7. A processing system according to <claim-ref idref=\"US-6381680-B1-CLM-00006\">claim 6</claim-ref>, further comprising:</claim-text><claim-text>an output device, coupled to said output control unit, for outputting data. </claim-text></claim>"}, {"num": 8, "parent": 7, "type": "dependent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00008\" num=\"8\"><claim-text>8. A processing system according to <claim-ref idref=\"US-6381680-B1-CLM-00007\">claim 7</claim-ref>, wherein said values are stored in said registers at an initial stage of operation of the processing system.</claim-text></claim>"}, {"num": 9, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00009\" num=\"9\"><claim-text>9. A data processing system in which a plurality of address regions are assigned, said data processing system comprising:</claim-text><claim-text>a main memory for storing data, said main memory being accessed in accordance with an address belonging to a first address region of said plurality of address regions; </claim-text><claim-text>an input/output control device including a memory unit for storing data, said memory unit being accessed in accordance with an address belonging to a second region of said plurality of address regions; and </claim-text><claim-text>a microprocessor, said microprocessor comprises: </claim-text><claim-text>a processing unit for executing an instruction and generating an address, and </claim-text><claim-text>a cache memory unit, coupled to said processing unit, for writing data when said address generated by said processing unit relates to said first address region and not writing data when said address generated by said processing unit relates to said second address region, </claim-text><claim-text>wherein said cache memory unit includes a plurality of registers which store a range values of said second address region, said range values stored in said registers are used for controlling not to write data in said cache memory unit. </claim-text></claim>"}, {"num": 10, "parent": 9, "type": "dependent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00010\" num=\"10\"><claim-text>10. A data processing system according to <claim-ref idref=\"US-6381680-B1-CLM-00009\">claim 9</claim-ref>, further comprising:</claim-text><claim-text>an input/output device, coupled to said input/output control device, for inputting/outputting data. </claim-text></claim>"}, {"num": 11, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00011\" num=\"11\"><claim-text>11. A data processing system in which at least two memory address regions are assigned, said data processing system comprising:</claim-text><claim-text>a main memory for storing data, said main memory being assigned a first memory address region of said at least two memory address regions; </claim-text><claim-text>an output control circuit including a memory unit for storing data, said memory unit being assigned a second memory address region of said at least two memory address regions; </claim-text><claim-text>a processing circuit which executes an instruction and generates an address; </claim-text><claim-text>a cache memory, coupled to said processing circuit, for storing data; and </claim-text><claim-text>a logical circuit, coupled to said cache memory, for controlling writing of data in said cache memory in accordance with said address corresponding to said first memory address region and not writing of data in said cache memory in accordance with said address corresponding to said second memory address region, </claim-text><claim-text>wherein said logical circuit includes a plurality of registers which store values indicating said second memory address region, said values being used to control whether data is written in said cache memory or not. </claim-text></claim>"}, {"num": 12, "parent": 11, "type": "dependent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00012\" num=\"12\"><claim-text>12. A data processing system according to <claim-ref idref=\"US-6381680-B1-CLM-00011\">claim 11</claim-ref>, further, comprising:</claim-text><claim-text>an output device, coupled to said output control circuit, for outputting data. </claim-text></claim>"}, {"num": 13, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00013\" num=\"13\"><claim-text>13. A data processing system comprising:</claim-text><claim-text>a memory device for storing data, wherein a first memory address region of a plurality of memory address regions is assigned to said memory device; </claim-text><claim-text>an output control device including a memory unit for storing data, </claim-text><claim-text>wherein a second memory address region of said plurality of memory address regions are assigned to said memory unit; </claim-text><claim-text>a processing unit for executing an instruction and generating an address; </claim-text><claim-text>a cache memory for storing data; and </claim-text><claim-text>a control unit, coupled to said cache memory, for executing a data write operation of said cache memory when said address relates to said first memory address region and not executing the data write operation when said address relates to said second memory address region, </claim-text><claim-text>wherein said control unit has a register which is settable to an address value which indicates said second memory address region. </claim-text></claim>"}, {"num": 14, "parent": 13, "type": "dependent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00014\" num=\"14\"><claim-text>14. A data processing system according to <claim-ref idref=\"US-6381680-B1-CLM-00013\">claim 13</claim-ref>, further comprising:</claim-text><claim-text>an output device, coupled to said output control device, for outputting data. </claim-text></claim>"}, {"num": 15, "parent": 14, "type": "dependent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00015\" num=\"15\"><claim-text>15. A data processing system according to <claim-ref idref=\"US-6381680-B1-CLM-00014\">claim 14</claim-ref>, wherein said address value is set in said register at the initial stage of operation of the data processing system.</claim-text></claim>"}, {"num": 16, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00016\" num=\"16\"><claim-text>16. A data processing system comprising:</claim-text><claim-text>a main memory for storing data, said main memory being accessed with an address belonging to a first memory address region; </claim-text><claim-text>an output control device including a memory unit for storing data, said memory unit being accessed with an address belonging to a second memory address region; </claim-text><claim-text>a processing unit for executing instructions and generating addresses; </claim-text><claim-text>a cache memory, coupled to said processing unit, for storing data; and </claim-text><claim-text>a control unit, coupled to said cache memory, for executing a data write operation of said cache memory when one of said address corresponds to said first memory address region, and not executing said data write operation when another of said addresses corresponds to said second memory address region, </claim-text><claim-text>wherein said control unit having a plurality of registers which store address values for detecting that said another of said addresses corresponds to said second memory address region. </claim-text></claim>"}, {"num": 17, "parent": 16, "type": "dependent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00017\" num=\"17\"><claim-text>17. A data processing system according to <claim-ref idref=\"US-6381680-B1-CLM-00016\">claim 16</claim-ref>, further comprising:</claim-text><claim-text>an output device, coupled to said output control unit, for outputting data. </claim-text></claim>"}, {"num": 18, "parent": 17, "type": "dependent", "paragraph_markup": "<claim id=\"US-6381680-B1-CLM-00018\" num=\"18\"><claim-text>18. A data processing system according to <claim-ref idref=\"US-6381680-B1-CLM-00017\">claim 17</claim-ref>, wherein said address values are stored in said registers at an initial stage of operation of the data processing system.</claim-text></claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES53553478\"><?RELAPP description=\"Other Patent Relations\" end=\"lead\"?><p>This is a continuation of application Ser. No. 08/795,639, filed Feb. 6, 1997; now U.S. Pat. No. 5,822,761 which is a continuation of application Ser. No. 08/649,333, filed May 17, 1996 now U.S. Pat. No. 5,619,677; which is a continuation of application Ser. No. 08/540,218, filed Oct. 6, 1995, now abandoned; which is a continuation of application Ser. No. 08/435,958, filed May 5, 1995, now U.S. Pat. No. 5,509,133; which is a continuation of application Ser. No. 07/804,739, filed Dec. 11, 1991, now U.S. Pat. No. 5,479,625; which is a continuation of application Ser. No. 07/183,401, filed Apr. 8, 1988 now U.S. Pat. No. 5,148,526; which is a continuation of application Ser. No. 06/694,126, filed Jan. 23, 1985 now abandoned.</p><?RELAPP description=\"Other Patent Relations\" end=\"tail\"?><?BRFSUM description=\"Brief Summary\" end=\"lead\"?><h4>BACKGROUND OF THE INVENTION</h4><p>The present invention relates to a data processing system having a buffer memory, and particularly to a system which is suited for a microprocessor which supports a memory mapped I/O system, a multi-processor having a common memory, and the like.</p><p>In microcomputers, a memory mapped I/O system has heretofore been widely used to control the input/output device by accessing an input/output control register in the same address space as the main memory using general instructions, without providing special instructions to control the input/output device.</p><p>FIG. 1 is a block diagram showing a memory mapped I/O system, wherein a processor <b>1</b> controls a main memory <b>2</b> and input/output control circuits <b>3</b>, <b>5</b> for respective I/O devices <b>4</b>, <b>6</b> via a system bus <b>100</b>. Inherent addresses are assigned to the main memory <b>2</b>, and to the input/output control circuits <b>3</b>, <b>5</b> respectively. Values stored in control registers (not shown) in the input/output control circuits <b>3</b>, <b>5</b> are rewritten by the processor <b>1</b>, and input/output devices <b>4</b>, <b>6</b> are controlled by the new value in the control registers. Further, when their own statuses are changed, the input/output devices <b>4</b>, <b>6</b> rewrite the values stored in the status registers (not shown) in the input/output control circuits <b>3</b>, <b>5</b>. When the contents of the main memory <b>2</b> are to be rewritten in response to a store instruction, the processor <b>1</b> applies to the system bus <b>100</b> a write address assigned to the main memory <b>2</b>, data to be written and a write command. When the contents of the main memory are to be read out in response to a load instruction, a read address assigned to the main memory <b>2</b> and a read command are applied to the system bus <b>100</b>, and the data sent from the main memory <b>2</b> to the system bus <b>100</b> is received by the processor <b>1</b> as read data. The input/output device <b>4</b> starts to operate when a start bit in a control register (not shown) in the input/output control circuit <b>3</b> is turned on.</p><p>For instance, when the store instruction is to be executed for the control register and an inherent address for the control register is used as the write address of the store instruction, the input/output device <b>4</b> starts to operate. On the other hand, to detect the completion of operation of the input/output device <b>4</b>, the status register (not shown) in the input/output control circuit <b>3</b> is read out by the above-mentioned load instruction, and the operation completion bit of the status register is checked to see whether it is on or off. When the operation completion bit is on, other bits of the status register are checked to detect the condition of completion, such as normal completion or abnormal completion.</p><p>Using the memory mapped I/O system, as mentioned above, the input/output device can be controlled in a sophisticated manner using general instructions, without the need of providing special input/output instructions,</p><p>The microprocessor is often provided with a cache (buffer memory) to improve performance. However, a problem arises, as described below with reference to FIG. 2, if use is made of a system in which a cache is incorporated into the aforementioned memory mapped I/O system. FIG. 2 is a block diagram of a system using a cache (buffer memory) in a memory mapped I/O system.</p><p>In FIG. 2, the processor <b>1</b> consists of a central processing unit (CPU) <b>10</b> for executing instructions, and a cache <b>11</b> which stores addresses for referring to the main memory <b>2</b> as well as data stored in the regions of the main memory indicated by the addresses. If now it is requested by the CPU <b>10</b> to refer to the data in regions of the main memory <b>2</b> to effect instruction fetching or data reading, the cache <b>11</b> is first checked. When the desired data is found in the cache <b>11</b>, the data of the cache <b>11</b> is sent to the CPU <b>10</b> thereby to complete the reading of the data or instruction. However, when the data is not found in the cache <b>11</b>, the corresponding data is read from the main memory <b>2</b> via the system bus <b>100</b>. The data which is read out is sent to the CPU <b>10</b>, and at the same time is stored in the cache <b>11</b> along with the read addresses thereof. When data is to be written into the main memory <b>2</b> from the CPU <b>10</b>, the write data and the write addresses produced from the CPU <b>10</b> are sent to the main memory <b>2</b> via the system bus <b>100</b>, and the corresponding write data is written into the main memory <b>2</b>. At the same time, the write data and the write addresses are also stored in the cache <b>11</b>.</p><p>The cache <b>11</b> has an access speed which is faster than that of the main memory <b>2</b>. Therefore, since the data in the main memory <b>2</b> that is once read out or written also has been stored in the cache <b>11</b>, the access time for such data can be reduced when reference is made again to the same data by obtaining the data from the cache <b>11</b>.</p><p>However, we recently noticed that a problem will arise as described below when reference is made to the status register (not shown) in the input/output control circuit <b>3</b> or <b>5</b> in a system of the memory mapped I/O type when a cache is added to the processor.</p><p>It is assumed that the processor <b>1</b> executes a program which checks the status register (not shown), and waits for the completion of operation of the input/output device <b>4</b>. As the CPU <b>10</b> makes reference to the status register in the input/output control circuit <b>3</b>, the value stored in the status register is sent to the CPU <b>10</b> and is also stored in the cache <b>11</b>. The CPU <b>10</b> checks the completion bit of the status register. When the completion bit is on, the operation should proceed to the next program instructions. When the completion bit is off, the status register should be read repetitively and the completion bit checked repetitively. When an instruction to read the status register is executed for the second and subsequent times, however, the value stored in the cache <b>11</b> is sent back to CPU <b>10</b> as the data of the status register. Therefore, even when the input/output operation of the input/output device <b>4</b> is completed, and the completion bit of the status register in the input/output control circuit <b>3</b> is turned on, the processor <b>1</b> is not capable of detecting this fact, because it is looking at old data stored in the cache <b>11</b>. We further noticed that there also arises a problem that when it is attempted to read out the contents of the status register, the value of the control register is read out instead, in the case when the control register and the status register are allocated to different bits of the same register with the same address, or in the case when the control register and the status register are allocated to the same address, the control register is accessed at the time of writing the data, and the status register is accessed at the time of reading the data. This is because the value written into the control register has been stored in the cache <b>11</b> and, when an instruction to read the status register is executed, the data stored in the cache <b>11</b> for the control register is read out.</p><p>Described below is a problem which we noticed is apt to develop in transferring a message between the buffer memory and the processors in a multiprocessor system in which a plurality of processors are coupled to disperse the load.</p><p>A system which performs the processing by transferring messages between two processors is described below with reference to the block diagrams of FIGS. 3 and 4. FIG. 3 is a block diagram of a system which consists of processors <b>1</b> and <b>7</b>, local memories <b>2</b> and <b>2</b>\u2032 provided exclusively for these processors, and a main memory <b>8</b> for communicating the message between processors via the buses <b>100</b> and <b>101</b>. Usually, each of the processors <b>1</b> and <b>7</b> performs processing using its own local memory <b>2</b> or <b>2</b>\u2032. When the processor <b>1</b> requests the processor <b>7</b> to perform processing, however, the processor <b>1</b> writes the processing to be done and data necessary for the processing into predetermined regions of the main memory <b>8</b>, and then interrupts the processor <b>7</b>. When interrupted, the processor <b>7</b> reads the contents of the memory <b>8</b>, and performs the processing that is requested. When the processing is finished, the processor <b>7</b> writes the results into the memory <b>8</b> to inform the processor <b>1</b>, and interrupts the processor <b>1</b>. Then, the processor <b>7</b> resumes the previous processing. Being interrupted by the processor <b>7</b>, the processor <b>1</b> takes out the processed results from the memory <b>8</b>, and continues processing. When the processing requested to the processor <b>7</b> is being executed, the processor <b>1</b> carries out other processing using the local memory <b>2</b>.</p><p>FIG. 4 is a block diagram of a system in which the two processors <b>1</b> and <b>7</b> are connected to a common system bus <b>100</b> to commonly use the main memory <b>2</b>. These processors access the main memory <b>2</b> independently from each other. However, when one processor is accessing the main memory <b>2</b>, the other processor is so controlled that its request for access remains on standby. According to this system, messages between the processors are communicated using a particular region of the main memory <b>2</b>. Namely, this system is the same as the system shown in FIG. 3, except that the region for writing the message is a particular region in the main memory <b>2</b>.</p><p>In these two systems, if the processors <b>1</b> and <b>7</b> are provided with general buffer memories, <b>11</b> and <b>71</b>, a problem arises as described below. That is, when, for example, the processor <b>1</b> writes the data in a region for communicating the message, the value of the cache <b>11</b> possessed by the processor <b>1</b> is renewed as the data is written. However, the value of the same address is not renewed even when it has been stored in the buffer memory <b>71</b> of the processor <b>7</b>. Accordingly, even when the processor <b>7</b> accessses the message region, the data of the buffer memory <b>71</b> is read out, and the message of the processor <b>1</b> is not correctly received.</p><h4>SUMMARY OF THE INVENTION</h4><p>The present invention was accomplished to solve the above-mentioned problems, and its object is to provide a data processing system such as a system having microprocessors in a memory mapped I/O system, multiprocessor system, or the like systems, which is capable of accessing the data without inconsistency even when cache memories are provided to improve performance. In order to attain this purpose, a detect circuit is provided in a system such as an I/O mapped microcomputer system in order to detect whether or not an access address for a read accesses request generated by a central processing unit (CPU) corresponds to an area (such as a status register in the above-mentioned microcomputer system) which is accesible by another processing device, such as an I/O device, within the entire storage area (such as a main storage and the status register) which is accessible by the central processing system. If data to be fetched from an instruction executed by the central processing unit is not found in a cache memory, the data is fetched from the entire storage area. A write circuit is provided which writes the fetched data into the cache memory when the detect circuit shows that the access address does not corresponds to the area accesible by the other processing device within the entire storage area, but otherwise the write circuit does not write the fetched data into the cache memory.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4><p>FIG. 1 is a block diagram of a prior art system based upon the memory mapped I/O system;</p><p>FIG. 2 is a block diagram which illustrates a problem which arises in memory mapped I/O system; in which cache memory is employed</p><p>FIG. 3 is a block diagram of a prior art system based upon the multiprocessor system having a common memory;</p><p>FIG. 4 is a block diagram of another prior art system based upon the multiprocessor system having a common memory;</p><p>FIG. 5 is a diagram showing a system according to an embodiment of the present invention;</p><p>FIG. 6 is a circuit diagram of a cache memory shown in FIG. 5;</p><p>FIG. 7 is a diagram of a cache memory control circuit of FIG. 5;</p><p>FIG. 8 is a diagram of a read/write control circuit of FIG. 5;</p><p>FIG. 9 is a diagram of an input/output control circuit of FIG. 5;</p><p>FIG. 10 is a diagram of a common memory control circuit shown in FIG. 5;</p><p>FIG. 11 is a diagram of a main memory control circuit shown in FIG. 5;</p><p>FIG. 12 is a diagram of a memory management unit of FIG. 5;</p><p>FIG. 13 is an address map used in the system of FIG. 5; and</p><p>FIG. 14 is a diagram showing another system according to another embodiment of the present system.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</h4><p>An embodiment of the present invention will be described below in detail in conjunction with FIGS. 5 to <b>13</b>. FIG. 5 is a diagram showing the structure of the whole system according to an embodiment of the present invention, and FIGS. 6 to <b>12</b> are circuit diagrams of the blocks of FIG. <b>5</b>.</p><p>In FIG. 5, the system according to the present invention consists of a microprocessor <b>1</b> (hereinafter abbreviated as MPU), a memory management unit <b>9</b> (hereinafter abbreviated as MMU), a main memory <b>2</b>, a common memory <b>8</b>, an input/output control circuit <b>3</b>, an input/output device <b>4</b>, a system bus <b>100</b>, another microprocessor <b>1</b>A (hereinafter abbreviated as MPUX) that is connected to the system bus and a related memory management unit <b>9</b>A.</p><p>The MPU <b>1</b> consists of a central processing unit (CPU) <b>10</b> which executes instructions, a cache memory <b>11</b>, a cache memory control circuit <b>13</b>, a read/write control circuit <b>14</b>, and an OR gate <b>15</b>. The MPU <b>1</b> is connected to the MMU <b>9</b> through an address signal line <b>116</b>, a data signal line <b>122</b>, a read signal line <b>125</b>, a write signal line <b>110</b>, a PURGE signal line <b>126</b>, an ACK signal line <b>128</b>, and an RMA signal line <b>127</b>, and is further connected to the system bus <b>100</b> through the data signal line <b>122</b>, the read signal line <b>125</b>, the write signal line <b>110</b>, the ACK signal line <b>128</b> and the RMA signal line <b>127</b>. Here, the ACK signal indicates the completion of an operation, and the RMA signal indicates whether the data can be written into the cache <b>11</b> or not.</p><p>The MMU, which is an address translator for supporting a virtual storage system, converts a logical address provided by CPU <b>10</b> on line <b>116</b> into a physical address based upon an address translation table <b>90</b> which contains logical and physical address tables <b>901</b> and <b>902</b> and sends the physical address to the system bus <b>100</b> via an address signal line <b>129</b>.</p><p>The main memory <b>2</b> consists of a main memory control circuit <b>21</b> and a main memory unit <b>22</b>, and is connected to the system bus <b>100</b> through a data signal line <b>152</b>, an address signal line <b>159</b>, a read signal line <b>155</b>, a write signal line <b>154</b> and an ACK signal line <b>158</b>. It is to be noted that an RMA signal line is not connected to the main memory <b>2</b>. The main memory <b>2</b> stores instructions and data that are to be processed by the MPU<b>1</b>.</p><p>The common memory <b>8</b> consists of a common memory control circuit <b>81</b> and a common memory unit <b>82</b>, and is connected to the system bus <b>100</b> through a data signal line <b>142</b>, an address signal line <b>149</b>, a read signal line <b>145</b>, a write signal line <b>144</b>, an ACK signal line <b>148</b> and an RMA signal line <b>147</b>. The common memory <b>8</b> stores data for communicating between the MPU <b>1</b> and the MPUX <b>1</b>A, as well as instructions and data to be processed by the MPUX <b>1</b>A.</p><p>The input/output control circuit <b>3</b> is connected to the system bus <b>100</b> through a data signal line <b>132</b>, an address signal line <b>139</b>, a read signal line <b>135</b>, a write signal line <b>134</b>, an ACK signal line <b>138</b>, and an RMA signal line <b>137</b>, and controls the input/output device <b>4</b> via a signal line <b>130</b> to transfer the input/output data provided from or to said input/output device <b>4</b>.</p><p>In the system bus <b>100</b>, all lines for the same signals such as the ACK signal lines <b>138</b>, <b>148</b>, <b>158</b> and the RMA signal line <b>137</b>, <b>147</b> from various devices are provided with a wired OR connection, respectively. The ACK signal line <b>128</b> or the RMA signal line <b>127</b> connected to the MPU <b>1</b> is enabled when the ACK signal or RMA signal are turned on by either one of the MMU <b>9</b>, the main memory <b>2</b>, the common memory <b>8</b> or the input/output control circuit <b>3</b>. Conversely, the ACK signal line <b>128</b> or the RMA signal line <b>127</b> is turned off when all of the ACK signals or RMA signals from the above-mentioned devices are turned off.</p><p>FIG. 13 shows an address map of the system of FIG. <b>5</b>. The main memory <b>2</b> is assigned addresses from zero to a<sub>1</sub>-<b>1</b>, and the common memory <b>8</b> is assigned addresses a<sub>1</sub>to a<sub>1</sub>-<b>1</b>. The area of the addresses from a<sub>2 </sub>to a<sub>1</sub>-<b>1</b> with the common memory <b>8</b> is an area for communicating messages between the MPU <b>1</b> and the MPUX <b>1</b>A. The status register <b>67</b>, the control register <b>75</b>, and the data register <b>77</b> are respectively assigned the addresses a<sub>4</sub>, a<sub>5 </sub>and a<sub>6</sub>. The logical address table <b>901</b> and the physical address table <b>902</b> of the address translation table <b>90</b> within the MMU <b>9</b> are respectively assigned addresses a<sub>7 </sub>to a<sub>8</sub>-<b>1</b> and a<sub>8 </sub>to a<sub>9</sub>-<b>1</b>.</p><p>The general idea of the memory mapped I/O system will be explained briefly hereinafter, in case, of an input/output device <b>4</b> comprised of a card reader.</p><p>When card data is read, the input/output control circuit <b>3</b> writes data identifying an interrupt factor and interrupts the MPU <b>1</b>. The line for providing the interrupt signal to MPU <b>1</b> is not shown in FIG. 5 for simplicity. MPU <b>1</b> starts a program to read the status register <b>67</b> and to analyze the interruption factor. When MPU <b>1</b> knows that the interrupt is due to reading of card data, it performs a program which reads the card data by way of the data register <b>77</b> and stores the data into the main memory <b>2</b>. After all of the card data is written into the main memory <b>2</b>, the MPU<b>1</b> executes an instruction which writes a read OK bit into the control register <b>75</b> to allow reading of the next card by the card reader. Thereafter, the operation given above is repeated. It is to be noted that read-out of the status register <b>67</b> and writing into the control register <b>75</b> is performed in a quite similar way to the reading or writing in connection with the main memory <b>2</b>, except for the difference in the associated addresses.</p><p>Now explanation of the system in FIG. 5 is given. When the power supply is turned on and the circuit in FIG. 5 is reset, CPU <b>10</b> turns a reset signal line <b>113</b> on and instructs the cache control circuit <b>13</b> to clear the cache <b>11</b>. The cache control circuit <b>13</b> turns the clear signal line <b>117</b> on to invalidate all of the contents stored in the cache <b>11</b>.</p><p>To read the data, the address for the data is produced by CPU <b>10</b> on the address signal line <b>116</b>, and the read request signal line <b>111</b> is turned on. The data is read out onto the data line <b>115</b> from either one of the cache <b>11</b>, the main memory <b>2</b>, the common memory <b>8</b>, or the control circuit <b>3</b>. As will be explained in more detail below, the signal line <b>112</b> is turned on upon completion of reading or writing of the data. In response to this signal <b>112</b>, CPU <b>10</b> receives the data on the signal line <b>115</b> as the read data, and discontinues the address signal on the line <b>116</b>. Therefore, the read request signal line <b>111</b> is turned off, and the reading operation is completed.</p><p>The cache <b>11</b> checks to see whether data for the read address produced on the address signal line <b>116</b> is held by the cache <b>11</b> or not, and turns the valid signal line <b>121</b> on when valid data is held and reads out the data from an associative memory <b>16</b> (FIG. 6) inside the cache <b>11</b> onto an internal line <b>160</b> (FIG. <b>6</b>). In parallel with this, the cache control circuit <b>13</b> turns a switch control signal line <b>119</b> on when the read request signal line <b>111</b> and the valid signal line <b>121</b> are on, and controls switch <b>19</b> (FIG. 6) inside the cache <b>11</b> so that the read out data is transferred from the the internal associative memory <b>16</b> to the data signal line <b>115</b> by way of the internal switch <b>19</b> (FIG. <b>6</b>). Meanwhile, when the read request signal line <b>111</b> is on and the valid signal line <b>121</b> is on, the read/write control circuit <b>14</b> renders the decision that the data is to be read from the cache <b>11</b>, and turns the completion signal line <b>114</b> on thereby to turn on the completion signal line <b>112</b> by way of the OR gate <b>15</b>, and informs the CPU <b>10</b> that the data read operation has been completed. Upon receipt of this completion signal <b>112</b>, CPU <b>10</b> receives the data on the line <b>115</b>, and finishes the reading operation.</p><p>On the other hand, the valid signal <b>121</b> stays turned off when the corresponding data is not held by the cache <b>11</b>. When the read request signal line <b>111</b> is on and the valid bit signal line <b>121</b> is off, the read/write control circuit <b>14</b> turns the read request signal line <b>125</b> on and provides the read request to the system bus <b>100</b>, to read the data from outside MPU<b>1</b>. The logical address produced from the MPU <b>1</b> is converted by the MMU <b>9</b> into a physical address and the physical address is sent to the system bus <b>100</b> by way of the line <b>129</b>. Responsive to the address signal and the read request signal, respectively, on the lines <b>159</b> and <b>155</b> connected to the system bus <b>100</b>, the main memory control circuit <b>21</b> detects whether or not the address on the address line <b>159</b> connected to the system bus <b>100</b> is for the main memory <b>2</b>, and when the detection result is affirmative, that is, when the address is within <b>0</b> to a<sub>1</sub>-<b>1</b>, the main memory control circuit <b>21</b> reads the corresponding data from the main memory unit <b>22</b> by sending the address and control signals by way of lines <b>900</b> and <b>920</b>, and provides control so that the data is produced onto the data signal line <b>152</b>, thereby to provide the data onto the line <b>122</b> by way of the bus <b>100</b>. When the reading of data is completed, the main memory control circuit <b>21</b> turns the ACK signal line <b>158</b> on, thereby to turn on the ACK signal line <b>128</b> by way of the bus <b>100</b>. Since the main memory control circuit <b>21</b> is constructed so as not to provide the RMA signal, the RMA signal line <b>127</b> remains off. The ACK signal line <b>128</b> is connected to the CPU <b>10</b> via OR gate <b>15</b> to provide to it the completion signal <b>112</b>. At this moment, the cache control circuit <b>13</b> turns the switch signal line <b>119</b> off in response to the valid bit signal <b>121</b>, and instructs the internal switch <b>19</b> (FIG. 6) of the cache <b>11</b> that the data signal line <b>122</b> and the data signal line <b>115</b> are to be connected together, whereby the data which is read from the main memory unit <b>22</b> is transferred to the CPU <b>10</b>. Under the condition that the ACK signal line <b>128</b> is turned on and the RMA signal line <b>127</b> is turned off, the cache control circuit <b>13</b> turns the write enable signal line <b>118</b> on and in response to the absence of the valid bit signal on line <b>118</b>, the cache control circuit <b>13</b> turns on the signal line <b>120</b>, and so indicates that the data which is read be stored in a new entry of the cache <b>11</b>. Responsive to these two signals, the cache <b>11</b> erases one of the data that has been stored already, and stores the data that is read on the line <b>115</b> and an address thereof provided on the line <b>116</b> by CPU <b>10</b>. Therefore, if it is requested to read the data based upon the same address later on, the data stored just now in the cache <b>11</b> is read out, instead of the data stored in the main memory <b>2</b>. The input/output control circuit <b>3</b> also receives the read request signal on the line <b>125</b> and the address on the line <b>129</b>, respectively, by way of lines <b>135</b> and <b>139</b>, both connected to the system bus <b>100</b>. The input/output control <b>3</b> detects whether or not the control register <b>75</b>, the data register <b>77</b> or the status register <b>67</b> in the input/output control circuit <b>3</b> is to be read out, based upon the address signal <b>139</b> and the read request signal <b>135</b>, and when the detection result is affirmative, that is, when the address is either one of a<sub>4</sub>, a<sub>5 </sub>or a<sub>6</sub>, the data in the control register <b>75</b> or the status register <b>67</b> is sent to the data signal line <b>132</b>, thereby to send the read out data to the data signal line <b>122</b> by way of the bus <b>100</b>. At the same time, the input/output control circuit <b>3</b> turns the ACK signal line <b>138</b> and the RMA signal line <b>137</b> on, thereby it turns on the ACK signal line <b>128</b> and the RMA signal line <b>127</b>, respectively, which are connected to the lines <b>138</b> and <b>137</b> by way of the system bus <b>100</b>. Even if the read request signal line <b>111</b> is on and the ACK signal line <b>128</b> is on, the cache control circuit <b>13</b> does not turn the write enable signal <b>118</b> on if the RMA signal line <b>127</b> is on, and the data on the line <b>122</b> is not written into the cache <b>11</b>. Since the valid signal <b>121</b> is off, the cache control circuit <b>13</b> keeps the switch control signal <b>119</b> turned off. Therefore, the internal switch <b>19</b> (FIG. 6) of the cache <b>11</b> connects the data signal lines <b>122</b> and <b>115</b>, thereby to allow the data read out of the control register <b>75</b> or the status register <b>67</b> to be transferrd to the CPU <b>10</b>. As with the case of read-out from the main memory <b>2</b>, the ACK signal <b>128</b> is transferred to the OR gate <b>15</b>, thereby to provide the CPU <b>10</b> with the completion signal <b>112</b>.</p><p>A similar operation to that of the input/output control circuit <b>3</b> is performed by the common storage control circuit <b>81</b>, which receives the address signal <b>129</b> and the read request signal <b>125</b>, respectively, by way of the bus <b>100</b> and the line <b>149</b> and by way of the bus <b>100</b> and the line <b>145</b>. The common memory <b>8</b> is divided into two regions, i.e., a region of addresses from a<sub>2 </sub>to a<sub>3</sub>-<b>1</b> for communicating messages between the MPU <b>1</b> and the MPUX <b>1</b>A and a region of addresses to a<sub>1</sub>, to a<sub>2</sub>-<b>1</b> for storing instructions and data that are to be processed by the MPUX <b>1</b>A. The MPU <b>1</b> accesses only the region for communicating messages. When the common storage control <b>81</b> detects, based upon the address signal on the line <b>149</b> and the read request signal on the line <b>145</b>, that the data is to be read from the region for communicating messages within the common memory <b>82</b>, the common memory control circuit <b>81</b> performs the read operation to send the read out data onto the line <b>132</b>, and turns the RMA signal line <b>147</b> and the ACK signal line <b>148</b> on. Like the aforementioned control register and the status register in the input/output control circuit <b>3</b>, the data in the region for communicating messages is sent to CPU <b>10</b> but not stored in the cache <b>11</b> of MPU <b>1</b>. If the MPUX <b>1</b>A has been constructed in the same manner as the MPU <b>1</b>, the data of the region for communicating messages can be accessed by MPUX <b>1</b>A by way of the bus <b>100</b> in a similar way, and the accessed data is also not stored in the cache (not shown) of MPUX <b>1</b>A. On the other hand, when the data in a region that stores instructions and data for the MPUX <b>1</b>A is accessed by MPUX <b>1</b>A, the common memory control circuit <b>81</b> turns the RMA signal <b>147</b> off. Therefore, the MPUX <b>1</b>A writes the accessed data of that region into the cache (not shown) thereof, to execute the processing in the same manner as the main memory of MPU <b>1</b>.</p><p>This control operation is realized by providing the common memory control circuit <b>81</b> with a circuit which judges whether the address on the line <b>149</b> belongs to the region of the MPU <b>1</b> or to the region of the MPUX.</p><p>In the multiprocessor system, therefore, the message can be communicated without developing an inconsistency between the cache <b>11</b> and the common memory <b>82</b>.</p><p>The above description has dealt with a multi-processor system employing two processors. It will, however, be easily understood that the same effects are obtained even when three or more processors are employed.</p><p>Next, the access to the address translation table <b>90</b> in the MMU <b>9</b> will be explained. The read request signal <b>125</b> or the write request signal <b>110</b> is also provided to the MMU <b>9</b>, as well as the logical address <b>116</b> and the data <b>122</b>. The MMU <b>9</b> responds to the read or write request signals <b>125</b>, <b>110</b> when the logical address <b>116</b> is within the address region assigned to the logical address table <b>901</b> or the region assigned to the physical address table <b>902</b>, that is, in case of FIG. 13, the region of addresses from a<sub>7 </sub>to a<sub>8</sub>-<b>1</b> or from a<sub>8 </sub>to a<sub>9</sub>-<b>1</b>. In this case, no address translation is performed by the MMU <b>9</b>. In the case when the read request signal <b>125</b> is provided to the MMU <b>9</b>, the data in either one of the two tables <b>901</b>, <b>902</b> is read out onto the line <b>122</b>, and the MMU <b>9</b> provides the ACK signal and the RMA signal, respectively, onto the lines <b>128</b> and <b>127</b>. The ACK signal is transferred to the OR gate <b>15</b>, to provide the completion signal <b>112</b> to the CPU <b>10</b>. The cache control circuit <b>13</b> does not write the data on the line <b>122</b>, because the signal RMA is provided to the control circuit <b>13</b>, as was explained, for example, in connection with reading of data from the input/output control circuit <b>3</b>.</p><p>The cache <b>11</b> is controlled so as not to write any data within the table <b>90</b>, as will be clear from the explanation below. Therefore, the valid bit signal <b>121</b> remains turned off even if the address <b>116</b> is applied to the cache <b>11</b>. Therefore, the switch <b>19</b> (FIG. 6) inside the cache <b>11</b> connects the line <b>115</b> to the line <b>122</b>, thereby to enable the CPU <b>10</b> to receive the data read out of the address table <b>90</b>.</p><p>There will now be given an explanation of the operation which occurs when CPU <b>10</b> executes an instruction which requires writing of data into the main memory <b>2</b>, the common memory <b>8</b>, or the input/output control circuit <b>3</b>. To write the data, the CPU <b>10</b> produces an address for writing the data on the address signal line <b>116</b>, produces the write data on the data signal line <b>115</b>, and turns the write request signal line <b>110</b> on. The data is written into the cache <b>11</b> and one of the main memory <b>2</b>, the common memory <b>8</b> or the input/output control circuit <b>3</b>. Upon completion of writing, the completion signal line <b>112</b> is turned on, as was done with the case of reading of data, the CPU <b>10</b> discontinues use of the address signal line <b>116</b> or the data signal line <b>115</b>, and further turns the write request signal line <b>110</b> off.</p><p>The operation for writing data will now be described in more detail. When the read signal <b>111</b> is not turned on, the cache control circuit <b>13</b> keeps the switch control signal <b>119</b> turned off, and so instructs the cache <b>11</b> that the data signal lines <b>115</b> and <b>122</b> are to be connected. Due to this instruction, the write data is transferred from CPU <b>10</b> to the system bus <b>100</b> by way of the lines <b>115</b> and <b>122</b> and to MMU <b>9</b>. When the write request signal <b>110</b> is turned on, the read/write control circuit <b>14</b> sends the write request signal <b>110</b> to MMU <b>9</b> and to the system bus <b>100</b>. Further, the address on the address signal line <b>116</b> is converted by the MMU <b>9</b>, and is sent to the system bus <b>100</b>. The main memory <b>2</b> is connected to the system bus <b>100</b> by way of the write request signal line <b>154</b>. Responsive to the address signal <b>159</b> and the write request signal <b>154</b>, the main memory control circuit <b>21</b> performs the same operation as the case of reading data except that it controls the main memory unit <b>22</b> in such a way that the data signal <b>152</b> is written into the corresponding address location of the main memory unit <b>22</b>. That is, it turns the ACK signal <b>158</b> on when the write operation of data is completed. Therefore, the ACK signal <b>128</b> is turned on, and the completion signal <b>112</b> is provided to CPU <b>10</b> via the OR gate <b>15</b>. The RMA signal <b>127</b> remains turned off.</p><p>Even at the time of writing the data, the cache <b>11</b> checks to see whether or not the data of the logical address on the line <b>116</b> has been stored, and if the check result is affirmative, a valid bit signal is produced on the valid bit signal line <b>121</b>. As the ACK signal <b>128</b> is turned on, the RMA signal line <b>127</b> is off, and the write request signal <b>110</b> is on, the cache control circuit <b>13</b> turns the write enable signal <b>118</b> on irrespective of the presence of the valid bit signal on the line <b>121</b>. When the valid bit signal <b>121</b> is turned on, the cache control circuit <b>13</b> turns the signal <b>120</b> off, and operates to replace the data within the cache <b>11</b>, at a location designated by the address on the line <b>116</b>, by the data on the line <b>115</b>. When the signal <b>121</b> remains turned off, however, the cache control circuit <b>13</b> turns the new entry write signal <b>120</b> on, and operates to erase one of the data that have been stored already, and to store the write address on the line <b>116</b> and the data on the line <b>115</b> at a location where the erased data was stored.</p><p>When the data provided by CPU <b>10</b> is to be written into the control register <b>75</b>, the data register <b>77</b> or the status register <b>67</b> in the input/output control circuit <b>3</b>, the input/output control circuit <b>3</b> detects the presence of the request from the address signal <b>139</b> and the write signal <b>134</b> which is transferred from the line <b>125</b> by way of the bus <b>100</b>. Then, the input/output control circuit <b>3</b> writes the data signal <b>132</b> into a designated register, and turns the ACK signal <b>138</b> and the RMA signal <b>137</b> on. Even when signal <b>110</b> becomes on and the ACK signal <b>128</b> is on, the cache control circuit <b>13</b> does not turn the write enable signal <b>118</b> on when the RMA signal <b>127</b> is on. Therefore, the address and data of the control register <b>75</b>, the data register <b>77</b> or status register <b>67</b> in the input/output control circuit <b>3</b> are not written into the cache <b>11</b>.</p><p>In reading the data from or writing the data into the control register <b>75</b>, the data register <b>77</b> or status register <b>67</b> in the input/output control circuit <b>3</b>, the cache <b>11</b> checks to see whether the data has been stored therein. However, since no data of the three registers has been stored, the valid bit signal <b>121</b> is always turned off. When the data is to be read out, therefore, the data is read from the three registers and not from the cache <b>11</b>.</p><p>Accordingly, even when the cache is provided, the input and output of data can be controlled without developing an inconsistency in the memory mapped I/O system.</p><p>When the data provided by the CPU is to be written into the region of the common memory unit <b>22</b> for communicating messages between the MPU <b>1</b> and the MPUX <b>1</b>A, the common memory control circuit <b>81</b> responds to the address on the line <b>149</b> and the write request on the line <b>144</b>, which is connected to the write request signal line <b>110</b> by way of the bus <b>100</b>, and performs a similar operation to that for reading data from the common memory unit <b>8</b>, except that the common memory control circuit <b>81</b> controls the common memory unit <b>82</b> so that the latter stores the data on the line <b>142</b>. The operation of the cache <b>11</b> is the same as the case of writing of data into the input/output control circuit <b>3</b>.</p><p>Next will be explained the write operation to the MMU <b>9</b>. In the case where the write request signal <b>110</b> is provided to the MMU <b>9</b>, the data is written in either one of the two tables <b>901</b>, <b>902</b>, when the address on the line <b>116</b> falls within a region of a<sub>7 </sub>to a<sub>9</sub>-<b>1</b>. Even in this case, the ACK signal and the RMA signal are generated as in the case of reading of the address translation table <b>90</b>, so no writing is done to the cache <b>11</b>. MMU <b>9</b> further generates a purge signal onto the line <b>126</b>. Upon receipt of the purge signal <b>126</b>, the cache control circuit <b>13</b> turns the clear signal <b>117</b> on, and invalidates all of the cache memories <b>11</b>.</p><p>Due to this invalidation, the relationship between the data at logical addresses in the cache <b>11</b> and the data at physical addresses in the memory is maintained. For instance, if it is presumed that the data at a logic address <b>100</b> is stored in the cache <b>11</b>, and if this data which is read out and which corresponds to data at the physical address <b>1000</b> due to address conversion is caused to correspond to address <b>500</b> by rewriting the address conversion table, the data of physical address <b>1000</b> in the cache <b>11</b> is read out when the processor reads the data of address <b>100</b>, resulting in the occurrence of an inconsistency. When the address conversion table is rewritten, the purge signal is produced to invalidate the cache <b>11</b>, to prevent this problem.</p><p>Internal circuits of major blocks of FIG. 5 will be described below in conjunction with FIGS. 6 to <b>10</b>.</p><p>FIG. 6 is a circuit diagram of the cache <b>11</b> which consists of an associative memory <b>16</b>, a counter <b>17</b>, an AND gate <b>18</b>, and a switch <b>19</b>. The associative memory <b>16</b> has plural entries each storing an address, data and a valid bit. When the clear signal <b>117</b> is turned on at an initial stage of the operation of the system, effective bits of the associative memory <b>16</b> are all turned off, and the memory is invalidated. When the presence of data within the cache <b>11</b> is to be checked, the associative memory <b>16</b> reads out a group of data and a valid bit of an entry storing an address that coincides with the address signal <b>116</b> on the internal signal lines <b>160</b> and <b>121</b>, respectively. When there is no address that coincides, the signal <b>121</b> is turned off. When a write enable signal <b>118</b> is on, the associative memory <b>16</b> performs a write operation. If the new entry write signal <b>120</b> is off, the data signal <b>115</b> is written into a data field of an entry having an address stored that coincides with the address signal <b>116</b>, and the valid bit of this entry is turned on. When the new entry signal <b>120</b> is on, the output of the AND gate <b>18</b> which responds to the write enable signal <b>118</b> and the new entry write signal <b>120</b> is turned on, and the counter <b>17</b> is incremented by +1. That is, when an address signal, data and a valid bit are to be stored in the associative memory <b>16</b>, the counter <b>17</b> changes sequentially the entry that should be used for writing of that data. The switch <b>19</b> is a bidirectional one which connects the data signal line <b>160</b> and the data signal line <b>115</b> together when the switch control signal <b>119</b> is on, and which connects the data signal line <b>122</b> and the data signal line <b>115</b> together when the switch control signal <b>119</b> is off.</p><p>FIG. 7 is a diagram of the cache control circuit <b>13</b> which consists of OR gates <b>51</b>, <b>53</b>, AND gates <b>52</b>, <b>54</b>, inverters <b>50</b>, <b>220</b> and a latch circuit <b>55</b>. The AND gates <b>52</b>, the OR gate <b>53</b> and the inverter <b>50</b> produce the write enable signal <b>118</b> in response to the read request signal <b>111</b> or the write request signal <b>110</b>, and in response to the ACK signal <b>128</b> and an inverted signal of the RMA signal. <b>127</b>, to instruct the cache <b>11</b> to perform a write operation. It is to be noted that the write enable signal <b>118</b> is not generated when the RMA signal <b>127</b> is on.</p><p>The OR gate <b>51</b> responds to the reset signal <b>113</b> or the purge signal <b>126</b> and generates the clear signal <b>117</b>, to invalidate the cache <b>11</b>. The AND gate <b>54</b> responds to the read request signal <b>11</b> and a delayed signal of the valid bit signal <b>121</b> delayed by the latch circuit <b>55</b>, which delays the valid bit signal <b>121</b> until data read out of the main memory <b>2</b> arrives at the cache <b>11</b>. The new entry write signal <b>120</b> is provided by the inverters which respond to the delayed signal of the valid bit signal <b>121</b>, to indicate to the cache <b>11</b> to write a new entry of data, an address and a valid bit signal therein.</p><p>FIG. 8 is a diagram of the read/write control circuit <b>14</b> which consists of a delay circuit <b>56</b>, AND gates <b>57</b>, <b>58</b> and an inverter <b>59</b>. The write request signal <b>110</b> is passed through the read/write control circuit <b>14</b> to provide the write request signal <b>110</b> to the bus <b>100</b> (FIG. <b>5</b>).</p><p>The AND gate <b>58</b> generates the read request signal <b>125</b> in response to the read request signal <b>111</b> delayed by the delay circuit <b>56</b> and an inverted form of the valid bit signal <b>121</b> inverted by the inverter <b>59</b>. The AND gate <b>57</b> provides the completion signal <b>114</b> in response to the valid bit signal <b>121</b> and the delayed signal of the read request signal <b>111</b>. The delay circuit <b>56</b> is provided so that reference is not made to the valid bit signal <b>121</b> by the AND gates <b>57</b>, <b>58</b> until the valid bit signal <b>121</b> is determined as a result of the address check by the cache <b>11</b>.</p><p>FIG. 9 is a diagram of the input/output control circuit <b>3</b> which consists of a decoder <b>60</b>, AND gates <b>63</b>, <b>65</b>, <b>66</b>, <b>76</b>, <b>78</b>, <b>79</b>, OR gates <b>64</b>, <b>90</b>, a tristate buffer <b>68</b>, <b>88</b>, open emitter buffers <b>61</b>, <b>62</b> a status register <b>67</b>, the control register <b>75</b> and the data register <b>77</b>. The status register <b>67</b> receives status data from the input/output device by way of the line <b>400</b>.</p><p>The control register <b>75</b> sends its content to the input/output device <b>4</b> by way of the line <b>410</b> to control it.</p><p>The data register <b>77</b> receives data from the MPU <b>1</b> by way of the line <b>132</b> and sends it to the input/output device <b>4</b> by way of the line <b>420</b>, or vice versa.</p><p>The decoder <b>60</b> decodes the address signal <b>139</b>, discriminates whether the input/output control circuit <b>3</b> is selected or not, and further discriminates which register is selected. When the addresss <b>139</b> is equal to a<sub>4</sub>, a<sub>5 </sub>or a<sub>6</sub>, as shown in FIG. 13, it means that the status register <b>67</b>, the control register <b>75</b> or the data register <b>77</b> is a selected register. When the decoder <b>60</b> detects that the address <b>139</b> is equal to A<sub>4</sub>, it turns on the line <b>300</b>A.</p><p>When the data is to be written into the status register <b>67</b>, that is, when the write request is provided on the line <b>134</b>, the output of the AND gate <b>65</b> is turned on to write the data on the line <b>132</b>. When the data is to be read from the status register <b>67</b>, that is, when the read request is provided on the line <b>135</b>, the output of the AND gate <b>66</b> is turned on, and the tristate buffer <b>68</b> is turned on, thereby to transfer the data of the status register <b>67</b> to the data signal line <b>132</b>. The OR gate <b>90</b> sends the RMA signal on the line <b>300</b>D in response to the signal on the line <b>300</b>A, thereby to transmit the RMA signal onto the line <b>137</b> by way of an open emitter buffer <b>61</b>. The AND gate <b>63</b> receives the outputs of the OR gate <b>64</b> which receives either the read request signal <b>135</b> or the write request signal <b>134</b>. Thus, the ACK signal is generated by the gates <b>63</b> and <b>64</b> in response to the RMA signal on the line <b>300</b>D and the read request signal <b>135</b>, thereby to allow the open emitter buffer <b>62</b> to drive the ACK signal on the line <b>138</b>.</p><p>When the address on the line <b>139</b> is equal to a<sub>5</sub>, the decoder <b>60</b> turns on the lines <b>300</b>B. The AND gate <b>76</b> is enabled by the signal on the line <b>300</b>B, when the write request is provided on the line <b>134</b>. When the AND gate <b>76</b> is enabled, the control register <b>75</b> receives the data on the line <b>132</b> in response to the output of the AND gate <b>76</b>. The RMA signal <b>137</b> and the ACK signal <b>138</b> are generated in response to the signal on the line <b>300</b>B and the write request on the line <b>134</b>, as in the case of the selection of the status register <b>76</b>. When the address <b>139</b> is equal to a<sub>6</sub>, the decoder <b>60</b> enables the line <b>300</b>C, thereby to enable the AND gates <b>78</b> or <b>79</b>, respectively, when the write request signal <b>134</b> or the read request signal <b>135</b> is provided. The tristate buffer <b>88</b> is enabled in response to an enabled output of the AND gate <b>79</b> when the read request signal <b>135</b> is provided to the AND gate <b>79</b>, thereby to allow read-out of the data of the data register <b>77</b> onto the line <b>132</b>. The enabled output of the AND gate <b>78</b> enables the data register <b>77</b> to store data on the line <b>132</b>, when the write request signal <b>134</b> is provided to the AND gate <b>78</b>. The generation of the ACK signal <b>138</b> and the RMA signal <b>137</b> is effected in response to an output of the OR gate <b>90</b> which is enabled when the line <b>300</b>C is enabled.</p><p>FIG. 10 is a diagram of the common memory control circuit <b>81</b> which consists of decoder <b>69</b>, <b>80</b>, open-emitter buffers <b>86</b>, <b>87</b>, an OR gate <b>83</b>, an AND gate <b>84</b>, and a timing control circuit <b>85</b>. The decoder <b>69</b> detects whether the common memory <b>8</b> is selected or not, that is, whether or not the address on the line <b>149</b> belongs to a<sub>1 </sub>to a<sub>3</sub>-<b>1</b>, and turns on the line <b>810</b> and sends the address on the line <b>149</b> to the common memory unit <b>82</b> by way of the line <b>800</b>, both when the detection result by the decoder <b>69</b> is affirmative. The decoder <b>80</b> detects whether the location which is to be accessed by the address on the line <b>149</b> is in a region of addresses a<sub>2 </sub>to a<sub>3</sub>-<b>1</b>, for communicating messages. When this particular region is selected, the decoder <b>80</b> sends the RMA signal. The open-emitter buffers <b>86</b> drive the RMA signal onto the line <b>147</b>. The output of the OR gate <b>83</b> is turned on only when there is a read request signal <b>145</b> or a write request signal <b>144</b>. The AND gate <b>84</b> responds to the signal on the line <b>810</b> and the output of the OR gate <b>83</b>, thereby to activate the timing control circuit <b>85</b> only when there is an access to the common memory <b>8</b>.</p><p>The timing control circuit <b>85</b> responds to the write request signal <b>144</b> and the read request signal <b>145</b> when an enabled output of the AND gate <b>84</b> is provided thereto, and produces control signals on the line <b>820</b> which is necessary for accessing the common memory unit <b>82</b>, and further produces the ACK signal when the operation is completed. The ACK signal is applied onto the line <b>148</b> by the open-emitter buffer <b>87</b>.</p><p>FIG. 11 shows a diagram of the main memory control circuit <b>21</b>, wherein the reference numeral with a prime indicates the same circuit or the same circuit element as one with the same reference numeral in FIG. <b>10</b>. It is clear that the main memory control circuit <b>21</b> differs from the common memory control circuit <b>81</b> in that the decoder <b>80</b> in FIG. 10 which generates the RMA signal is not provided in the main memory control circuit <b>21</b>.</p><p>FIG. 12 is a diagram of the MMU <b>9</b>, wherein the address translation table <b>90</b> responds to the logical address <b>116</b> to generate the physical address <b>129</b> by means of the logical address table <b>901</b> and the physical address table <b>902</b>. The decoder <b>91</b> responds to the logical address <b>116</b> and turns on the line <b>163</b> or <b>161</b>, respectively, depending upon whether the address <b>116</b> belongs to a region of addresses a<sub>7 </sub>to a<sub>8</sub>-<b>1</b> or a region of addresses a<sub>8 </sub>to a<sub>9</sub>-<b>1</b>. The decoder <b>91</b> further provides a row selection signal <b>162</b> when either one of the two tables <b>901</b>, <b>902</b> is to be accessed by the address <b>116</b>.</p><p>In case of a write request to the logical address table <b>901</b>, the AND gate <b>92</b> is enabled, because the write request signal <b>124</b> and the logical address table selection signal <b>163</b> are provided to the AND gate <b>92</b>. Therefore, the data <b>122</b> is written onto a row of the logical address table <b>901</b> designated by the signal <b>162</b>. Similarly, in case of a write request to the physical address table <b>902</b>, the AND gate <b>93</b> is turned on, and the data <b>122</b> is written into the physical address table <b>902</b>. When either one of the AND gates <b>92</b>, <b>93</b> is turned on, the OR gate <b>94</b> generates the purge signal on the line <b>126</b>. Furthermore, the output of the OR gate <b>94</b> is transferred to the respective lines <b>128</b>, <b>127</b> as the ACK signal and the RMA signal, respectively, by way of the OR gate <b>98</b> and the open-emitter buffer <b>89</b> and by way of the OR gate <b>98</b> and the open-emitter buffer <b>99</b>.</p><p>In case of a read request to the logical address table <b>901</b>, the logical address and the physical address in a row accessed by the row signal <b>162</b> respectively within the logical address table <b>901</b> and the physical address table <b>902</b> are read out onto the tristate buffers <b>73</b> and <b>74</b>, respectively. When the address <b>116</b> is for the logical address table <b>901</b>, the AND gate <b>96</b> is turned on, and the read out logical address is transferred to the data signal line <b>122</b> by way of the enabled tristate buffer <b>73</b>. Similarly, in case of the read request to the physical address table <b>902</b>, the AND gate <b>95</b> is turned on, and the read-out physical address is read out onto the data signal line <b>122</b>. When the AND gate <b>95</b> or <b>96</b> is turned on, the outputs of these two AND gates provide the ACK signal and the RMA signal, on the lines <b>127</b> and <b>128</b>, respectively, by way of the OR gates <b>97</b>, <b>98</b> and the open-emitter buffer <b>89</b>, and by way of the OR gates <b>97</b>, <b>98</b> and the open-emitter buffer <b>99</b>.</p><p>According to the present invention, as will be obvious from the foregoing description, when the processor accesses memory which includes a particular region in which the stored content undergoes a change depending upon particular factors, such as in the memory mapped I/O system and in the multiprocessor system, the data at the time of accessing the particular region is inhibited from being held in the cache memory, so that inconsistency will not develop in the accessed data.</p><p>Therefore, it is possible to improve the performance of the system using a cache memory, while maintaining the advantages of the memory mapped I/O system that precisely controls input/output devices in response to general instructions as well as advantages of the multiprocessor system which is effective to disperse the load.</p><p>According to the disclosed embodiment, the microprocessor <b>1</b> includes the cache <b>11</b> and the cache control circuit <b>13</b>. Further, the cache control circuit <b>13</b> in the microprocessor <b>1</b> receives the RMA signal that inhibits the data from being written into the cache <b>11</b>. Therefore, the cache memory can be constituted independently of the microprocessor <b>1</b> provided the data that represents a particular region is not written therein. Accordingly, it is possible to provide a microprocessor which can be used for general purposes.</p><p>The prior art common memory control circuit or I/O control does not have a circuit portion which generates the RMA signal as shown by lines <b>137</b> and <b>147</b>. This means that the prior art common memory control circuit and so on cannot be combined with the microprocessor <b>1</b> shown in FIG. 5 without modification.</p><p>FIG. 14 shows another embodiment of a data processing system according to the present invention wherein the prior art common memory control circuit and so on can be connected to the microprocessing unit <b>1</b>A according to the present invention. FIG. 14 shows an internal structure of only the microprocessing unit <b>1</b>A. The microprocessing unit <b>1</b>A is connected to the main memory <b>2</b>, common memory <b>8</b> and the I/O control <b>3</b> with slight modifications of the latter two circuits.</p><p>The same reference numerals in FIG. 14 as those in FIGS. 5-8 designates the same circuit elements. The microprocessing unit <b>1</b>A in FIG. 14 differs from the microprocessing unit <b>1</b> in FIG. 5 only in that the microprocessing unit <b>1</b>A has a circuit portion to generate the RMA signal used in the embodiment of FIG. <b>5</b>. In FIG. 14, the circuit portion relating to clearing of the cache memory <b>11</b> or to purging of the cache is not shown for sake of simplicity. The registers <b>302</b> to <b>307</b>, decoders <b>314</b> to <b>316</b>, and OR gate <b>320</b> produce the RMA signal on the line <b>127</b>, as will be explained later on in more detail. Therefore, the microprocessing unit <b>1</b>A does not need to receive the RMA signal from outside. Therefore, the main memory control circuit, the common memory control circuit and the I/O control (all not shown in FIG. 14) which are to be connected to the microprocessing unit <b>1</b>A can be those which do not have any circuit portions to generate the RMA signal.</p><p>At the initial stage of operation of the system, CPU <b>10</b> sets the lower limit address a<sub>2 </sub>and the upper limit address a<sub>3</sub>-<b>1</b> of the message communication region of the logical address region shown in FIG. 13 into the registers <b>302</b> and <b>303</b>, respectively. Similarly, CPU sets the addresses a<sub>4 </sub>and a<sub>6 </sub>shown in FIG. 13 into the registers <b>304</b> and <b>305</b>. CPU further sets the addresses a<sub>7 </sub>and a<sub>9</sub>-l into the registers <b>306</b> and <b>307</b>. FIG. 13 should be regarded as depicting a memory map for logical addresses regarding the embodiment of FIG. <b>14</b>.</p><p>When CPU issues a read request signal <b>111</b> or write request signal <b>110</b>, it issues the logical address associated with the issued request signal onto the line <b>116</b>. The decoder <b>314</b> generates the RMA signal when the issued logical address on the line <b>116</b> falls within the address region from a<sub>2</sub>to a<sub>3</sub>-<b>1</b> shown by the registers <b>304</b>, <b>305</b>. The decoder <b>315</b> generates the RMA signal when the issued logical address on the line <b>116</b> falls within the address region from a<sub>4 </sub>to a<sub>6 </sub>shown by the registers <b>306</b>, <b>307</b>. The decoder <b>316</b> generates the RMA signal when the issued logical address on the line <b>116</b> falls within an address region from a<sub>7 </sub>to a<sub>9</sub>-l shown by the registers <b>306</b>, <b>307</b>.</p><p>The RMA signal provided from any of the decoders <b>314</b> to <b>316</b> is transferred to the inverter <b>50</b> by way of an OR gate <b>320</b>. When the RMA signal exists on the line <b>127</b>, the data is not written, quite in the same way as explained in connection with the embodiment of FIG. <b>5</b>.</p><p>As the operation of the microprocessing unit <b>1</b>A is the same as that of the microprocessing unit <b>1</b> of FIG. 5, no further detailed explanation of the operation of the former will be given for sake of simplicity.</p><p>According to the embodiment shown in FIG. 14, CPU <b>10</b> can set the addresses in the registers <b>302</b> to <b>307</b> by executing program instructions. Therefore, this embodiment can be applied to any system which has arbitrary address regions, the data for which should not be written in the cache memory, and the prior art common memory control circuit or I/O control which has no circuit portion to generate the RMA signal. As no signal line is required for the microprocessing unit <b>1</b>A to receive the RMA signal from outside, this reduces the number of pins required for the microprocessing unit <b>1</b>A to exchange signals with outside.</p><p>The number of external circuits which can be connected to the microprocessing unit <b>1</b>A is, however, limited by the number of the registers <b>302</b> to <b>307</b> and the decoders <b>314</b> to <b>316</b>, which does not occur in case of the embodiment of FIG. <b>5</b>.</p><?DETDESC description=\"Detailed Description\" end=\"tail\"?></description>"}], "inventors": [{"first_name": "Tadahiko", "last_name": "Nishimukai", "name": ""}, {"first_name": "Atsushi", "last_name": "Hasegawa", "name": ""}, {"first_name": "Masaru", "last_name": "Matsumura", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "HITACHI, LTD."}, {"first_name": "", "last_name": "", "name": "HITACHI MICRO COMPUTER ENGINEERING, LTD."}], "ipc_classes": [{"primary": true, "label": "G06F  12/00"}, {"primary": false, "label": "G06F  13/00"}], "locarno_classes": [], "ipcr_classes": [{"label": "G06F  12/08        20060101A I20051008RMDE"}, {"label": "G06F  12/0888      20160101A I20201006RMEP"}], "national_classes": [{"primary": true, "label": "711138"}, {"primary": false, "label": "711E12021"}, {"primary": false, "label": "711167"}, {"primary": false, "label": "711100"}, {"primary": false, "label": "711003"}], "ecla_classes": [{"label": "G06F   9/30A2L"}, {"label": "G06F  12/08B18"}], "cpc_classes": [{"label": "G06F   9/30043"}, {"label": "G06F  12/0888"}, {"label": "G06F  12/0888"}, {"label": "G06F   9/30043"}], "f_term_classes": [], "legal_status": "Expired - Fee Related", "priority_date": "1984-01-23", "application_date": "1998-06-01", "family_members": [{"ucid": "US-5822761-A", "titles": [{"lang": "EN", "text": "Data processing system which controls operation of cache memory based and the address being accessed"}]}, {"ucid": "DE-3502147-C2", "titles": []}, {"ucid": "DE-3502147-A1", "titles": [{"lang": "EN", "text": "Data processing system with improved buffer memory control"}, {"lang": "DE", "text": "DATENVERARBEITUNGSSYSTEM MIT VERBESSERTER PUFFERSPEICHERSTEUERUNG"}]}, {"ucid": "US-5148526-A", "titles": [{"lang": "EN", "text": "DATA PROCESSING SYSTEM WITH AN ENHANCED CACHE MEMORY CONTROL"}]}, {"ucid": "US-5502825-A", "titles": [{"lang": "EN", "text": "Data processing system with an enhanced cache memory control"}]}, {"ucid": "US-5509133-A", "titles": [{"lang": "EN", "text": "Data processing system with an enhanced cache memory control"}]}, {"ucid": "US-5619677-A", "titles": [{"lang": "EN", "text": "Data processing system with an enhanced cache memory control"}]}, {"ucid": "US-5479625-A", "titles": [{"lang": "EN", "text": "Data processing unit"}, {"lang": "EN", "text": "Ring systolic array system for synchronously performing matrix/neuron computation using data transferred through cyclic shift register connected in cascade of trays"}]}, {"ucid": "US-6381680-B1", "titles": [{"lang": "EN", "text": "Data processing system with an enhanced cache memory control"}]}]}