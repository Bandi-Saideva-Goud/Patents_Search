{"patent_number": "US-6195729-B1", "publication_id": 72583893, "family_id": 21819971, "publication_date": "2001-02-27", "titles": [{"lang": "EN", "text": "Deallocation with cache update protocol (L2 evictions)"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA72517634\"><p>In evicting data from a first cache in a level other than the lowest in a multilevel cache hierarchy, data is written to the system bus and snooped back into a second cache on a lower level in the cache hierarchy. The need for a private data path between the two caches is thus eliminated, and the second cache memory need not be dual-ported. The reload path employed for updating the second cache is reused to snoop cast-outs off the system bus. As a result of the first cache evicting data via the system bus, the second cache never contains data which is modified (M) with respect to system memory and other devices in a multiprocessor system get updated earlier. The need for error correction code (ECC) checking is eliminated, together with the associated additional bits, and may be replaced by simple parity checking. The bus into the second cache thus requires fewer bits, consumes less area, and may be operated at a higher frequency. When employed in conjunction with an H-MESI cache coherency protocol, horizontal devices go from the hovering (H) state to the shared (S) state faster.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6195729-B1-CLM-00001\" num=\"1\"><claim-text>1. A method of deallocating a cache location in a data processing system including first and second logically in line caches connected to a system memory by a system bus, wherein the second cache is logically below the first cache, comprising:</claim-text><claim-text>selecting a victim cache line within the first cache; </claim-text><claim-text>writing the selected victim cache line to the system memory utilizing a system bus operation; </claim-text><claim-text>snooping the system bus operation in snoop logic for the second cache; </claim-text><claim-text>identifying a corresponding cache line within the second cache which corresponds to the selected victim cache line; </claim-text><claim-text>determining whether the corresponding cache line within the second cache matches the selected victim cache line; </claim-text><claim-text>responsive to determining that the corresponding cache line within the second cache does not match the selected victim cache line, checking data for the selected victim cache line snooped from the system bus operation for a parity error; and </claim-text><claim-text>responsive to not detecting a parity error in the snooped system bus operation, updating the corresponding cache line within the second cache with data from the snooped system bus operation. </claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6195729-B1-CLM-00002\" num=\"2\"><claim-text>2. The method of claim <b>1</b>, wherein the step of determining whether the corresponding cache line within the second cache matches the selected victim cache line further comprises:</claim-text><claim-text>checking a coherency state associated with the corresponding cache line within the second cache. </claim-text></claim>"}, {"num": 3, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6195729-B1-CLM-00003\" num=\"3\"><claim-text>3. The method of claim <b>1</b>, further comprising:</claim-text><claim-text>responsive to determining that the corresponding cache line within the second cache does not match the selected victim cache line, updating the corresponding cache line in the second cache with data from the snooped system bus operation. </claim-text></claim>"}, {"num": 4, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6195729-B1-CLM-00004\" num=\"4\"><claim-text>4. The method of claim <b>1</b>, further comprising:</claim-text><claim-text>responsive to detecting a parity error in the snooped system bus operation, treating the snooped system bus operation as a miss. </claim-text></claim>"}, {"num": 5, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"US-6195729-B1-CLM-00005\" num=\"5\"><claim-text>5. The method of claim <b>1</b>, further comprising:</claim-text><claim-text>responsive to detecting a parity error in the snooped system bus operation, queueing an operation for retrieving data for the corresponding cache line within the second cache from system memory. </claim-text></claim>"}, {"num": 6, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6195729-B1-CLM-00006\" num=\"6\"><claim-text>6. A portion of a data processing system storage hierarchy, comprising;</claim-text><claim-text>an upper cache within the storage hierarchy; </claim-text><claim-text>a lower cache logically in line between the upper cache and other portions of the storage hierarchy below the upper cache; </claim-text><claim-text>a bus connected to the upper and lower caches and connecting the upper and lower caches to other portions of the storage hierarchy; </claim-text><claim-text>first logic within the upper cache writing a selected victim cache line from the upper cache to the bus upon deallocation of the selected victim cache line within the upper cache; </claim-text><claim-text>first logic within the lower cache snooping the data item from the bus and identifying a corresponding cache line within the lower cache which corresponds to the selected victim cache line; </claim-text><claim-text>second logic within the lower cache which determines whether the corresponding cache line within the lower cache matches the selected victim cache line; </claim-text><claim-text>third logic within the lower cache checking a parity of data for the selected victim cache line snooped from the bus within the lower cache; and </claim-text><claim-text>fourth logic within the lower cache updating the corresponding cache line within the lower cache if the parity of the data for the selected victim cache line snooped from the bus is correct. </claim-text></claim>"}, {"num": 7, "parent": 6, "type": "dependent", "paragraph_markup": "<claim id=\"US-6195729-B1-CLM-00007\" num=\"7\"><claim-text>7. The apparatus of claim <b>6</b>, wherein the second logic within the lower cache further comprises:</claim-text><claim-text>logic checking a coherency state of the corresponding cache line within the lower cache. </claim-text></claim>"}, {"num": 8, "parent": 7, "type": "dependent", "paragraph_markup": "<claim id=\"US-6195729-B1-CLM-00008\" num=\"8\"><claim-text>8. The apparatus of claim <b>7</b>, further comprising:</claim-text><claim-text>fourth logic within the lower cache queueing an operation to update the corresponding cache line within the lower cache from other portions of the storage hierarchy if the parity of the data for the selected victim cache line snooped from the bus is wrong. </claim-text></claim>"}, {"num": 9, "parent": 6, "type": "dependent", "paragraph_markup": "<claim id=\"US-6195729-B1-CLM-00009\" num=\"9\"><claim-text>9. The apparatus of claim <b>6</b>, wherein the first logic within the lower cache writes data within the selected victim cache line from the upper cache to the bus upon deallocation of the selected victim cache line only if the data within the selected victim cache line is modified.</claim-text></claim>"}, {"num": 10, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"US-6195729-B1-CLM-00010\" num=\"10\"><claim-text>10. A data processing system, comprising:</claim-text><claim-text>a system memory; </claim-text><claim-text>a system bus connected to the system memory; </claim-text><claim-text>a first cache connected to the system bus; </claim-text><claim-text>a second cache logically in line with and logically below the first cache within the data processing system; </claim-text><claim-text>first logic writing data from a deallocated cache location a within the first cache to the system memory via a system bus operation on the system bus; </claim-text><claim-text>second logic snooping the system bus operation from the system bus to determine if a corresponding cache location within the second cache matches the deallocated cache location within the first cache; and </claim-text><claim-text>third logic checking a parity of data for the deallocated cache location snooped from the system bus, wherein the second logic </claim-text><claim-text>updates the corresponding cache location within the second cache with data for the deallocated cache location snooped from the system bus if the parity is correct, and </claim-text><claim-text>queues an operation to update the corresponding cache location within the second cache from the system memory if the parity is incorrect. </claim-text></claim>"}, {"num": 11, "parent": 10, "type": "dependent", "paragraph_markup": "<claim id=\"US-6195729-B1-CLM-00011\" num=\"11\"><claim-text>11. The data processing system of claim <b>10</b>, wherein the first cache comprises a level two cache.</claim-text></claim>"}, {"num": 12, "parent": 10, "type": "dependent", "paragraph_markup": "<claim id=\"US-6195729-B1-CLM-00012\" num=\"12\"><claim-text>12. The data processing system of claim <b>10</b>, wherein the second cache comprises a level three cache.</claim-text></claim>"}, {"num": 13, "parent": 10, "type": "dependent", "paragraph_markup": "<claim id=\"US-6195729-B1-CLM-00013\" num=\"13\"><claim-text>13. The data processing system of claim <b>10</b>, wherein the first cache comprises a level one cache and the second cache comprises a level two cache.</claim-text></claim>"}, {"num": 14, "parent": 10, "type": "dependent", "paragraph_markup": "<claim id=\"US-6195729-B1-CLM-00014\" num=\"14\"><claim-text>14. The data processing system of claim <b>10</b>, wherein the second logic further comprises:</claim-text><claim-text>logic checking a coherency state of the corresponding cache location within the second cache. </claim-text></claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES54502592\"><?BRFSUM description=\"Brief Summary\" end=\"lead\"?><h4>RELATED APPLICATIONS</h4><p>The present invention is related to the subject matter of commonly assigned, copending U.S. patent application Ser. No. 09/024,316 entitled \u201cMerged Vertical Cache Controller Mechanism\u201d and filed Feb. 17, 1998, the content of which is incorporated herein by reference.</p><h4>BACKGROUND OF THE INVENTION</h4><p>1. Technical Field</p><p>The present invention relates in general to eviction of data from caches in a data processing system and in particular to eviction of data from a cache in a data processing system having a multilevel cache hierarchy. Still more particularly, the present invention relates to eviction of data from one cache to a logically in line cache within a data processing system having a multilevel cache hierarchy.</p><p>2. Description of the Related Art</p><p>Most contemporary data processing system architectures include multiple levels of cache memory within the storage hierarchy. Caches are employed in data processing systems to provide faster access to frequently used data over access times associated with system memory, thereby improving overall performance. Caches at any level in the storage hierarchy may be private (reserved for a local processor) or shared (accessible to multiple processors), although typically caches at levels closer to the processors are private. Level one (L1) caches, those logically closest to the processor, are typically implemented as an integral part of the processor and may be bifurcated into separate data and instruction caches. Lower level caches are generally implemented as separate devices, although a level two (L2) may be formed within the same silicon die as a processor.</p><p>When utilized, multiple cache levels are typically employed in progressively larger sizes with a trade off to progressively longer access latencies. Smaller, faster caches are employed at levels within the storage hierarchy closer to the processor or processors, while larger, slower caches are employed at levels closer to system memory. Logically in line caches within a multilevel cache hierarchy are generally utilized to stage data to and from caches in higher levels of the storage hierarchy. As data is staged or transferred from system memory or caches in lower levels of the storage hierarchy to a cache in a higher level of the storage hierarchy, a replacement policy\u2014typically a least-recently-used replacement policy\u2014is employed to determine which cache locations should be utilized to store the new data. This process, often referred to as \u201cupdating\u201d the cache, causes any modified data associated with the cache location selected by the replacement policy (also called a \u201cvictim\u201d) to be written back to lower levels of the storage hierarchy. The process of writing modified data from a victim to system memory or a lower cache level is called a cast out or eviction.</p><p>Accessing system memory generally has a significantly longer latency than that associated with accessing any cache in the storage hierarchy. For example, accessing system memory may require up to four times as many processor cycles as are required to access a level three (L3) cache, and up to 10-15 times as many processor cycles as are required to access an L2 cache. Therefore, data evicted from a cache in any cache hierarchy level other than the lowest is conventionally written to the next lower level of the cache hierarchy rather than to system memory. For example, data cast out of an L2 cache is typically written to an L3 cache via a private bus between the L2 and L3 caches rather than writing the data all the way to system memory. Although latency for a particular operation is minimized in this fashion, such evictions have the effect of keeping the modified data within a localized portion of the storage hierarchy not generally accessible to other devices in a multiprocessor system.</p><p>In systems where data is evicted from an L2 cache to an L3 cache via a private bus connecting the two caches, error correction code (ECC) checking is required on the L3 directory and cache to insure that data integrity is preserved. This increases the number of bits required for the bus connecting the two caches. For example, if a 64 bit data bus is employed for transferring data between an L2 and L3 cache, an additional 8 bits may be required for ECC checking, resulting in a 72 bit bus. This larger bus consumes additional area within the silicon and may need to be operated at a lower frequency than the 64 bit bus.</p><p>It would be desirable, therefore, to be capable of evicting data from one cache level to a lower level cache without the requirement of a private bus between the two caches, or for ECC checking of data transfers between the two caches. It would further be advantageous to provide a mechanism for such data evictions which allowed the evictions to be visible to the snoop logic of other devices in a multiprocessor system.</p><h4>SUMMARY OF THE INVENTION</h4><p>It is therefore one object of the present invention to an improved method and apparatus for eviction of data from caches in a data processing system.</p><p>It is another object of the present invention to an improved method and apparatus for eviction of data from a cache in data processing system having a multilevel cache hierarchy.</p><p>It is yet another object of the present invention to an improved method and apparatus for eviction of data from one cache to a logically in line cache within a data processing system having a multilevel cache hierarchy.</p><p>The foregoing objects are achieved as is now described. In evicting data from a first cache in a level other than the lowest in a multilevel cache hierarchy, data is written to the system bus and snooped back into a second cache on a lower level in the cache hierarchy. The need for a private data path between the two caches is thus eliminated, and the second cache memory need not be dual-ported. The reload path employed for updating the second cache is reused to snoop cast-outs off the system bus. As a result of the first cache evicting data via the system bus, the second cache never contains data which is modified (M) with respect to system memory and other devices in a multiprocessor system get updated earlier. The need for error correction code (ECC) checking is eliminated, together with the associated additional bits, and may be replaced by simple parity checking. The bus into the second cache thus requires fewer bits, consumes less area, and may be operated at a higher frequency. When employed in conjunction with an H-MESI cache coherency protocol, horizontal devices go from the hovering (H) state to the shared (S) state faster.</p><p>The above as well as additional objects, features, and advantages of the present invention will become apparent in the following detailed written description.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4><p>The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself however, as well as a preferred mode of use, further objects and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:</p><p>FIG. 1 depicts a multiprocessor data processing system in accordance with a preferred embodiment of the present invention;</p><p>FIG. 2 is a logical block diagram of a cache entry eviction mechanism in accordance with a preferred embodiment of the present invention; and</p><p>FIG. 3 depicts a high level flowchart for a process of casting out data from a cache within an upper level of a multilevel cache hierarchy in accordance with a preferred embodiment of the present invention.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</h4><p>With reference now to the figures, and in particular with reference to FIG. 1, a multiprocessor data processing system in accordance with a preferred embodiment of the present invention is depicted. Data processing system <b>100</b> is a symmetric multiprocessor (SMP) system including a plurality of processors <b>102</b> and <b>104</b>, which preferably comprise one of the PowerPC\u2122 family of processors available from International Business Machines of Armonk, N.Y. Although only two processors are depicted in the exemplary embodiment, those skilled in the art will appreciate that additional processors may be utilized in a multiprocessor data processing system in accordance with the present invention.</p><p>Each processor <b>102</b> and <b>104</b> includes a level one (L1) data cache <b>106</b> and <b>108</b>, respectively, and an L1 instruction cache <b>110</b> and <b>112</b>, respectively. Although illustrated as bifurcated instruction and data caches in the exemplary embodiment, those skilled in the art will recognize that a single, unified L1 cache may be implemented. In order to minimize data access latency, one or more additional levels of cache memory may be implemented within data processing system <b>100</b>, such as level two (L2) caches <b>114</b> and <b>116</b> and level three (L3) caches <b>118</b> and <b>119</b>. The lower cache levels\u2014L2 and L3\u2014are employed to stage data to the L1 caches and typically have progressively larger storage capacities but longer access latencies. For example, data caches <b>106</b> and <b>108</b> and instruction caches <b>110</b> and <b>112</b> may each have a storage capacity of 32KB and an access latency of approximately 1-2 processor cycles. L2 caches <b>114</b> and <b>116</b> might have a storage capacity of 512KB but an access latency of 5 processor cycles, while L3 caches <b>118</b> and <b>119</b> may have a storage capacity of 4MB but an access latency of greater than 15 processor cycles. L2 caches <b>114</b> and <b>116</b> and L3 caches <b>118</b> and <b>119</b> thus serve as intermediate storage between processors <b>102</b> and <b>104</b> and system memory <b>120</b>, which typically has a much larger storage capacity but may have an access latency of greater than 50 processor cycles.</p><p>Both the number of levels in the cache hierarchy and the cache hierarchy configuration employed in data processing system <b>100</b> may vary. L2 caches <b>114</b> and <b>116</b> in the example shown are dedicated caches connected between their respective processors <b>102</b> and <b>104</b> and system memory <b>120</b> (via system bus <b>122</b>). L3 caches <b>118</b> and <b>119</b> are depicted as lookaside caches logically vertical with L2 caches <b>114</b> and <b>116</b>. As a result, data or instructions may be looked up one of L2 caches <b>114</b> or <b>116</b> and one of L3 caches <b>118</b> and <b>119</b> simultaneously, although the data or instructions will only be retrieved from L3 cache <b>118</b> or <b>119</b> if the respective L2 cache <b>114</b> or <b>116</b> misses while L3 cache <b>118</b> or <b>119</b> hits. Those skilled in the art will recognize that various permutations of levels and configurations depicted may be implemented.</p><p>L2 caches <b>114</b> and <b>116</b> and L3 caches <b>118</b> and <b>119</b> are connected to system memory <b>120</b> via system bus <b>122</b>. Also connected to system bus <b>122</b> may be a memory mapped device <b>124</b>, such as a graphics adapter providing a connection for a display (not shown), and input/output (I/O) bus bridge <b>126</b>. I/O bus bridge <b>126</b> couples system bus <b>122</b> to I/O bus <b>128</b>, which may provide connections for I/O devices <b>130</b> and nonvolatile memory <b>132</b>. System bus <b>122</b>, I/O bus bridge <b>126</b>, and I/O bus <b>128</b> thus form an interconnect coupling the attached devices, for which alternative implementations are known in the art. I/O devices <b>130</b> comprise conventional peripheral devices including a keyboard, a graphical pointing device such as a mouse or trackball, a display, and a printer, which are interfaced to I/O bus <b>128</b> via conventional adapters. Non-volatile memory <b>132</b> may comprise a hard disk drive and stores an operating system and other software controlling operation of system <b>100</b>, which are loaded into volatile system memory <b>120</b> in response to system <b>100</b> being powered on. Those skilled in the art will recognize that data processing system <b>100</b> may include many additional components not shown in FIG. 1, such as serial and parallel ports, connections to networks or attached devices, a memory controller regulating access to system memory <b>120</b>, etc. Such modifications and variations are within the spirit and scope of the present invention.</p><p>A typical communications transaction on system bus <b>122</b> includes a source tag indicating a source of the transaction, a destination tag specifying the intended recipient of the transaction, an address and/or data. Each device connected to system bus <b>122</b> preferably snoops all communication transactions on system bus <b>122</b>, intervening in communications transactions intended for other recipients when necessary and reproducing changes to system memory data duplicated within the device when feasible and appropriate.</p><p>Referring to FIG. 2, a logical block diagram of a cache entry eviction mechanism in accordance with a preferred embodiment of the-present invention is illustrated. The mechanism depicted for the purposes of explaining the invention is illustrated in the context of L2 caches <b>114</b> and <b>116</b>, L3 caches <b>118</b> and <b>119</b> associated respectively with L2 caches <b>114</b> and <b>116</b>, and system bus <b>122</b> of FIG. <b>1</b>. However, the present invention may be implemented in conjunction with other caches within a multilevel cache hierarchy, such as L1 data caches <b>106</b> and <b>108</b> and/or L1 instruction caches <b>110</b> and <b>112</b>. The present invention does not employ a private bus <b>200</b> between, for example, L2 cache <b>114</b> and L3 cache <b>118</b> utilized to stage data into L2 cache <b>114</b>. In the present invention, data evicted from L2 cache <b>114</b> is written to system memory <b>120</b> via the normal data path <b>202</b> to system bus <b>122</b>. The evicted data is then snooped from system bus <b>122</b> via snoop logic path <b>204</b> to L3 cache <b>118</b>. The evicted data may also be snooped from system bus <b>122</b> via snoop logic path <b>206</b> to L2 cache <b>116</b> and via snoop logic path <b>208</b> to L3 cache <b>119</b> utilized to stage data into L2 cache <b>116</b>. This mechanism for evicting data from an L2 cache may also be implemented in conjunction with a merged vertical cache controller mechanism described in the related application identified above.</p><p>By writing evicted data from L2 cache <b>114</b> to system bus <b>122</b> and snooping the data back into L3 cache <b>118</b>, the need for a private or \u201cbackdoor\u201d data path <b>200</b> between L2 cache <b>114</b> and L3 cache <b>118</b> is eliminated. L2 cache <b>114</b> only has one data path, that connecting L2 cache <b>114</b> to system bus <b>122</b>. The reload path <b>204</b> for updating L3 cache <b>118</b> is reused for snooping cast-outs from L2 cache <b>114</b>. Thus, the cache memory for L3 cache <b>118</b> need not be dual-ported. ECC checking is not required on the directory or cache for L3 cache <b>118</b>, eliminating the need for multiple ECC bits associated with the data path into L3 cache <b>118</b>. These ECC bits may be replaced with a single parity bit for all bits in the data path to L3 cache <b>118</b>, making the bus into L3 cache <b>118</b> smaller, consuming less silicon area and capable of operating at a higher frequency. A parity error in snooping the evicted data from system bus <b>122</b> may be treated as a miss, with L3 cache <b>118</b> subsequently retrieving the data from system memory <b>120</b>.</p><p>Since all cast-outs from L2 cache <b>114</b> are written to system bus <b>122</b>, the evicted data makes it to system memory <b>120</b> and to the memory controller. Evicting data via system bus <b>122</b> also allows other, horizontal bus devices, such as L2 cache <b>116</b> and associated L3 cache <b>119</b>, to get updated earlier than under prior art schemes for cache data eviction. Horizontal devices, which are connected to L2 cache <b>114</b> only via the system bus and may be situated at any level in the cache hierarchy, may snoop the evicted data from system bus <b>122</b>, becoming coherent with system memory <b>120</b> at the same time as L3 cache <b>118</b> utilized to stage data into and out of L2 cache <b>114</b>.</p><p>As a result of L2 cache <b>114</b> evicting data via system bus <b>122</b>, L3 cache <b>118</b> never contains data which is modified (M) with respect to system memory <b>120</b> under the MESI cache coherency protocol. The eviction of data from L2 cache <b>114</b> to system bus <b>122</b> to be snooped into L3 cache <b>118</b> and other horizontal devices achieves additional benefits in a system implementing the H-MESI cache coherency protocol. As described in detail in U.S. patent application Ser. No. 09/024,610, which is incorporated in its entirety herein by reference, the hovering (H) state of the H-MESI cache coherency protocol indicates that an address tag stored in the tag field of a cache entry is valid but that the associated data item (e.g. cache line or cache sector) is invalid. Since data is evicted to the system bus where it may be snooped, a cache entry which is in the H state may be updated and go to the shared (S) state faster. Thus data gets retrieved by horizontal devices based on demand and ages much less within such horizontal devices.</p><p>With reference now to FIG. 3, a high level flowchart for a process of casting out data from a cache within an upper level of a multilevel cache hierarchy in accordance with a preferred embodiment of the present invention is depicted. The process may be implemented within a data processing system including a multilevel cache hierarchy such as that depicted in FIGS. 1 and 2. The process begins at step <b>302</b>, which depicts a victim being selected according to the applicable cache replacement policy within a cache in a level of the cache hierarchy other than the lowest. The process next passes to step <b>304</b>, which illustrates writing data from the selected victim to the system bus, and then to step <b>306</b>, which depicts snooping the bus operation writing data from the selected victim at a cache in a lower level of the cache hierarchy.</p><p>The process next passes to step <b>308</b>, which illustrates a determination of whether the cache entry corresponding to the evicted data requires updating within the lower cache. If not, the process simply proceeds to step <b>316</b>, which depicts the process becoming idle until the next cache eviction. If the lower cache requires an update, however, the process proceeds instead to step <b>310</b>, which illustrates a determination of whether a parity error occurred in snooping the cache eviction from the system bus. If so, the process proceeds to step <b>312</b>, which depicts treating the snoop operation as a miss and updating the lower cache from system memory. If no parity error is detected, however, the process proceeds instead to step <b>314</b>, which illustrates updating the lower cache from the snooped bus operation, and then to step <b>316</b>, which depicts the process becoming idle until the next eviction.</p><p>Although incurring the longer latency of a system bus operation, data evicted from an L2 cache is written to the system bus and snooped back into the L3 cache. This eliminates the necessity for a private or \u201cbackdoor\u201d data bus between the L2 and L3 caches. Only a single data path from the L2 cache, that connected to the system bus, is required, and the L3 cache need not be dual-ported. The reload path employed for updating the L3 cache is reused to snoop cast-outs from the L2 cache off the system bus. ECC checking at the L3 directory and cache, and the associated overhead, is also unnecessary. Data integrity may be verified by simple parity checking, incurring a single bit of overhead, with parity errors treated as a snoop miss and the L3 cache updated from system memory.</p><p>Because data from an L2 victim is cast-out by writing it to the system bus, the L3 cache is always coherent with system memory and never contains data which is modified with respect to system memory. Other devices in a multiprocessor system get updated earlier by snooping the cast-out from the system bus. When the H-MESI cache coherency protocol is utilized, horizontal devices go from the hovering state to the shared state more quickly.</p><p>While the invention has been particularly shown and described with reference to a preferred embodiment, it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention.</p><?DETDESC description=\"Detailed Description\" end=\"tail\"?></description>"}], "inventors": [{"first_name": "Ravi Kumar", "last_name": "Arimilli", "name": ""}, {"first_name": "John Steven", "last_name": "Dodson", "name": ""}, {"first_name": "Jerry Don", "last_name": "Lewis", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "INTERNATIONAL BUSINESS MACHINES CORPORATION"}, {"first_name": "", "last_name": "INTERNATIONAL BUSINESS MACHINES CORPORATION", "name": ""}], "ipc_classes": [{"primary": true, "label": "G06F  12/08"}], "locarno_classes": [], "ipcr_classes": [{"label": "G06F  12/08        20060101A I20051008RMJP"}, {"label": "G06F  12/00        20060101AFI20061019BMCZ"}], "national_classes": [{"primary": true, "label": "711119"}, {"primary": false, "label": "711E12024"}, {"primary": false, "label": "711165"}, {"primary": false, "label": "711122"}], "ecla_classes": [{"label": "G06F  12/08B4L"}], "cpc_classes": [{"label": "G06F2212/1041"}, {"label": "G06F  12/0831"}, {"label": "G06F2212/1056"}, {"label": "G06F  12/0811"}, {"label": "G06F  12/128"}, {"label": "G06F  12/08"}], "f_term_classes": [], "legal_status": "Expired - Fee Related", "priority_date": "1998-02-17", "application_date": "1998-02-17", "family_members": [{"ucid": "KR-100320978-B1", "titles": [{"lang": "KO", "text": "\uce90\uc2dc \uac31\uc2e0 \ud504\ub85c\ud1a0\ucf5c\uc744 \uc774\uc6a9\ud55c \uce90\uc2dc \ud560\ub2f9 \ud574\uc81c \ubc29\ubc95 \ubc0f \ub370\uc774\ud130 \ucc98\ub9ac \uc2dc\uc2a4\ud15c"}, {"lang": "EN", "text": "DEALLOCATION WITH CACHE UPDATE PROTOCOL (L2 EVICTIONS)"}]}, {"ucid": "KR-19990072593-A", "titles": [{"lang": "KO", "text": "\uce90\uc2dc\uac31\uc2e0\ud504\ub85c\ud1a0\ucf5c\uc744\uc774\uc6a9\ud55c\uce90\uc2dc\ud560\ub2f9\ud574\uc81c\ubc29\ubc95\ubc0f\ub370\uc774\ud130\ucc98\ub9ac\uc2dc\uc2a4\ud15c"}, {"lang": "EN", "text": "DEALLOCATION WITH CACHE UPDATE PROTOCOL (L2 EVICTIONS)"}]}, {"ucid": "US-6195729-B1", "titles": [{"lang": "EN", "text": "Deallocation with cache update protocol (L2 evictions)"}]}, {"ucid": "PL-331475-A1", "titles": [{"lang": "EN", "text": "METHOD OF REMOVING DATA FROM A CACHE OF DATA PROCESSING SYSTEM FEATURATED BY MULTIPLE LEVEL CATHE HIERARCHY, CATHE HIERACHISING DEVICE THEREFOR AND DATA PRPCESSING SYSTEM EMPLOYING THAT METHOD"}]}, {"ucid": "JP-3434462-B2", "titles": [{"lang": "JA", "text": "\u5272\u632f\u308a\u89e3\u9664\u65b9\u6cd5\u304a\u3088\u3073\u30c7\u30fc\u30bf\u51e6\u7406\u30b7\u30b9\u30c6\u30e0"}, {"lang": "EN", "text": "Allocation release method and data processing system"}]}, {"ucid": "CZ-9900464-A3", "titles": []}, {"ucid": "JP-H11328015-A", "titles": [{"lang": "JA", "text": "\u5272\u632f\u308a\u89e3\u9664\u65b9\u6cd5\u304a\u3088\u3073\u30c7\u2015\u30bf\u51e6\u7406\u30b7\u30b9\u30c6\u30e0"}, {"lang": "EN", "text": "ALLOCATION RELEASING METHOD AND DATA PROCESSING SYSTEM"}]}, {"ucid": "CZ-46499-A3", "titles": [{"lang": "EN", "text": "DEALLOCATION WITH PROTOCOL FOR BUFFER MEMORY UPTADE (L2 CLEARANCE)"}, {"lang": "CS", "text": "Uvol\u0148ov\u00e1n\u00ed s protokolem pro aktualizaci vyrovn\u00e1vac\u00ed pam\u011bti (vyklizen\u00ed L2)"}]}]}