{"patent_number": "US-5113508-A", "publication_id": 70454422, "family_id": 26861202, "publication_date": "1992-05-12", "titles": [{"lang": "EN", "text": "Storing device"}, {"lang": "EN", "text": "Data cache initialization"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA37122326\"><p>A data processing system including a data cache with the capability to selectively zero the contents of the data cache. The invention includes a multiplexor arranged to provide a parallel data output that is greater than the parallel data input from either a central processing unit or from a memory that are each connected to access the data cache. This multiplexor is selectively controlled to provide a parallel data output of zeroes upon the decoding of a specific zeroing instruction.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"1\"><claim-text>1. A storing device connected to a central processor, said storing device comprising:<claim-text>a storing means for storing words, each in addressable locations and connected to a first bus means for parallel transfer of a single word to an addressable location and said storing means connected to a second bus means for parallel transfer of at least two words;</claim-text><claim-text>a control means connected to said storing means and said central processor for directing information from said first bus into one of the addressable locations upon receiving a first processor signal or, in response to a second processor signal, for directing said storing means to store a predetermined constant value from said second bus means in at least two addressable locations concurrently; and</claim-text><claim-text>a multiplexer means for providing information either from said first bus means or said second bus means to said storing means in response to control signals from said control means.</claim-text></claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"2\"><claim-text>2. A storing device according to claim 1 wherein said first plurality of bus lines is less than said second plurality of bus lines.</claim-text></claim>"}, {"num": 3, "parent": 4, "type": "dependent", "paragraph_markup": "<claim num=\"3\"><claim-text>3. A storing device according to claim 4 wherein said information of a predetermined constant value includes bits of identical binary values.</claim-text></claim>"}, {"num": 4, "parent": 3, "type": "dependent", "paragraph_markup": "<claim num=\"4\"><claim-text>4. A storing device according to claim 3 wherein said information of a predetermined constant value includes bits of binary zeroes.</claim-text></claim>"}, {"num": 5, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"5\"><claim-text>5. A data processing system comprising:<claim-text>instruction decoding means for decoding data processing system instructions and providing control signals in response thereto;</claim-text><claim-text>memory means for storing information in addressable locations; and</claim-text><claim-text>multiplexer means for connecting, in response to a first control signal, a first bus to said memory means and including a first plurality of bus lines providing parallel transfer of a single word to an addressable location, or, in response to a second control signal, a second bus of a second plurality of bus lines providing parallel transfer of at least two words of a predetermined constant value to at least two addressable locations of said memory means concurrently.</claim-text></claim-text></claim>"}, {"num": 6, "parent": 5, "type": "dependent", "paragraph_markup": "<claim num=\"6\"><claim-text>6. A data processing system according to claim 5 wherein said first plurality of bus lines is less than said second plurality of bus lines.</claim-text></claim>"}, {"num": 7, "parent": 6, "type": "dependent", "paragraph_markup": "<claim num=\"7\"><claim-text>7. A data processing system according to claim 6 wherein said information of a predetermined constant value includes bits of identical binary values.</claim-text></claim>"}, {"num": 8, "parent": 7, "type": "dependent", "paragraph_markup": "<claim num=\"8\"><claim-text>8. A data processing system according to claim 7 wherein said information of a predetermined constant value includes bits of binary zeroes.</claim-text></claim>"}, {"num": 9, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"9\"><claim-text>9. A data processing system comprising:<claim-text>a memory having instructions and data stored in addressable locations each containing a first plurality of bits;</claim-text><claim-text>a memory bus including a first plurality of bus lines connected to said memory;</claim-text><claim-text>a central processing unit (CPU) for executing instructions and providing CPU signals;</claim-text><claim-text>a central processing unit bus including a second plurality of bus lines connected to said central processing unit;</claim-text><claim-text>a data cache having a third plurality of addressable locations connected to said memory bus and said CPU bus; and</claim-text><claim-text>control means for selectively providing data information from either said memory bus or said CPU bus to addressed locations in said data cache in response to a first CPU signal, said control means including means for providing, in response to a second CPU signal, of a predetermined constant value through said memory bus lines to said data cache to at least two addressable locations concurrently.</claim-text></claim-text></claim>"}, {"num": 10, "parent": 9, "type": "dependent", "paragraph_markup": "<claim num=\"10\"><claim-text>10. A data processing system according to claim 9 wherein said information of a predetermined constant value includes bits of identical binary values.</claim-text></claim>"}, {"num": 11, "parent": 10, "type": "dependent", "paragraph_markup": "<claim num=\"11\"><claim-text>11. A data processing system according to claim 10 wherein said information of a predetermined constant value includes bits of binary zeroes.</claim-text></claim>"}, {"num": 12, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"12\"><claim-text>12. A data processing system comprising:<claim-text>processor means for executing instructions and providing control signals in response thereto;</claim-text><claim-text>means, connected to said processor means, for providing data on a first bus;</claim-text><claim-text>said first bus connected to said processor means and having a first plurality of bus lines;</claim-text><claim-text>a memory means for storing data in addressable locations;</claim-text><claim-text>means, connected to said memory means, for providing data to a second bus;</claim-text><claim-text>said second bus connected to said memory means and having a second plurality of bus lines;</claim-text><claim-text>a third bus connected to a means for providing data having a constant value and having a third plurality of bus lines;</claim-text><claim-text>a first multiplexer means for concurrently providing either a second plurality of bits from said second bus or a third plurality of bits from said third bus to a buffer in response to said processor means control signals; and</claim-text><claim-text>a second multiplexer means for concurrently providing either information from said first bus or said buffer to a data cache in response to said processor means control signal.</claim-text></claim-text></claim>"}, {"num": 13, "parent": 12, "type": "dependent", "paragraph_markup": "<claim num=\"13\"><claim-text>13. A data processing system according to claim 12 wherein said third plurality of bus lines containing information of a predetermined constant value includes a greater number of bus lines than either said first or said second bus lines.</claim-text></claim>"}, {"num": 14, "parent": 13, "type": "dependent", "paragraph_markup": "<claim num=\"14\"><claim-text>14. A data processing system according to claim 13 wherein said information of a predetermined constant value includes bits of identical binary values.</claim-text></claim>"}, {"num": 15, "parent": 14, "type": "dependent", "paragraph_markup": "<claim num=\"15\"><claim-text>15. A data processing system according to claim 14 wherein said information of a predetermined constant value includes bits of binary zeroes.</claim-text></claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES66189940\"><?RELAPP description=\"Other Patent Relations\" end=\"lead\"?><p>This is a continuation of application Ser. No. 07/165,219 filed Mar. 8, 1988 now abandoned.</p><?RELAPP description=\"Other Patent Relations\" end=\"tail\"?><?BRFSUM description=\"Brief Summary\" end=\"lead\"?><h4>DESCRIPTION</h4><p>1. Technical Field</p><p>This invention relates to data processing systems and more specifically to initializing an information storage device for data processing systems.</p><p>2. Background Art</p><p>A data processing system includes a central processing unit and a memory. The memory contains instructions to direct the central processing unit to perform computations upon data. This data is stored in the memory. Data in memory can also be temporarily stored in a storage device termed a cache.</p><p>In systems where several processors are using the same cache or where several programs within a single CPU are using the same cache, it becomes necessary to insure that the data placed in a memory and/or a cache by one processor or program is not used unintentionally by another processor or program. Therefore, it is common to initialize a memory and/or a cache by loading zeroes into the memory and/or the cache before a processor or program begins to use the memory and/or the cache for storage.</p><p>It is an object of the present invention to provide an apparatus for quickly initializing the contents of a data cache.</p><h4>SUMMARY OF THE INVENTION</h4><p>In accordance with the present invention, a data processing system is provided that includes an instruction decoding circuit for decoding data processing system instructions and providing control signals in response to the decoding of these instructions. This system further includes a memory for storing information. The memory is connected to a multiplexor that provides information from either a bus or information of a predetermined value to the memory in response to control signals from the instruction decoding circuit.</p><p>In the preferred embodiment, a single instruction is provided that is decoded by the instruction decoding circuitry to provide a control signal to the multiplexor to load the information of a predetermined value (zeroes) to the memory.</p><p>In another embodiment, a data processing system is provided that includes a memory, a memory bus having a first plurality of memory bus lines connected to the memory, a central processing unit, a central processing unit bus including a second plurality of CPU bus lines connected to the central processing unit, a data cache connected to the memory bus lines and to the CPU bus lines, and a control circuit that selectively provides information from either the memory bus lines or the CPU bus lines to the data cache. The control circuit further includes means for providing information of a predetermined value through the memory bus lines to the data cache. In this preferred embodiment, this additional means is a multiplexor. The multiplexor is connected to the memory bus to either provide the information from the memory bus or the predetermined value to the data cache.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWING</h4><p>The novel features believed characteristic of the invention set forth in the appended claims. The invention itself, however, as well as the other features and advantages thereof, will be best understood by reference to the detailed description which follows, read in conjunction with the accompanying drawings, wherein:</p><p>FIG. 1 is a block diagram of the data processing system;</p><p>FIG. 2 is a flow chart illustrating the normal reloading of the data cache; and</p><p>FIG. 3 is a flow chart illustrating the zeroing of a data cache line.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>BEST MODE FOR CARRYING OUT THE INVENTION</h4><p>This invention relates to a mechanism for initializing a series of memory locations and more specifically for quickly initializing portions of a data cache memory. The data cache memory, in this invention, is used for temporary storage of data that is being transferred from a system memory 8 to a central processing unit 6 or from the central processing unit 6 to the memory 8.</p><p>FIG. 1 is a block diagram of a data processing system including a data cache array 30. In FIG. 1, the CPU 6 is connected by a bus 10 through a multiplexor 24 to the data cache array 30. System memory 8 is connected by a bus 12 through multiplexor 14 to a second bus 15 to a data cache reload buffer 20.</p><p>The Cache Reload Buffer 20 is connected by bus 22 to the Multiplexer 24 to the data cache array 30. In operation, the bus 10 from the CPU 6 provides 8 bytes in parallel. This 8 byte bus 10 is replicated 8 times to create 64 byte input 23 to Multiplexer 24. In otherwords, if a hexadecimal value of \"A5\" was place on the bus 10, input 23 would have the value \"A5A5A5A5A5A5A5A5\". Bus 12 from system memory 8 provides 16 bytes in parallel to Multiplexer 14. Multiplexer 14 further includes input 11 which has as its value zero by providing a logic value of zero by tying each of the bit lines to a ground or to a positive voltage, depending upon whether positive or negative logic is being employed. The output of Multiplexer 14 is replicated 4 times to create the 64 byte parallel bus 15. Additionally, multiplexer 14 with input 11 provides 64 bytes of zeroes in parallel on bus 15. The 64 byte bus 15 provides either the 16 byte bus 12 replicated 4 times to each of the four sections of Cache Reload Buffer 20 or 64 bytes of zero.</p><p>Bus 15 presents the data to all four sections of Cache Reload Buffer 20. When input 11 to Multiplexer 14 is selected, bus 15 will contain 64 parallel bytes of zeroes. The Cache Reload Buffer 20 contains four storage sections 20A, 20B, 20C and 20D a total of 64 bytes in width. The output of the cache reload buffer 20 onto bus 22 is 64 bytes in parallel. The cache reload buffer 20 serves to temporarily store data from system memory 8 or zeroed data before it is loaded into the data cache array 30. The four parts 20A, 20B, 20C and 20D of cache reload buffer 20 can be individually or simultaneously written. The operation of both Multiplexer 14 and the cache reload buffer 20 is controlled by the control logic 16 via lines 18. Lines 18 provide control to the Multiplexer 14 to determine the information source, i.e., bus 12 or zeroes on input 11. Additionally, the information on control lines 18 specify which of the four sections 20A, 20B, 20C and 20D of Cache Reload Buffer 20 the 16 bytes from bus 12 are to be stored.</p><p>During one type of operation, unique data received from system memory during four consecutive system cycles is stored in the four different sections 20A, 20B, 20C and 20D of Cache Reload Buffer 20, filling Cache Reload Buffer 20. During a second type of operation, control logic 16 can also select all four sections of Cache Reload Buffer 20 to receive the data from bus 15. This occurs only when Multiplexer 14 input 11 is selected. When this is done, all four sections 20A, 20B, 20C and 20D of Cache Reload Buffer 20 receive the value of zero simultaneously.</p><p>Bus 10 from CPU 6 is replicated 8 times to create a 64 byte input 23 to Multiplexer 24. Multiplexer 24 receives 64 bytes at input 23 (bus 10's data repeated) and 64 bytes on bus 22. Control logic 16 controls Multiplexer 24 via lines 26. During the operation of interest, the bus 22 input of Multiplexer 24 is selected by lines 26, thus presenting the 64 byte output of cache reload buffer 20 to the data cache array 30.</p><p>The data cache array 30 includes 256 lines (physical rows) of 64 bytes in parallel. Within each line, each byte of the 64 bytes is individually addressable through control lines 28 from control logic 16. Additionally, the control lines 28 provide for the data cache 30 to output on bus 32, 64 bytes in parallel.</p><p>Control logic 16 operates in response to the decoding of instructions in the CPU 6. As an instruction is decoded in CPU 6, signals are provided on line 34 to the control logic 16 to properly operate data cache 30 and associated hardware. The control logic 16 regulates loading the data cache 30 from either the CPU 6 or the system memory 8 or zeroing a line in the data cache.</p><p>Referring to FIG. 2, the instructions which affect data cache operation are ones which require CPU 6 to read or write data from or to the data cache array 30, i.e., LOAD or STORE instructions. Referring to FIG. 2, step 50, a LOAD or STORE instruction is first decoded in the CPU. In FIG. 2, step 52, the CPU 6 verifies whether the data to be read or written is in the data cache array 30. This verification is done by comparing the address associated with the data reference in the instruction with a directory of the existing contents of the data cache array 30. If it does not already reside in data cache array 30, it must be fetched from system memory 8 in step 54, in a process called a Data Cache Reload. This consists of loading data from system memory 8 over bus 12 thru Multiplexer 14 and bus 15 to Cache Reload Buffer 20. During four consecutive system cycles data is stored in the four different sections of 20A, 20B, 20C and 20D and Cache Reload Buffer 20, filling Cache Reload Buffer 20. Once Cache Reload Buffer 20 is filled, the contents of Cache Reload Buffer 20 is then presented on bus 22 and the output of Multiplexer 24.</p><p>Control logic 16 signals via lines 28 the data cache array 30 to receive and store the data from Cache Reload Buffer 20. The process then proceeds to step 60.</p><p>Returning to step 52, if the data does reside in the data cache, then the process proceeds directly to step 60. In step 60, the information is fetched from the data cache array 30 and provided to CPU 6 in the case of a LOAD, or stored into the data cache array 30 from the CPU 6 in the case of a STORE instruction.</p><p>FIG. 3 illustrates a flow chart detailing the operation of the control circuitry in FIG. 1 for a line zero operation. In FIG. 3 step 80, the instruction that zeroes the line in the data cache array 30 is decoded in CPU 6. The data address indicated by instruction will be zeroed in the data cache array 30. This information is provided to the control logic 16 via lines 34. In step 82, the zeroes from line 11 (FIG. 1) are loaded thru Multiplexer 14 onto bus 15 into the Cache Reload Buffer 20. In step 84, the contents of the Cache Reload Buffer 20 are then loaded thru bus 22 and Multiplexer 24 into the line specified in the data cache array 30. In step 86, a flag is set in the directory which resides in CPU 6. This flag indicates that the data to be accessed by the given data reference address is now in the data cache array 30. In this manner, large portions of the cache can be initialized.</p><p>While the invention has been described in reference to the illustrated embodiment, this description is not intended to be construed in a limiting sense. Various modification of the illustrated embodiment as well as other embodiments of the invention will become apparent to those persons skilled in the art upon reference to this description. It is, therefore, contemplated that these appended claims will cover any such modifications or embodiments as fall within the true scope of the invention.</p><?DETDESC description=\"Detailed Description\" end=\"tail\"?></description>"}], "inventors": [{"first_name": "Randall D.", "last_name": "Groves", "name": ""}, {"first_name": "David P.", "last_name": "Tuttle", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "INTERNATIONAL BUSINESS MACHINES CORPORATION"}], "ipc_classes": [{"primary": true, "label": "G06F  13/00"}, {"primary": false, "label": "G06F  12/00"}], "locarno_classes": [], "ipcr_classes": [{"label": "G06F  12/08        20060101A I20051008RMEP"}], "national_classes": [{"primary": true, "label": "711126"}, {"primary": false, "label": "36523002"}, {"primary": false, "label": "711E12022"}], "ecla_classes": [{"label": "G06F  12/08B20"}], "cpc_classes": [{"label": "G06F  12/0891"}, {"label": "G06F  12/0891"}], "f_term_classes": [], "legal_status": "Expired - Fee Related", "priority_date": "1988-03-08", "application_date": "1991-03-29", "family_members": [{"ucid": "US-5113508-A", "titles": [{"lang": "EN", "text": "Storing device"}, {"lang": "EN", "text": "Data cache initialization"}]}]}