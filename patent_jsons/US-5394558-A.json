{"patent_number": "US-5394558-A", "publication_id": 71017221, "family_id": 12378710, "publication_date": "1995-02-28", "titles": [{"lang": "EN", "text": "Data processor having an execution unit controlled by an instruction decoder and a microprogram ROM"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA37405052\"><p>A data processor in which, when two primitive instructions are decoded by instruction decoders, a microprogram ROM is not used under the control of a selector, and the two primitive instructions are executed in parallel by instruction execution units in accordance with the decoded outputs of the instruction decoders. When a high performance instruction is decoded by one of the instruction decoders, at a first step processing, one of the instruction execution units selects the output of the one instruction decoder to execute the instruction. At a second step processing, the one instruction execution unit selects a microinstruction of the microprogram ROM and executes the instruction. It is therefore unnecessary to use the microprogram ROM for the execution of a primitive instruction and a high performance instruction at the first step processing, thereby reducing the capacity, area and power consumption of the microprogram ROM.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"1\"><claim-text>1. A data processor comprising:<claim-text>an instruction fetch unit;</claim-text><claim-text>first and second instruction decoders each for decoding an instruction supplied from said instruction fetch unit;</claim-text><claim-text>a microprogram ROM for storing a microinstruction;</claim-text><claim-text>a signal selector to which an output of said first instruction decoder, an output of said second instruction decoder, and an output of said microprogram ROM are input;</claim-text><claim-text>a first instruction execution unit controlled by a first output of said signal selector; and</claim-text><claim-text>a second instruction execution unit controlled by a second output of said signal selector,</claim-text><claim-text>wherein a primitive instruction is executed by using both of said first and second instruction execution units one time, and when two primitive instructions are decoded by said first and second instruction decoders in parallel, said signal selector selects and outputs said outputs of said first and second instruction decoders to said first and second outputs, respectively, and said first and second instruction execution units execute said two primitive instructions in accordance with said outputs of said first and second instruction decoders transferred to said first and second outputs of said signal selector, and</claim-text><claim-text>wherein a high performance instruction is executed by using said first instruction execution unit at least two times, and when said high performance instruction is decoded by said first instruction decoder, at a first step processing of said high performance instruction, said signal selector selects and outputs said output of said first instruction decoder to said first output and invalidates the output of said second instruction decoder and said first instruction execution unit executes said first step processing in accordance with said output of said first instruction decoder transferred to said first output of said signal selector, and</claim-text><claim-text>at a second step processing of said high performance instruction, said signal selector selects and outputs a microinstruction of said output of said microprogram ROM to said first output and said first instruction execution unit executes said second step processing in accordance with said microinstruction of said microprogram ROM transferred to said first output of said signal selector.</claim-text></claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"2\"><claim-text>2. The data processor according to claim 1, wherein at said second step processing, simultaneously with executing a final step processing of said microinstruction of said microprogram ROM by said first instruction execution unit, said second instruction execution unit performs an instruction execution in accordance with the output of said second instruction decoder.</claim-text></claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES66648451\"><?RELAPP description=\"Other Patent Relations\" end=\"lead\"?><p>This application is a continuation application of Ser. No. 08/017,498, filed Feb. 12, 1993, now abandoned.</p><?RELAPP description=\"Other Patent Relations\" end=\"tail\"?><?BRFSUM description=\"Brief Summary\" end=\"lead\"?><h4>BACKGROUND OF THE INVENTION</h4><p>1. Field of the Invention</p><p>The present invention relates to a data processor such as a microprocessor, and more particularly a system for a data processor processing an instruction set containing a primitive instruction and a high performance instruction, capable of parallel execution of a plurality of primitive instructions and execution of both primitive instructions and high performance instructions at high speed, A primitive instruction is an instruction which can be processed using an instruction execution unit one time, and a high performance instruction is an instruction which requires use of an instruction execution unit two or more times.</p><p>2. Description of the Related Art</p><p>Examples of conventional microprocessors capable of processing an instruction set containing both primitive instructions and high performance instructions, are such as 80486 described in \"BYTE, November 1989, VOL.14/No.12, pp. 323-329\" and i960CA described in \"NIKKEI ELECTRONICS, 1990.1.8 (No. 440), pp. 177-186.</p><p>As shown in FIG. 7, 80486 microprocessor is constructed of an instruction fetch unit 10, instruction decoder 20, microprogram ROM 30, address calculation unit 120, and instruction execution unit 50. In operation, an instruction code 60 contained in an instruction to be decoded is sent from the instruction fetch unit 10 to the instruction decoder 20. A subsequent instruction code position indication signal 70 for indicating the position of the next instruction code to be decoded is sent from the instruction decoder 20 to the instruction fetch unit 10. A ROM address 100 which is part of the decoded result of the instruction is sent from the instruction decoder 20 to the microprogram ROM 30. An instruction execution unit control signal 130 is sent from the microprogram ROM 30 to the instruction execution unit 50. An address calculation unit control signal 130 which is another part of the decoded result of the instruction is sent from the instruction decoder 20 to the address calculation unit 120, and a memory access address 140 is sent from the address calculation unit 120 to the instruction execution unit 50.</p><p>As shown in FIG. 4, 80486 microprocessor has five pipeline stages including a prefetch stage PF, first decode stage D1, second decode stage D2, execution stage EX, and write-back stage WB.</p><p>At the prefetch stage PF, the instruction fetch unit 10 fetches an instruction from a main memory or cache (not shown), and stores it in a prefetch queue of the instruction fetch unit 10. The instruction fetch unit 10 also supplies the next instruction code 60 to be decoded to the instruction decoder 20 in accordance with the subsequent instruction code position indication signal 70 from the instruction decoder 20.</p><p>At the first decode stage D1, the instruction code 60 supplied from the instruction fetch unit 10 to the instruction decoder 20 is decoded to generate the ROM address 100 and address calculation unit control signal 130 as the instruction-decoded results.</p><p>At the second decode stage D2, the instruction execution unit control signal 110 is read from the microprogram ROM 30 at the ROM address 100 supplied from the instruction decoder 20, and the address calculation unit 120 calculates the memory access address 140 in accordance with the address calculation unit control signal 130.</p><p>At the execution stage EX, an arithmetic logic unit (ALU) (not shown) of the instruction execution unit 50 performs an arithmetic logic operation in accordance with the instruction execution unit control signal 110, or a memory access circuit of the instruction execution unit 50 accesses the memory at the memory access address 140. The instruction execution unit 50 performs other operations. This memory access is immediately executed using the memory access address 140 supplied from the address calculation unit 120.</p><p>At the write-back stage WB, the operation result or memory fetch data at the execution stage EX is stored in a register file (not shown).</p><p>As seen from the above description, in 80486 microprocessor, control signals are always obtained as outputs from the microprogram ROM 30, except a control signal for address calculation.</p><p>In i960CA, only high performance instructions are executed in response to a control signal output from a microprogram ROM. Namely, a high performance instruction is divided into primitive instructions and stored in the microprogram ROM. Therefore, a high performance instruction is executed in response not to an instruction code but to an output from the microprogram ROM. Specifically, as shown in FIG. 8, i960CA microprocessor is constructed of an instruction fetch unit 10, instruction decoder 20, microprogram ROM 30, instruction decoder input selector 150, and instruction execution unit 50. An instruction code 60 is sent from the instruction fetch unit 10 to the instruction decoder input selector 150. A ROM output 90 is sent from the microprogram ROM 30 to the instruction decoder input selector 150. An instruction decoder input 160 is sent from the instruction decoder input selector 150 to the instruction decoder 20. A subsequent instruction code position indication signal 70 is sent from the instruction decoder 20 to the instruction fetch unit 10. A ROM address 100 is sent from the instruction decoder 20 to the microprogram ROM 30. An instruction decoder input select signal 170 is sent from the instruction decoder 20 to the instruction decoder input selector 150. An instruction execution unit control signal 110 is sent from the instruction decoder 20 to the instruction execution unit 50.</p><p>As shown in FIG. 5, microprocessor i960CA has three pipeline stages including a prefetch stage PF, decode stage ID, and execution stage EX.</p><p>At the prefetch stage PF, while executing a primitive instruction, the instruction fetch unit 10 fetches the instruction code 60 and stores it in a prefetch queue, and the instruction code 60 is supplied via the instruction decoder input selector 150 to the instruction decoder 20 in accordance with the subsequent instruction code position indication signal 70 from the instruction decoder 20. On the other hand, while executing a high performance instruction, the ROM output 90 is read from the microprogram ROM 30 and supplied via the instruction decoder input selector 150 to the instruction decoder 20.</p><p>At the decode stage ID, the instruction decoder 20 decodes the instruction code 60 from the instruction fetch unit 10 or the ROM output 90 from the microprogram ROM 30, to generate an instruction execution unit control signal 110, and if the decoded instruction is a high performance instruction, it generates a ROM address 100 and changes an instruction decoder input select signal 170 to the ROM output select side.</p><p>At the execution stage EX, the instruction execution unit 50 performs an arithmetic logic operation, memory access, or other operations.</p><p>As described above, in 80484 microprocessor, control signals other than for address calculation are obtained as ROM outputs for all instructions. With such a microprocessor, all instructions require microprograms, resulting in an increase of ROM capacity, and a corresponding increase of ROM area and power consumption, posing a problem of a slow operation speed.</p><p>Furthermore, since the microprogram ROM is continuously enabled, the power consumption by ROM occupies a larger portion of the total power consumption of the microprocessor. The higher the integration degree and operation frequency of a microprocessor, the more the power is consumed by the microprocessor. It is therefore necessary to suppress an increase in power consumption, and accordingly to suppress the power consumption by ROM.</p><p>Still further, in the case of the parallel execution of a plurality of instructions, e.g., two instructions, the structure of microprocessors becomes as shown in FIG. 2. With the arrangement shown in FIG. 2, each of the two instructions requires not only its own instruction decoder but also its own ROM. Two ROMs are therefore necessary for the parallel execution of two instructions. Another problem is that executing two high performance instructions using two instruction execution units requires control using two independent ROMs.</p><p>Namely, in FIG. 2, first and second ROM addresses 101 and 102, first and second address calculation unit control signals 131 and 132, and first and second memory access signals 141 and 142 are duplicated.</p><p>As also described above, i960CA microprocessor executes a primitive instruction without using ROM, and executes a high performance instruction by using ROM. As shown in FIG. 9, an overhead of reading ROM appears at the execution start of a high performance instruction, causing one cycle vacancy of the pipeline. For example, considering a high performance instruction requiring two or three cycles to complete its execution, the performance degradation by this vacancy of the pipeline cannot be neglected.</p><p>Furthermore, in the case of the parallel execution of a plurality of instructions, if for example a high performance instruction and the subsequent instruction are supplied to decoders at the same time, a prefetch stage for the instruction subsequent to the high performance instruction is required to be newly executed. It is therefore necessary for the instruction decoder to change the subsequent instruction code position indication signal to be output to the instruction fetch unit, depending upon whether the decoded instruction is a high performance instruction or a primitive instruction. With such a system, a processor requiring a full instruction code for the discrimination between the high performance instruction and primitive instruction takes time for generating the subsequent instruction code position indication signal. As a result, the cycle time for supplying an instruction code to the instruction decoder becomes long, resulting in a performance degradation.</p><h4>SUMMARY OF THE INVENTION</h4><p>It is therefore an object of the present invention to provide a data processor capable of efficiently executing both a primitive instruction using an instruction execution unit one time and a high performance instruction required to use the instruction execution unit two or more times, and also capable of reducing the capacity of a microprogram ROM.</p><p>In order to achieve the above object, a data processor typical to the present invention generates an instruction execution unit control signal by selecting either an output of the instruction decoder or an output of a microprogram ROM. Specifically, an instruction execution unit control signal can be generated by selecting an output of the instruction decoder in one case, and in another case, part of or all instruction execution unit control signals can be generated by selecting an output of the microprogram ROM and the remaining control signals can be generated by selecting an output of the instruction decoder.</p><p>A data processor capable of parallel execution of a plurality of instructions has a corresponding plurality of instruction decoders and instruction execution units. A single microprogram ROM outputs a signal for controlling a plurality of instruction execution units. Instruction execution unit control signals are generated by selecting outputs of the plurality of instruction decoders and one microprogram ROM. Namely, instruction execution unit control signals can be generated from outputs of the instruction decoders in one case, and in another case, part of or all instruction execution unit control signals are generated from an output of the microprogram ROM and the remaining control signals are generated from outputs of the instruction decoders.</p><p>A primitive instruction executable by using the instruction execution unit one time is executed by controlling the instruction execution unit in response to the instruction execution unit control signal generated only from the instruction decoder output. A high performance instruction required to be executed by using the instruction execution unit two or more times, is executed by controlling the instruction execution unit in response to the instruction execution unit control signal generated only from the instruction decoder output at the first step processing, and at the second and subsequent processing by controlling the instruction execution unit in response to part of or all control signals generated from a microprogram ROM output and in response to the remaining control signals generated from the instruction decoder output. Accordingly, it is not necessary to use ROM for the execution of a primitive instruction, reducing the capacity of ROM by the amount corresponding to the number of primitive instructions, and correspondingly reducing the area and power consumption of ROM and thus improving the operation speed. In addition, since ROM is not enabled when executing a primitive instruction which has a high appearing probability in a program, the average power consumption of the processor can be reduced.</p><p>Furthermore, it is possible to achieve parallel execution of a plurality of primitive instructions by using a single ROM, and to allow high speed execution for the second and subsequent step processing of a high performance instruction by using all of the instruction execution unit.</p><p>The other objects and advantages of the present invention will become apparent from the following detailed description of the embodiments when read in connection with the accompanying drawings.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4><p>FIG. 1 is a block diagram showing the structure of a microprocessor capable of parallel executing two instructions according to a particular embodiment of the present invention.</p><p>FIG. 2 is a block diagram showing the conventional structure of a microprocessor capable of parallel execution of two instructions.</p><p>FIG. 3 is a diagram illustrating the pipeline operation of a microprocessor according to an embodiment of the present invention.</p><p>FIG. 4 is a diagram illustrating the pipeline operation of the conventional microprocessor shown in FIG. 2</p><p>FIG. 5 is a diagram illustrating the pipeline operation of the conventional microprocessor shown in FIG. 8.</p><p>FIG. 6 is a block diagram showing the structure of a microprocessor according to a fundamental embodiment of the present invention.</p><p>FIG. 7 is a block diagram showing the structure of another conventional microprocessor.</p><p>FIG. 8 is a block diagram showing the structure of yet another conventional microprocessor.</p><p>FIG. 9 is a diagram illustrating the pipeline operation when executing a high performance instruction using the conventional microprocessor shown in FIG. 8.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>DESCRIPTION OF THE PREFERRED EMBODIMENTS</h4><p>Embodiments of the present invention will be described in detail with reference to the accompanying drawings.</p><p>Structure of Microprocessor of Fundamental Embodiment</p><p>FIG. 6 shows the structure of a microprocessor according to a fundamental embodiment of the present invention. The microprocessor is constructed of an instruction fetch unit 10, instruction decoder 20, microprogram ROM 30, control signal selector 40, and instruction execution unit 50.</p><p>Fundamental Operation</p><p>The instruction fetch unit 10 fetches an instruction from a main memory or cache memory (not shown), and an instruction code 60 is sent from the instruction fetch unit 10 to the instruction decoder 20. The instruction fetch unit 10 supplies the next instruction code 60 to be decoded to the instruction decoder 20 in accordance with a subsequent instruction code position indication signal 70 from the instruction decoder 20. An instruction decoder output 80 which is the decoded result of the instruction decoder 20, is sent to the control signal selector 40, and a microprogram ROM output 90 from the microprogram ROM 30 is sent to the control signal selector 40. A ROM address 100 from the control signal selector 40 is sent to the microprogram ROM 30, and an instruction execution unit control signal 110 from the control signal selector 40 is sent to the instruction execution unit 50.</p><p>Pipeline</p><p>As shown in FIG. 3, the microprocessor of this embodiment shown in FIG. 6 has five pipeline stages including an instruction fetch stage I, instruction decode stage D, execution stage E, memory access stage A, and register store stage S.</p><p>At the instruction stage I, the instruction fetch unit 10 operates. At the instruction decode stage D, the instruction decoder 20, microprogram ROM 30, and control signal selector 40 can generate the instruction execution unit control signal 110. At each of the execution stage E, memory access stage A, and register store stage S, the instruction execution unit 50 executes an operation, a memory access or register store. A primitive instruction executable by using the instruction execution unit 50 one time is executed by operating each stage of the five pipeline stages one time. On the other hand, a high performance instruction, executed by using the instruction execution unit 50 two or more times, executes each stage two or more times.</p><p>The detailed description of a pipeline operation when executing a primitive instruction will be given first.</p><p>At the instruction fetch stage I, the instruction fetch unit 10 fetches an instruction from a main memory or cache memory and stores it in the internal prefetch queue. At the same time, the instruction fetch unit 10 supplies the instruction code to be next decoded to the instruction decoder 20 in accordance with the subsequent instruction code position indication signal 70. In this manner, the instruction fetch unit 10 fetches the instruction code and holds it in its prefetch queue, in parallel with supplying the instruction code 60 to the instruction decoder 20 in accordance with the subsequent instruction code position indication signal 70. In the first half of the instruction decode stage for the previous instruction executed by the instruction decoder 20 at the same time as execution of the instruction fetch stage, the subsequent instruction code position indication signal 70 is generated and supplied to the instruction fetch unit 10. Therefore, selecting the instruction code 60 from the prefetch queue is performed in the second half of the instruction fetch stage I.</p><p>At the instruction decode stage D, the instruction decoder 20 decodes the instruction code 60 in the first half of this stage to judge the instruction length and generate the subsequent instruction code position indication signal 70. The instruction decoder 20 generates an instruction decoder output 80 and supplies it to the control signal selector 40. The control signal selector 40 selects the instruction decoder output 80 as a ROM address 100 and instruction execution unit control signal 110, and supplies them to the microprogram ROM 30 and instruction execution unit 50, respectively. However, in the case of executing a primitive instruction, the ROM address 100 supplied to the microprogram ROM 30 does not activate the microprogram ROM 30, and so a microprogram ROM output 90 will not be generated.</p><p>At the execution stage E, in accordance with the instruction execution unit control signal 110 which is the instruction decoder output 80, the instruction execution unit 90 performs an address calculation, arithmetic logic operation, branch condition discrimination, or the like. Of the instruction execution unit control signal 110, the control information of the memory access and register store is held by the instruction execution unit 50 during one cycle.</p><p>At the memory access stage A, in accordance with the memory access control information held during the execution stage E, the instruction execution unit 50 performs a data fetch, data store, or data holding. An address for the data fetch or data store is calculated at the execution stage E. The data holding means obtained at the execution stage is held for the next register store stage S, for executing an instruction not required to access the memory, such as a register-to-register operation instruction. The register store control information held during the execution stage E is held for another one cycle.</p><p>At the register store stage S, in accordance with the register store control information held during the memory access stage A, the instruction execution unit 50 stores in a register the data fetched or held during the memory access stage A.</p><p>Pipeline Executing High Performance Instruction</p><p>The detailed description of a pipeline operation when executing a high performance instruction will be given next.</p><p>As already described, it is necessary for the execution of a high performance instruction to use the instruction execution unit 50 two or more times. The first step processing for executing a high performance instruction at each of the instruction fetch stage I, decode stage D, execution stage E, memory access stage A, and register store stage S, is the same as that of a primitive instruction. Therefore, the microprogram ROM 30 and its output 90 are not used.</p><p>The second and subsequent processing at each of the execution stage E, memory access stage A, and register store stage S is also the same as that of a primitive instruction.</p><p>At the instruction fetch stage I of the second and subsequent processing, the instruction decoder 20 supplies the subsequent instruction code position indication signal 70 held to the instruction subsequent to the high performance instruction now under execution, so that the instruction fetch unit 10 can continuously output the instruction codes 60 of the subsequent instruction. If the instruction prefetch queue has a vacant area, the instruction fetch is so as not to leave the vacant area.</p><p>At the instruction decode stage D of the second and subsequent step processing, the microprogram ROM 30 is activated or enabled, whereas the operation of the instruction decoder 20 is stopped. As the instruction decoder output 80, the decoded result held at the first step is continuously output.</p><p>The ROM address 100 selected by the control signal selector 40 one step before for the disabled microprogram ROM 30 is used as the search address for the microprogram ROM 30. Specifically, the output 90 of the microprogram ROM 30 disabled at the first step does not contain a microinstruction for controlling the instruction execution unit 50 at the first step, but it contains a subsequent microinstruction address indicating the location of a microinstruction for controlling the instruction execution unit 50 at the second and subsequent step processing. Using the subsequent microinstruction address as the search address 100 of the microprogram ROM 30, a microinstruction for controlling the instruction execution unit 50 can be read from the microprogram ROM 30 from its output 90.</p><p>The control signal selector 40 selects the microprogram ROM output 90 as the ROM address 100 and instruction execution unit control signal 110, and supplies them to the microprogram ROM 30 and instruction execution unit 50. Of the instruction execution unit control signal 110, information of a register number, e.g. operand size and the like which can be set arbitrarily by an instruction, is made selectable by using the instruction decoder output 80. The reason for this is that if the microprogram ROM output 90 is to be used for such information arbitrarily selectable by an instruction, a different microprogram is required for each different value of such information, resulting in an increased capacity of the microprogram ROM 30. For the purpose of such operation, the instruction decoder output 80 continuously output starting from the first step is used. An instruction set of a particular kind uses information arbitrarily settable by an instruction not at the first step but at the second and subsequent steps. For a microprocessor applicable to such an instruction set, information arbitrarily settable by an instruction and usable at the second and subsequent steps are output as the instruction decoder output 80 to allow the second and subsequent steps to use this information.</p><p>The control by the control signal selector 40 for selecting one of the instruction decoder output 80 and microprogram ROM output 90 is carried out in the following manner. Namely, a final step indication signal is made to be contained in the instruction decoder output 80 and microprogram ROM output 90, and this final step indication signal is output from the instruction decoder output 80 in the case of a primitive instruction, and from the microprogram ROM output 90 in the case of a high performance instruction.</p><p>When the final step indication signal is asserted by the output selected by the control signal selector 40, the instruction decoder 20 is operated at the decode stage D for the subsequent instruction, and the control signal selector 40 selects the decoded result output 80 as the ROM address 100 and instruction execution unit control signal 110. If the final step indication signal is not asserted, the control signal selector 40 selects the microprogram ROM output 90. The same conditions as above are used for selecting the final step indication signal.</p><p>With the system arrangement described above, it becomes possible not to use the microprogram ROM 30 when executing a primitive instruction, reducing the capacity of the microprogram ROM 30 for primitive instructions, reducing the area and power consumption of the microprogram ROM 30, and improving the operation speed. Furthermore, only one of the instruction decoder 20 and microprogram ROM 30 operates at any time during the processing, further reducing the power consumption.</p><p>Particular Embodiment</p><p>FIG. 1 shows the structure of a microprocessor according to a-particular embodiment of the present invention, which processor can execute a plurality of instructions in parallel. The microprocessor is constructed of an instruction fetch unit 10, first instruction decoder 21, second instruction decoder 22, subsequent instruction code position indication signal generator 23, microprogram ROM 30, control signal selector 40, and first and second instruction execution units 51 and 52.</p><p>Fundamental Operation</p><p>First and second instruction codes 61 and 62 are supplied in parallel from the instruction fetch unit 10 to the first and second instruction decoders 21 and 22. The first and second instruction decoders 21 and 22 decode the first and second instruction codes 61 and 62, respectively, and determine first and second instruction lengths 71 and 72 which are sent to the subsequent instruction code position indication signal generator 23. In response, the generator 23 supplies a subsequent instruction code position indication signal 70 to the instruction fetch unit 10. The first and second instruction decoders 21 and 22 supply first and second instruction decoder outputs 81 and 82 to the control signal selector 40. The microprogram ROM 30 supplies a microprogram ROM output 90 to the control signal selector 40. A ROM address 100 is supplied from the control signal selector 40 to the microprogram ROM 30, and first and second instruction execution unit control signals 111 and 112 are supplied to the first and second instruction execution units 51 and 52, respectively.</p><p>Pipeline</p><p>As shown in FIG. 3, the microprocessor of this embodiment shown in FIG. 1 has five pipeline stages including an instruction fetch stage I, instruction decode stage D, execution stage E, memory access stage A, and register store stage S.</p><p>At the instruction stage I, the instruction fetch unit 10 operates. At the instruction decode stage D, the first and second instruction decoders 21 and 22, subsequent instruction code position indication signal generator 23, microprogram ROM 30, and control signal selector 40 can generate the first and second instruction execution unit control signals 111 and 112. At each of the execution stage E, memory access stage A, and register store stage S, the first and second instruction execution units 51 and 52 execute an operation, a memory access or register store.</p><p>Outline of Execution of Primitive and High Performance Instructions</p><p>A primitive instruction executable by using the first or second instruction execution unit 51 or 52 one time, is executed by operating each stage of the five pipeline stages one time. On the other hand, an instruction other than the primitive instruction, i.e., a high performance instruction, is executed by operating each stage two or more times.</p><p>Execution of Primitive Instruction</p><p>The detailed description of a pipeline operation when parallel executing two primitive instructions will be given first.</p><p>At the instruction fetch stage I, the instruction fetch unit 10 parallel supplies the first and second instruction codes 61 and 62 to the first and second instruction decoders 21 and 22. The instruction fetch unit 10 has a prefetch queue in which an instruction code is fetched and held in advance so that in accordance with the subsequent instruction code position indication signal 70, the first instruction code 61 is supplied to the first instruction decoder 21, and the subsequent code to the first instruction code 61 is supplied as the second instruction code 62 to the second instruction decoder 22. The \"subsequent code\" used herein is an instruction code subsequent to the first instruction code 61 if the first instruction code 61 has a minimal instruction length. If the first instruction code 61 is not of a minimal instruction length, the second instruction code 62 is an expansion portion of the first instruction code 61. The subsequent instruction code position indication signal 70 is generated at the first half of the instruction decode stage of the previous instruction executed simultaneously with the instruction fetch stage of the current instruction, and supplied to the instruction fetch unit 10. Therefore, selection of the first and second instruction codes 61 and 62 from the prefetch queues is performed in the second half of the instruction prefetch stage.</p><p>At the instruction decode stage D, the first and second instruction decoders 21 and 22 decode the first and second instruction codes 61 and 62 at the first half of this stage, and supply the first and second instruction lengths 71 and 72 to the subsequent instruction code position indication signal generator 23. In accordance with the first and second instruction lengths 71 and 72, the subsequent instruction code position indication signal generator 23 generates the subsequent instruction code position indication signal 70. The first and second instruction decoders 21 and 22 generate first and second instruction decoder outputs 81 and 82, and supply them to the control signal selector 40. After the two primitive instructions are decoded in parallel by the first and second instruction decoders 21 and 22, the control signal selector 40 selects, as a ROM address 100, one of the first and second decoder outputs 81 and 82 and supplies it to the microprogram ROM 30, and also selects, as the first and second instruction execution unit control signals 111 and 112, the first and second instruction decoder outputs 81 and 82. In this case, the supplied ROM address 100 disables the microprogram ROM 30.</p><p>If the first instruction length 71 is not the minimal instruction length, the second instruction code 62 is the expansion portion of the first instruction code, and not the real instruction code. As a result, the second instruction length 72 and second instruction decoder output 82 generated by the second instruction decoder 22 are meaningless information. For this reason, the subsequent instruction code position indication signal generator 23 generates a correct subsequent instruction code position indication signal 70 based upon the first instruction length 71. Also in this case, the second instruction decoder 22 is disabled so as to avoid erroneous operation of the microprocessor caused by meaningless information. On the other hand, if the first instruction length 71 is the minimal instruction length, the second instruction code 62 is an instruction code, and so the second instruction length 72 and second instruction decoder output 82 are correct. In this case, therefore, the subsequent instruction code position indication signal generator 23 generates the subsequent instruction code position indication signal 70 by using the second instruction length 72, without invalidating the second instruction decoder output 82.</p><p>At each stage of the execution stage E, memory access stage A, and register store stage S, in accordance with the first and second instruction execution unit control signals 111 and 112, the first and second instruction execution units 51 and 52 perform operations similar to those performed by the instruction execution unit 50 shown in FIG. 6 in accordance with the instruction execution unit control signal 110.</p><p>Following the above-described processing, the first and second instruction execution units 51 and 52 can parallel execute two primitive instructions in parallel by using the first and second instruction decoder outputs 81 and 82, without using the ROM output 90 of the microprogram ROM 30.</p><p>Execution of High Performance Instruction</p><p>The detailed description of a pipeline operation when executing a high performance instruction will be given next.</p><p>The first step processing at each stage for executing a high performance instruction is generally the same as for a primitive instruction. Namely, at the first processing for a high performance instruction, when a high performance instruction is supplied from the instruction fetch unit 10 to one of the first and second instruction decoders 21 and 22 (e.g., decoder 21), the signal selector unit 40 selects an output of the one instruction decoder 21 without selecting a microinstruction of the output 90 of the microprogram ROM 30. In accordance with the output 81 of the one instruction decoder 21, one of the first and second instruction execution units 51 and 52 (in this case, unit 51) executes the first step processing. However, the following point is different from the case of executing a primitive instruction. Namely, if the first instruction code 61 is a high performance instruction and the second instruction code 62 is an instruction code, the second instruction decoder output 82 is invalidated until the process of the first instruction code 61 is completed.</p><p>The reason for this is as follows. If the second instruction code 62 is a primitive instruction, the process of the second instruction code 62 is completed before that of the first instruction code 61 is completed unless the second instruction decoder output 82 is invalidated. On the other hand, if the second instruction code 62 is a high performance instruction, the second and subsequent step processing overlaps of the second instruction code 62 with the process of the first instruction code 61 at the microprogram ROM 30. It is therefore impossible for the first and second instruction execution units 51 and 52 to execute two high performance instructions at the same time at the second and subsequent step processing.</p><p>At the second step processing for a high performance instruction, the signal selector 40 selects a microprogram of the output 90 of the microprogram ROM 30, so that the one instruction execution unit 51 can execute the second step processing in accordance with the microinstruction obtained from the output of the signal selector 40.</p><p>Specifically, at the instruction fetch stage I from the second and subsequent step processing, the subsequent instruction code position indication signal generator 23 holds the subsequent instruction code position indication signal 70 which corresponds to the instruction subsequent to the high performance instruction under execution. Therefore, the instruction fetch unit 10 can continuously output the subsequent instruction code and the further next subsequent instruction code (in the case of the minimal instruction length of the subsequent instruction), as the first and second instruction codes 61 and 62. If there is a vacant area in the instruction prefetch queues, an instruction fetch is carried out so as to not to leave the vacant area.</p><p>At the instruction decode stage D of the second and subsequent step processing, the microprogram ROM 30 is activated or enabled, whereas the operations of the first and second instruction decoders 21 and 22 are stopped. As the first and second decoder outputs 81 and 82, the decoded results held at the first step are continuously output. The ROM address 100 selected by the control signal selector 40 one step before in quite the same manner as the embodiment shown in FIG. 6 is used as the search address for the microprogram 60. The control signal selector 40 selects as the ROM address 100 the subsequent microinstruction address of microprogram ROM output 90, and supplies it to the microprogram ROM 30. A microinstruction of the microprogram ROM output 90 is supplied to a selected one of the first and second instruction execution units 51 and 52. Which unit is selected and supplied with a microinstruction depends on which one of the first and second instruction decoders 21 and 22 decoded the high performance instruction. However, like the embodiment shown in FIG. 6, of the first and second instruction execution unit control signals 111 and 112, information arbitrarily settable by an instruction is arranged to be selected from the first or second instruction decoder output 81 or 82. Which of the first and second decoder outputs 81 and 82 is to be selected depends also on which one of the first and second instruction decoders 21 and 22 decoded the high performance instruction.</p><p>The control by the control signal selector 40 for selecting one of the first and second instruction decoder outputs 81 and 82 and microprogram ROM output 90, is carried out in the following manner. Namely, a final step indication signal is made to be contained in the first and second instruction decoder outputs 81 and 82 and microprogram ROM output 90, and this final step indication signal is output from the first or second instruction decoder output 81 or 82 in the case of a primitive instruction, and from the microprogram ROM output 90 in the case of a high performance instruction.</p><p>An end mode signal is also made to be contained in the microprogram ROM output 90, the end mode signal discriminating whether the final step is to be executed by using only the first instruction execution unit 51 or whether it is to be executed by using both the first and second instruction execution units 51 and 52. This end mode signal can be output as the microprogram ROM output 90 at the final step.</p><p>If the second instruction decoder output 82 is not invalidated until the process of the first instruction code 61 of a high performance instruction is completed, and when the final step indication signal is asserted by the output selected by the control signal selector 40 at the previous step, the first and second instruction decoders 21 and 22 are operated at the instruction decode stage before the final process of the first instruction code 61 is completed. During this decode operation, the final process of the first instruction code 61 can be executed by the first instruction execution unit 51, while operating the second instruction execution unit 52 in accordance with the second instruction decoder output 82 decoded in advance of the first instruction code 61.</p><p>Specifically, if it is judged, from the decoded results by the first and second instruction decoders 21 and 22 that the first instruction decoder output 81 is valid and the first instruction code is a high performance instruction, the first instruction decoder output 81 is selected as the ROM address and final step indication signal. If the final step indication signal is not asserted, the first and second decoders 21 and 22 are not operated but the microprogram ROM is enabled to select the microprogram ROM output 90 as the ROM address 100, and first and second instruction execution unit control signals 111 and 112.</p><p>If the second instruction decoder output 82 is invalidated until the process of the first instruction code 61 is completed, and when the final step indication signal is asserted by the microprogram ROM output 90 and the end mode signal indicates the use of only the first instruction execution unit 51, the microprogram ROM output 90 is selected as the first instruction execution unit control signal 111, and the second instruction decoder output 82 is selected as the second instruction execution unit control signal 112, ROM address 100, and final step indication signal, to then validate the second instruction decoder 22. At the next instruction decode stage, the first and second instruction decoders 21 and 22 are operated. If the final step indication signal is asserted and the end mode signal indicates the use of both the first and second instruction execution units 51 and 52, the microprogram ROM output 90 is selected as the ROM address 100, first and second instruction execution unit control signals 111 and 112, and final step indication signal, and at the next instruction decode stage the first instruction decoder output 81 is invalidated and the second instruction decoder output 82 is validated, without operating the first and second instruction decoders 21 and 22.</p><p>With the processing described above, it becomes possible to control the microprocessor such that the first and second instruction decoder outputs 81 and 82 are selected during the execution of only primitive instructions, the microprogram ROM output 90 is selected when a high performance instruction is decoded, and the first and second instruction decoder outputs 81 and 82 are selected again after completing the process of the high performance instruction. Furthermore, if the first instruction decoder 21 decodes a high performance instruction and the second instruction decoder 22 succeeds its decoding, an instruction decoded by the second instruction decoder 22 can be executed simultaneously with the process of the high performance instruction at the final step.</p><p>The second and subsequent step processing at the execution stage, memory access stage, and register store stage is the same as a primitive instruction.</p><p>With the system arrangement of the above-described embodiment, it is possible to execute two primitive instructions in parallel by using the single microprogram ROM 30, and to speed up the execution of a high performance instruction by using both the first and second instruction execution units 51 and 52. It is also possible to reduce the area and power consumption of the microprogram ROM 30 and improve the operation speed of the processor.</p><p>The present invention is not intended to be limited to the above-embodiments only, but various modifications are possible within the scope of the technical concept of the present invention. For example, a data processor capable of parallel executing three or more primitive instructions can be realized by using three or more instruction decoders and three or more instruction execution units.</p><p>According to the present invention, it is possible to execute a plurality of primitive instructions in parallel by using a single microprogram ROM, and to speed up the execution of a high performance instruction by using a plurality of instruction execution units. It is not necessary to use the microprogram ROM 30 when executing a primitive instruction, reducing the capacity of the microprogram ROM 30 for primitive instructions, reducing the area and power consumption of the microprogram ROM 30, and improving the operation speed. Furthermore, only one of the instruction decoder 20 and microprogram ROM 30 operates at any time during the processing, further reducing the power consumption.</p><?DETDESC description=\"Detailed Description\" end=\"tail\"?></description>"}], "inventors": [{"first_name": "Fumio", "last_name": "Arakawa", "name": ""}, {"first_name": "Susumu", "last_name": "Narita", "name": ""}, {"first_name": "Kunio", "last_name": "Uchiyama", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "HITACHI, LTD."}, {"first_name": "", "last_name": "RENESAS ELECTRONICS CORPORATION", "name": ""}], "ipc_classes": [{"primary": true, "label": "G06F   9/30"}], "locarno_classes": [], "ipcr_classes": [{"label": "G06F   9/28        20060101ALI20051220RMJP"}, {"label": "G06F   9/38        20060101AFI20051220RMJP"}, {"label": "G06F   9/22        20060101ALI20051220RMJP"}, {"label": "G06F   9/30        20060101A I20051008RMEP"}, {"label": "G06F   9/318       20060101A I20051008RMEP"}], "national_classes": [{"primary": true, "label": "712211"}, {"primary": false, "label": "712215"}, {"primary": false, "label": "712230"}, {"primary": false, "label": "712245"}, {"primary": false, "label": "712E09036"}, {"primary": false, "label": "712247"}, {"primary": false, "label": "712E09049"}, {"primary": false, "label": "712E09028"}], "ecla_classes": [{"label": "G06F   9/30X6"}, {"label": "G06F   9/30T"}, {"label": "G06F   9/38E"}], "cpc_classes": [{"label": "G06F   9/30192"}, {"label": "G06F   9/30145"}, {"label": "G06F   9/3857"}, {"label": "G06F   9/3836"}, {"label": "G06F   9/3836"}, {"label": "G06F   9/3857"}, {"label": "G06F   9/30145"}, {"label": "G06F   9/30192"}, {"label": "G06F   9/22"}], "f_term_classes": [], "legal_status": "Expired - Lifetime", "priority_date": "1992-02-20", "application_date": "1994-07-01", "family_members": [{"ucid": "JP-H05233271-A", "titles": [{"lang": "JA", "text": "\u30c7\u30fc\u30bf\u30d7\u30ed\u30bb\u30c3\u30b5"}, {"lang": "EN", "text": "DATA PROCESSOR"}, {"lang": "EN", "text": "DATA PROCESSOR"}]}, {"ucid": "US-5394558-A", "titles": [{"lang": "EN", "text": "Data processor having an execution unit controlled by an instruction decoder and a microprogram ROM"}]}, {"ucid": "JP-3497516-B2", "titles": [{"lang": "JA", "text": "\u30c7\u30fc\u30bf\u30d7\u30ed\u30bb\u30c3\u30b5"}, {"lang": "EN", "text": "Data processor"}]}, {"ucid": "KR-100266424-B1", "titles": [{"lang": "EN", "text": "DATA PROCESSOR HAVING A MICROPROGRAM ROM"}, {"lang": "KO", "text": "\ub86c(ROM)\uc6a9\ub7c9\uc744 \uc800\uac10\ud55c \ub370\uc774\ud0c0 \ud504\ub85c\uc138\uc11c"}]}, {"ucid": "KR-930018368-A", "titles": [{"lang": "EN", "text": "Data Processor Reduces ROM Capacity"}, {"lang": "KO", "text": "\ub86c(ROM) \uc6a9\ub7c9\uc744 \uc800\uac10\ud55c \ub370\uc774\ud0c0 \ud504\ub85c\uc138\uc11c"}]}]}