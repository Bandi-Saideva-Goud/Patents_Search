{"patent_number": "US-6978357-B1", "publication_id": 74473250, "family_id": 22402181, "publication_date": "2005-12-20", "titles": [{"lang": "EN", "text": "Method and apparatus for performing cache segment flush and cache segment invalidation operations"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA50908413\"><p num=\"p-0001\">A method and apparatus for including in a computer system, instructions for performing cache memory invalidate and cache memory flush operations. In one embodiment, the computer system comprises a cache memory having a plurality of cache lines each of which stores data, and a storage area to store a data operand. An execution unit is coupled to the storage area, and operates on data elements in the data operand to invalidate data in a predetermined portion of the plurality of cache lines in response to receiving a single instruction.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"CLM-00001\" num=\"00001\">\n<claim-text>1. A computer system comprising:\n<claim-text>a cache memory having a plurality of cache lines each of which stores data; </claim-text>\n<claim-text>a storage area to store a data operand; and </claim-text>\n<claim-text>an execution unit coupled to said storage area to operate on data elements in said data operand containing a portion of a user specified starting address to invalidate data in a predetermined portion of the plurality of cache lines beginning at the user specified starting address in response to receiving a single instruction of a processor instruction set. </claim-text>\n</claim-text>\n</claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00002\" num=\"00002\">\n<claim-text>2. The computer system of <claim-ref idref=\"CLM-00001\">claim 1</claim-ref>, wherein the data operand is a register location.</claim-text>\n</claim>"}, {"num": 3, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00003\" num=\"00003\">\n<claim-text>3. The computer system of <claim-ref idref=\"CLM-00001\">claim 1</claim-ref>, wherein the portion of the starting address includes a plurality of most significant bits of the starting address.</claim-text>\n</claim>"}, {"num": 4, "parent": 3, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00004\" num=\"00004\">\n<claim-text>4. The computer system of <claim-ref idref=\"CLM-00003\">claim 3</claim-ref>, wherein execution unit shifts the data elements by a predetermined number of bit positions to obtain the starting address of the cache line in which data is to be invalidated.</claim-text>\n</claim>"}, {"num": 5, "parent": 1, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00005\" num=\"00005\">\n<claim-text>5. The computer system of <claim-ref idref=\"CLM-00001\">claim 1</claim-ref>, wherein the predetermined portion of the plurality of cache lines is a page in the cache memory.</claim-text>\n</claim>"}, {"num": 6, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"CLM-00006\" num=\"00006\">\n<claim-text>6. A computer system comprising:\n<claim-text>a first storage area to store data; </claim-text>\n<claim-text>a cache memory having a plurality of cache lines each of which stores data; </claim-text>\n<claim-text>a second storage area to store a data operand containing a portion of an address; and </claim-text>\n<claim-text>an execution unit coupled to said first storage area, said second storage area, and said cache memory, said execution unit to operate on the portion of a user specified address in said data operand to copy data from a predetermined portion of the plurality of cache lines beginning at the user specified starting address in the cache memory to the first storage area, in response to receiving a single instruction of a processor instruction set. </claim-text>\n</claim-text>\n</claim>"}, {"num": 7, "parent": 6, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00007\" num=\"00007\">\n<claim-text>7. The computer system of <claim-ref idref=\"CLM-00006\">claim 6</claim-ref>, wherein the data operand is a register location.</claim-text>\n</claim>"}, {"num": 8, "parent": 7, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00008\" num=\"00008\">\n<claim-text>8. The computer system of <claim-ref idref=\"CLM-00007\">claim 7</claim-ref>, wherein the register location contains a plurality of most significant bits of a starting address of the cache line in which data is to be copied.</claim-text>\n</claim>"}, {"num": 9, "parent": 8, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00009\" num=\"00009\">\n<claim-text>9. The computer system of <claim-ref idref=\"CLM-00008\">claim 8</claim-ref>, wherein execution unit shifts the portion of an address by a predetermined number of bit positions to obtain the starting address of the cache line in which data is to be copied.</claim-text>\n</claim>"}, {"num": 10, "parent": 6, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00010\" num=\"00010\">\n<claim-text>10. The computer system of <claim-ref idref=\"CLM-00006\">claim 6</claim-ref>, wherein the predetermined portion of the plurality of cache lines is a page in the cache memory.</claim-text>\n</claim>"}, {"num": 11, "parent": 6, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00011\" num=\"00011\">\n<claim-text>11. The computer system of <claim-ref idref=\"CLM-00006\">claim 6</claim-ref>, wherein the execution unit further invalidates data in the predetermined portion of the plurality of cache lines in response to receiving the single instruction, upon copying the data to the first storage area.</claim-text>\n</claim>"}, {"num": 12, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"CLM-00012\" num=\"00012\">\n<claim-text>12. A computer system comprising:\n<claim-text>a cache memory having a plurality of cache lines each of which stores data; </claim-text>\n<claim-text>a storage area to store a data operand; and </claim-text>\n<claim-text>an execution unit coupled to said storage area to operate on data elements in said data operand identifying a user-definable linear or physical address identifying a predetermined portion of the plurality of cache lines to invalidate data in the predetermined portion of the plurality of cache lines in response to receiving a single cache control instruction of a processor instruction set, the single cache control instruction including a reference to the data operand. </claim-text>\n</claim-text>\n</claim>"}, {"num": 13, "parent": 12, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00013\" num=\"00013\">\n<claim-text>13. The computer system of <claim-ref idref=\"CLM-00012\">claim 12</claim-ref>, wherein the data operand is a register location.</claim-text>\n</claim>"}, {"num": 14, "parent": 13, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00014\" num=\"00014\">\n<claim-text>14. The computer system of <claim-ref idref=\"CLM-00013\">claim 13</claim-ref>, wherein execution unit shifts the data elements by a predetermined number of bit positions to obtain the starting address of the cache line in which data is to be invalidated.</claim-text>\n</claim>"}, {"num": 15, "parent": 12, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00015\" num=\"00015\">\n<claim-text>15. The computer system of <claim-ref idref=\"CLM-00012\">claim 12</claim-ref>, wherein the predetermined portion of the plurality of cache lines is a page in the cache memory.</claim-text>\n</claim>"}, {"num": 16, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"CLM-00016\" num=\"00016\">\n<claim-text>16. A processor comprising:\n<claim-text>a decoder configured to decode instructions; and a circuit coupled to said decoder, said circuit in response to a single decoded instruction of a processor instruction set being configured to: \n<claim-text>read a portion of an address located in a register specified in the decoded instruction to obtain a user specified starting address of a predetermined area of a cache memory on which the instruction will be performed; and invalidate in the predetermined area of cache memory. </claim-text>\n</claim-text>\n</claim-text>\n</claim>"}, {"num": 17, "parent": 16, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00017\" num=\"00017\">\n<claim-text>17. The processor of <claim-ref idref=\"CLM-00016\">claim 16</claim-ref>, wherein the portion of an address includes a plurality of most significant bits of the starting address.</claim-text>\n</claim>"}, {"num": 18, "parent": 17, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00018\" num=\"00018\">\n<claim-text>18. The processor of <claim-ref idref=\"CLM-00017\">claim 17</claim-ref>, wherein the circuit shifts the portion of an address by a predetermined number of bits positions to obtain the starting address of a cache line of the predetermined area of the cache memory in which data is to be invalidated.</claim-text>\n</claim>"}, {"num": 19, "parent": 16, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00019\" num=\"00019\">\n<claim-text>19. The processor of <claim-ref idref=\"CLM-00016\">claim 16</claim-ref>, wherein the predetermined area of the cache memory comprises a plurality of cache lines forming a page in the cache memory.</claim-text>\n</claim>"}, {"num": 20, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"CLM-00020\" num=\"00020\">\n<claim-text>20. A processor comprising:\n<claim-text>a decoder to decode instructions, and </claim-text>\n<claim-text>a circuit coupled to said decoder, said circuit in response to a single decoded instruction of a processor instruction set being configured to: read a portion of an address located in a register specified in the decoded instruction to obtain a user specified starting address of a predetermined area of a cache memory on which the instruction will be performed; </claim-text>\n<claim-text>copy data in the predetermined area of the cache memory; and </claim-text>\n<claim-text>store the copied data in storage area separate from the cache memory. </claim-text>\n</claim-text>\n</claim>"}, {"num": 21, "parent": 20, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00021\" num=\"00021\">\n<claim-text>21. The processor of <claim-ref idref=\"CLM-00020\">claim 20</claim-ref>, wherein the portion of an address includes a plurality of most significant bits of the starting address.</claim-text>\n</claim>"}, {"num": 22, "parent": 21, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00022\" num=\"00022\">\n<claim-text>22. The processor of <claim-ref idref=\"CLM-00021\">claim 21</claim-ref>, wherein the circuit shifts the portion of the address by a predetermined number of bit positions to obtain the starting address of a cache line of the cache memory in which data is to be copied.</claim-text>\n</claim>"}, {"num": 23, "parent": 21, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00023\" num=\"00023\">\n<claim-text>23. The processor of <claim-ref idref=\"CLM-00021\">claim 21</claim-ref>, wherein the predetermined area comprises a plurality of cache lines forming a page in the cache memory.</claim-text>\n</claim>"}, {"num": 24, "parent": 21, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00024\" num=\"00024\">\n<claim-text>24. The processor of <claim-ref idref=\"CLM-00021\">claim 21</claim-ref>, wherein said circuit further invalidates the data in the predetermined portion of the plurality of cache lines in response to receiving the single instruction, upon copying the data to the storage area.</claim-text>\n</claim>"}, {"num": 25, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"CLM-00025\" num=\"00025\">\n<claim-text>25. A computer-implemented method, comprising:\n<claim-text>a) decoding a single instruction of a processor instruction set; </claim-text>\n<claim-text>b) in response to said decoding of the single instruction, obtaining a portion of a user specified starting address of a predetermined area of a cache memory on which the single instruction will be performed by reading a portion of an address contained in a storage location specified in the decoded instruction; and </claim-text>\n<claim-text>c) completing execution of said single instruction by invalidating data in the predetermined area of the cache memory. </claim-text>\n</claim-text>\n</claim>"}, {"num": 26, "parent": 25, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00026\" num=\"00026\">\n<claim-text>26. The method of <claim-ref idref=\"CLM-00025\">claim 25</claim-ref>, wherein c) comprises setting an invalid bit corresponding to the predetermined area of the cache memory.</claim-text>\n</claim>"}, {"num": 27, "parent": 25, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00027\" num=\"00027\">\n<claim-text>27. The method of <claim-ref idref=\"CLM-00025\">claim 25</claim-ref> wherein b) comprises:\n<claim-text>shifting the portion of the starting address by a predetermined number of bit positions to obtain the starting address of a cache line of the cache memory in which data is to be invalidated. </claim-text>\n</claim-text>\n</claim>"}, {"num": 28, "parent": 27, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00028\" num=\"00028\">\n<claim-text>28. The method of <claim-ref idref=\"CLM-00027\">claim 27</claim-ref>, wherein the portion of the starting address contains a plurality of most significant bits of the starting address, and the predetermined number of bit positions represent the number of least significant bits of the starting address.</claim-text>\n</claim>"}, {"num": 29, "parent": 25, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00029\" num=\"00029\">\n<claim-text>29. The method of <claim-ref idref=\"CLM-00025\">claim 25</claim-ref>, wherein the predetermined area is a page in the cache memory.</claim-text>\n</claim>"}, {"num": 30, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"CLM-00030\" num=\"00030\">\n<claim-text>30. A computer-implemented method, comprising:\n<claim-text>a) decoding a single instruction of a processor instruction set; </claim-text>\n<claim-text>b) in response to said decoding the single instruction, obtaining a portion of a user specified starting address of a predetermined area of a cache memory on which the single instruction will be performed by reading a portion of an address contained in a storage location specified in the decoded instruction; and </claim-text>\n<claim-text>c) completing execution of said single instruction by copying data in the predetermined area of cache memory and storing the copied data in a storage area separate from the cache memory. </claim-text>\n</claim-text>\n</claim>"}, {"num": 31, "parent": 30, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00031\" num=\"00031\">\n<claim-text>31. The method of <claim-ref idref=\"CLM-00030\">claim 30</claim-ref>, wherein c) comprises setting an invalid bit corresponding to the predetermined area of the cache memory.</claim-text>\n</claim>"}, {"num": 32, "parent": 30, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00032\" num=\"00032\">\n<claim-text>32. The method of <claim-ref idref=\"CLM-00030\">claim 30</claim-ref>, wherein b) comprises:\n<claim-text>shifting the portion of the starting address by a predetermined number of bit positions to obtain the starting address of a cache line associated with the predetermined area. </claim-text>\n</claim-text>\n</claim>"}, {"num": 33, "parent": 32, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00033\" num=\"00033\">\n<claim-text>33. The method of <claim-ref idref=\"CLM-00032\">claim 32</claim-ref>, wherein the portion of the starting address contains a plurality of most significant bits of the starting address, and the predetermined number of bit positions represent the number of least significant bits of the starting address.</claim-text>\n</claim>"}, {"num": 34, "parent": 30, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00034\" num=\"00034\">\n<claim-text>34. The method of <claim-ref idref=\"CLM-00030\">claim 30</claim-ref>, wherein the predetermined area comprises a plurality of cache lines forming a page in the cache memory.</claim-text>\n</claim>"}, {"num": 35, "parent": 30, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00035\" num=\"00035\">\n<claim-text>35. The method of <claim-ref idref=\"CLM-00030\">claim 30</claim-ref>, further comprises:\n<claim-text>d) invalidating the data in the predetermined area in response to receiving the single instruction, upon copying the data to the storage area. </claim-text>\n</claim-text>\n</claim>"}, {"num": 36, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"CLM-00036\" num=\"00036\">\n<claim-text>36. A computer-readable apparatus, comprising:\n<claim-text>a computer-readable medium that stores an instruction which when executed by a processor causes said processor to: \n<claim-text>a) decode a single instruction of a processor instruction set; </claim-text>\n<claim-text>b) in response to decoding the single instruction, obtain a portion of a user specified starting address of a predetermined area of a cache memory on which the single instruction will be performed by reading a portion of an address contained in a storage location specified in the decoded instruction; and </claim-text>\n<claim-text>c) complete execution of said single instruction by invalidating data in the predetermined area of the cache memory. </claim-text>\n</claim-text>\n</claim-text>\n</claim>"}, {"num": 37, "parent": -1, "type": "independent", "paragraph_markup": "<claim id=\"CLM-00037\" num=\"00037\">\n<claim-text>37. A computer-readable apparatus comprising:\n<claim-text>a computer-readable medium that stores an instruction which when executed by a processor causes said processor to: \n<claim-text>a) decode a single instruction of a processor instruction set; </claim-text>\n<claim-text>b) in response to decoding the single instruction, obtain a portion of a user specified starting address of a predetermined area of a cache memory on which the single instruction will be performed by reading a portion of an address contained in a storage location specified <b>8</b> in the decoded single instruction; and </claim-text>\n<claim-text>c) complete execution of said single instruction by copying data in the predetermined area of the cache memory and storing the copied data in a storage area separate from the cache memory. </claim-text>\n</claim-text>\n</claim-text>\n</claim>"}, {"num": 38, "parent": 37, "type": "dependent", "paragraph_markup": "<claim id=\"CLM-00038\" num=\"00038\">\n<claim-text>38. The apparatus of <claim-ref idref=\"CLM-00037\">claim 37</claim-ref>, wherein the instruction further causes the processor to:\n<claim-text>invalidate the data in a predetermined portion of a plurality of cache lines forming the predetermined area of the cache memory in response to receiving the instruction, upon copying the data to the storage area. </claim-text>\n</claim-text>\n</claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES15959751\">\n<?BRFSUM description=\"Brief Summary\" end=\"lead\"?>\n<h4>BACKGROUND OF THE INVENTION</h4>\n<p num=\"p-0002\">1. Field of the Invention</p>\n<p num=\"p-0003\">The present invention relates in general to the field of computer systems, and in particular, to an apparatus and method for providing instructions which facilitate the invalidation and/or flushing of a portion of a cache memory within a cache system.</p>\n<p num=\"p-0004\">2. Description of the Related Art</p>\n<p num=\"p-0005\">The use of a cache memory with a computer system facilitates the reduction of memory access time. The fundamental idea of cache organization is that by keeping the most frequently accessed instructions and data in the fast cache memory, the average memory access time will approach the access time of the cache. To achieve the optimal tradeoffs between cache size and performance, typical computer systems implement a cache hierarchy, that is, different levels of cache memory. The different levels of cache correspond to different distances from the computer system core. The closer the cache is to the computer system, the faster the data access. However, the closer the cache is to the computer system, the more costly it is to implement. As a result, the closer the cache level, the faster and smaller the cache.</p>\n<p num=\"p-0006\">A cache unit is typically located between the computer system and main memory; it typically includes a cache controller and a cache memory such as a static random access memory (SRAM). The cache unit can be included on the same chip as the computer system or can exist as a separate component. Alternatively, the cache controller may be included on the computer system chip and the cache memory is formed by external SRAM chips.</p>\n<p num=\"p-0007\">The performance of cache memory is frequently measured in terms of its hit ratio. When the computer system refers to memory and finds the data in its cache, it is said to produce a hit. If the data is not found in cache, then it is in main memory and is counted as a miss. If a miss occurs, then an allocation is made at the entry indexed by the address of the access. The access can be for loading data to the computer system or storing data from the computer system to memory. The cached information is retained by the cache memory until it is no longer needed, made invalid or replaced by other data, in which instances the cache entry is de-allocated.</p>\n<p num=\"p-0008\">If other computer systems or system components have access to the main memory, as is the case, for example, with a DMA controller, and the main memory can be overwritten, the cache controller must inform the applicable cache that the data stored within the cache is invalid if the data in the main memory changes. Such an operation is known as cache invalidation. If the cache controller implements a write-back strategy and, with a cache hit, only writes data from the computer system to its cache, the cache content must be transferred to the main memory under specific conditions. This applies, for example, when the DMA chip transfers data from the main memory to a peripheral unit, but the current values are only stored in an SRAM cache. This type of operation is known as a cache flush.</p>\n<p num=\"p-0009\">Currently, such invalidating and/or flushing operations are performed automatically by hardware, for an associated cache line. In certain situations, software have been developed to invalidate and/or flush the cache memory. Currently, such software techniques involve the use of an instruction which operates on the entire cache memory corresponding to the computer system from which the instruction originated. However, such invalidation and/or flushing operations require a large amount of time to complete, and provides no granularity or control for the user to invalidate and/or flush specific data or portions of data from the cache, while retaining the other data within the cache memory intact. When a flushing operation operates only on the entire cache memory, it results in inflexibility and impacts system performance. In addition, where a cache invalidation operation operates only on the entire cache, data corruption may result.</p>\n<h4>BRIEF SUMMARY OF THE INVENTION</h4>\n<p num=\"p-0010\">A method and apparatus for including in a computer system, instructions for performing cache memory invalidate and cache memory flush operations. In one embodiment, the computer system comprises a cache memory having a plurality of cache lines each of which stores data, and a storage area to store a data operand. An execution unit is coupled to the storage area, and operates on data elements in the data operand to invalidate data in a predetermined portion of the plurality of cache lines in response to receiving a single instruction.</p>\n<?BRFSUM description=\"Brief Summary\" end=\"tail\"?>\n<?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?>\n<description-of-drawings>\n<h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4>\n<p num=\"p-0011\">The invention is illustrated by way of example, and not limitation, in the figures. Like reference indicate similar elements.</p>\n<p num=\"p-0012\"><figref idrefs=\"DRAWINGS\">FIG. 1</figref> illustrates an exemplary computer system in accordance with one embodiment of the invention.</p>\n<p num=\"p-0013\"><figref idrefs=\"DRAWINGS\">FIG. 2</figref> illustrates one embodiment of the format of a cache control instruction <b>160</b> provided according to one embodiment of the invention.</p>\n<p num=\"p-0014\"><figref idrefs=\"DRAWINGS\">FIG. 3</figref> illustrates the general operation of the cache control technique according to one embodiment of the invention.</p>\n<p num=\"p-0015\"><figref idrefs=\"DRAWINGS\">FIG. 4A</figref> illustrates one embodiment of the operation of the cache segment invalidate instruction <b>162</b>.</p>\n<p num=\"p-0016\"><figref idrefs=\"DRAWINGS\">FIG. 4B</figref> illustrates one embodiment of the operation of the cache segment flush instruction <b>164</b>.</p>\n<p num=\"p-0017\"><figref idrefs=\"DRAWINGS\">FIG. 5A</figref> is a flowchart illustrating one embodiment of the cache segment invalidate process of the present invention.</p>\n<p num=\"p-0018\"><figref idrefs=\"DRAWINGS\">FIG. 5B</figref> is a flowchart illustrating one embodiment of the cache segment flush process of the present invention.</p>\n</description-of-drawings>\n<?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?>\n<?DETDESC description=\"Detailed Description\" end=\"lead\"?>\n<h4>DETAILED DESCRIPTION OF THE INVENTION</h4>\n<p num=\"p-0019\">In the following description, numerous specific details are set forth to provide a thorough understanding of the invention. However, it is understood that the invention may be practiced without these specific details. In other instances, well-known circuits, structures and techniques have not been shown in detail in order not to obscure the invention.</p>\n<p num=\"p-0020\"><figref idrefs=\"DRAWINGS\">FIG. 1</figref> illustrates one embodiment of a computer system <b>100</b> which implements the principles of the present invention. Computer system <b>100</b> comprises a computer system <b>105</b>, a storage device <b>110</b>, and a bus <b>115</b>. The computer system <b>105</b> is coupled to the storage device <b>110</b> by the bus <b>115</b>. The storage device <b>110</b> represents one or more mechanisms for storing data. For example, the storage device <b>110</b> may include read only memory (ROM), random access memory (RAM), magnetic disk storage mediums, optical storage mediums, flash memory devices and/or other machine readable mediums. In addition, a number of user input/output devices, such as a keyboard <b>120</b> and a display <b>125</b>, are also coupled to the bus <b>115</b>. The computer system <b>105</b> represents a central processing unit of any type of architecture, such as CISC, RISC, VLIW, or hybrid architecture. In addition, the computer system <b>105</b> could be implemented on one or more chips. The storage device <b>110</b> represents one or more mechanisms for storing data. For example, the storage device <b>110</b> may include read only memory (ROM), random access memory (RAM), magnetic disk storage mediums, optical storage mediums, flash memory devices, and/or other machine-readable mediums. The bus <b>115</b> represents one or more buses (e.g., AGP, PCI, ISA, X-Bus, VESA, etc.) and bridges (also termed as bus controllers). While this embodiment is described in relation to a single computer system computer system, the invention could be implemented in a multi-computer system computer system.</p>\n<p num=\"p-0021\">In addition to other devices, one or more of a network <b>130</b>, a TV broadcast signal receiver <b>131</b>, a fax/modem <b>132</b>, a digitizing unit <b>133</b>, a sound unit <b>134</b>, and a graphics unit <b>135</b> may optionally be coupled to bus <b>115</b>. The network <b>130</b> and fax modem <b>132</b> represent one or more network connections for transmitting data over a machine readable media (e.g., carrier waves). The digitizing unit <b>133</b> represents one or more devices for digitizing images (i.e., a scanner, camera, etc.). The sound unit <b>134</b> represents one or more devices for inputting and/or outputting sound (e.g., microphones, speakers, magnetic main memories, etc.). The graphics unit <b>135</b> represents one or more devices for generating 3-D images (e.g., graphics card). <figref idrefs=\"DRAWINGS\">FIG. 1</figref> also illustrates that the storage device <b>110</b> has stored therein data <b>136</b> and software <b>137</b>. Data <b>136</b> represents data stored in one or more of the formats described herein. Software <b>137</b> represents the necessary code for performing any and/or all of the techniques described with reference to <figref idrefs=\"DRAWINGS\">FIGS. 2</figref>, and <b>4</b>-<b>6</b>. Of course, the storage device <b>110</b> preferably contains additional software (not shown), which is not necessary to understanding the invention.</p>\n<p num=\"p-0022\"><figref idrefs=\"DRAWINGS\">FIG. 1</figref> additionally illustrates that the computer system <b>105</b> includes decode unit <b>140</b>, a set of registers <b>141</b>, and execution unit <b>142</b>, and an internal bus <b>143</b> for executing instructions. The computer system <b>105</b> further includes two internal cache memories, a level <b>0</b> (L<b>0</b>) cache memory which is coupled to the execution unit <b>142</b>, and a level <b>1</b> (L<b>1</b>) cache memory, which is coupled to the L<b>0</b> cache. An external cache memory, i.e., a level <b>2</b> (L<b>2</b>) cache memory <b>172</b>, is coupled to bus <b>115</b> via a cache controller <b>170</b>. The actual placement of the various cache memories is a design choice or may be dictated by the computer system architecture. Thus, it is appreciated that the L<b>1</b> cache could be placed external to the computer system <b>105</b>. In alternate embodiments, more or less levels of cache (other than L<b>1</b> and L<b>2</b>) may be implemented. It is appreciated that three levels of cache hierarchy are shown in <figref idrefs=\"DRAWINGS\">FIG. 1</figref>, but there could be more or less cache levels. For example, the present invention could be practiced where there is only one cache level (L<b>0</b> only) or where there are only two cache levels (L<b>0</b> and L<b>1</b>), or where there are four or more cache levels.</p>\n<p num=\"p-0023\">Of course, the computer system <b>105</b> contains additional circuitry, which is not necessary to understanding the invention. The decode unit <b>140</b>, registers <b>141</b> and execution unit <b>142</b> are coupled together by internal bus <b>143</b>. The decode unit <b>140</b> is used for decoding instructions received by computer system <b>105</b> into control signals and/or micro code entry points. In response to these control signals and/or micro code entry points, the execution unit <b>142</b> performs the appropriate operations. The decode unit <b>140</b> may be implemented using any number of different mechanisms (e.g., a look-up table, a hardware implementation, a PLA, etc.). While the decoding of the various instructions is represented herein by a series of if/then statements, it is understood that the execution of an instruction does not require a serial processing of these if/then statements. Rather, any mechanism for logically performing this if/then processing is considered to be within the scope of the implementation of the invention.</p>\n<p num=\"p-0024\">The decode unit <b>140</b> is shown including a fetching unit <b>150</b> which fetches instructions, and an instruction set <b>165</b> for performing operations on data. In one embodiment, the instruction set <b>165</b> includes a cache control instruction(s) provided in accordance with the present invention. In one embodiment, the cache control instructions include: a cache segment invalidate instruction(s) <b>162</b>, a cache segment flush instruction(s) <b>164</b> and a cache segment flush and invalidate instruction(s) <b>166</b> provided in accordance with the present invention. An example of the cache segment invalidate instruction(s) <b>162</b> includes a Page Invalidate (PGINVD) instruction which operates on a user specified linear address and invalidates the 4 k Byte physical page corresponding to the linear address from all levels of the cache hierarchy for all agents in the computer system that are connected to the computer system. An example of the cache segment flush instruction <b>164</b> includes a Page Flush (PGFLUSH) instruction <b>164</b> that flushes data in the 4 Kbyte physical page corresponding to the linear address on which the operation is performed. An example of the cache segment flush and invalidate instruction <b>166</b> includes a Page Flush/Invalidate (PGFLUSHINV) instruction <b>166</b> that first flushes data in the 4 Kbyte physical page corresponding to the linear address on which the operation is performed, and then invalidates the 4 kilobyte physical page corresponding to the linear address. In alternative embodiments, the cache control instruction(s) may operate on either a user specified linear or physical address and perform the Associated invalidate and/or flush operations in accordance with the principles of the invention.</p>\n<p num=\"p-0025\">In addition to the cache segment invalidate instruction(s) <b>162</b>, the cache segment flush instruction(s) <b>164</b>, and the cache segment flush and invalidate instruction(s) <b>166</b>, computer system <b>105</b> can include new instructions and/or instructions similar to or the same as those found in existing general purpose computer systems. For example, in one embodiment the computer system <b>105</b> supports an instruction set which is compatible with the Intel\u00ae Architecture instruction set used by existing computer systems, such as the Pentium\u00aeII computer system. Alternative embodiments of the invention may contain more or less, as well as different instructions and still utilize the teachings of the invention.</p>\n<p num=\"p-0026\">The registers <b>141</b> represent a storage area on computer system <b>105</b> for storing information, such as control/status information, scalar and/or packed integer data, floating point data, etc. It is understood that one aspect of the invention is the described instruction set. According to this aspect of the invention, the storage area used for storing the data is not critical. The term data processing system is used herein to refer to any machine for processing data, including the computer system(s) described with reference to FIG. <b>1</b>.</p>\n<p num=\"p-0027\"><figref idrefs=\"DRAWINGS\">FIG. 2</figref> illustrates one embodiment of the format of any one of the cache segment invalidate instructions <b>162</b>, the cache segment flush instruction <b>164</b>, and the cache segment flush and invalidate instructions <b>166</b> provided in accordance with the present invention. For discussion purposes, the instructions <b>162</b>, <b>164</b> and <b>166</b> will be referred to as the cache control instruction <b>160</b>. The cache control instruction <b>160</b> comprises and operational code (OP CODE) <b>210</b> which identifies the operation of the cache control instruction <b>160</b> and an operand <b>212</b> which specifies the name of a register of memory location which holds a starting address of the data object that the instruction <b>160</b> will be operating on.</p>\n<p num=\"p-0028\"><figref idrefs=\"DRAWINGS\">FIG. 3</figref> illustrates the general operation of the cache control instruction <b>160</b> according to one embodiment of the invention. In the practice of the invention, the cache control instruction <b>160</b> provides the register (or memory) location which holds a starting address of the data object that the instruction <b>160</b> will be operating on. In one embodiment, the starting address includes X most significant bits, which are stored in the register (or memory) location, and Y least significant bits. The cache control process associated with the cache control instruction <b>160</b> then shifts the X bits to the right by Y bit positions to obtain the complete starting address. The cache control instruction <b>160</b> then operates on the data corresponding to the starting address, and data corresponding to the Z subsequent addresses, in cache memory. In one embodiment, the cache control instruction <b>160</b> operates on one page of data stored in cache, of which the beginning address is stored in a register (or memory) location specified in the operand <b>212</b> of the cache control instruction. In alternate embodiments, the cache control instruction <b>160</b> may operate on any predetermined amount of data stored in cache, of which the beginning address is stored in a register (or memory) location specified in the operand <b>212</b> of the cache control instruction.</p>\n<p num=\"p-0029\">In <figref idrefs=\"DRAWINGS\">FIG. 1</figref>, only L<b>0</b>, L<b>1</b> and L<b>2</b> levels are shown, but it is appreciated that more or less levels can be readily implemented. The embodiment shown in <figref idrefs=\"DRAWINGS\">FIGS. 4-6</figref> describes the use of the invention with respect to one cache level.</p>\n<p num=\"p-0030\">Details of various embodiments of the cache control instruction <b>160</b> will now be described. The cache segment invalidate instruction <b>162</b> will first be described. <figref idrefs=\"DRAWINGS\">FIG. 4A</figref> illustrates one embodiment of the cache segment invalidate instruction <b>162</b>. Upon receiving the cache segment invalidate instruction <b>162</b>, the computer system <b>105</b> determines, from the operand <b>312</b> of the instruction <b>162</b>, the register location in which the most signification bits of the starting address of the data object is stored. The computer system <b>105</b> then shifts the value in the operand <b>312</b>, by the number of least significant bits of the starting address. Once the complete starting address is obtained, the computer system <b>105</b> sets the invalidate bit of the cache memory <b>200</b> corresponding to the affected locations of the cache memory. In one embodiment, one page of the cache memory <b>220</b> having a starting address corresponding to that stored in the operand <b>312</b> will be invalidated. In alternate embodiments, data in any predetermined portions of the cache memory <b>220</b> having a starting address corresponding to that stored in the operand <b>312</b> will be invalidated using the present technique.</p>\n<p num=\"p-0031\">The cache segment flush instruction <b>164</b> will next be described. <figref idrefs=\"DRAWINGS\">FIG. 4B</figref> illustrates one embodiment of the cache segment flush instruction <b>164</b>. Upon receiving the cache segment flush instruction <b>164</b>, the computer system <b>105</b> determines, from the operand <b>312</b> of the instruction <b>164</b>, the register location in which the most signification bits of the starting address of the data object is stored. The computer system <b>105</b> then shifts the value in the operand <b>312</b>, by the number of least significant bits of the starting address. Once the complete starting address is obtained, the computer system flushes the locations of cache memory <b>220</b> affected by execution of the instruction <b>164</b>. In one embodiment, one page of the cache memory <b>220</b> having a starting address corresponding to that stored in the operand <b>312</b> will be flushed. In alternate embodiments, data in any predetermined portions of the cache memory <b>220</b> having a starting address corresponding to that stored in the operand <b>312</b> will be flushed.</p>\n<p num=\"p-0032\">The cache segment flush/invalidate instruction <b>166</b> will now be described. <figref idrefs=\"DRAWINGS\">FIG. 4C</figref> illustrates one embodiment of the cache segment flush and invalidate instruction <b>166</b>. Upon receiving the cache segment flush instruction <b>166</b>, the computer system <b>105</b> determines, from the operand <b>312</b> of the instruction <b>164</b>, the register location in which the most signification bits of the starting address of the data object is stored. The computer system <b>105</b> then shifts the value in the operand <b>312</b>, by the number of least significant bits of the starting address. Once the complete starting address is obtained, the computer system flushes the locations of cache memory <b>220</b> affected by execution of the instruction <b>164</b>. In one embodiment, one page of the cache memory <b>220</b> having a starting address corresponding to that stored in the operand <b>312</b> will be flushed. In alternate embodiments, any predetermined portions of the cache memory <b>220</b> having a starting address corresponding to that stored in the operand <b>312</b> will be flushed. Next, the computer system <b>105</b> invalidates the affected areas of the cache memory <b>220</b> that have been flushed. In one embodiment, this is performed by setting the invalidate bit of each affected cache line.</p>\n<p num=\"p-0033\"><figref idrefs=\"DRAWINGS\">FIG. 5A</figref> is a flowchart illustrating one embodiment of the cache segment invalidate process of the present invention. Beginning from a start state, the process <b>500</b> proceeds to process block <b>510</b>, where it examines the operand <b>312</b> of the instruction <b>62</b> received by the computer system <b>105</b> to determine the storage location of the value representing the most significant bits of the starting address of the corresponding operation. The process <b>500</b> then proceeds to process block <b>512</b>, where it retrieves the value representing the most significant bits of the starting address from the storage location specified. The process <b>500</b> then advances to process block <b>514</b>, where it shifts the retrieved value by a predetermined number of bits. In one embodiment, the predetermined number represents the number of least significant bits in the starting address. Next, the process <b>500</b> determines the cache segment affected by the operation or the instruction <b>162</b>, as shown in process block <b>516</b>. In one embodiment, the cache segment is a page. In one embodiment, a page contains 4 k Bytes. In alternate embodiments, the cache segment may be any predetermined portion of the cache memory. The process <b>500</b> then proceeds to process block <b>516</b>, where it invalidates the data in the corresponding cache segment beginning at the starting address specified. In one embodiment, this is performed by setting the invalid bit corresponding to each cache line in the cache segment. The process <b>500</b> then terminates.</p>\n<p num=\"p-0034\"><figref idrefs=\"DRAWINGS\">FIG. 5B</figref> is a flowchart illustrating one embodiment of the cache segment flush process of the present invention. Beginning from a start state, the process <b>520</b> proceeds to process block <b>522</b>, where it examines the operand <b>312</b> of the instruction <b>64</b> or <b>66</b> received by the computer system <b>105</b> to determine the storage location of the value representing the most significant bits of the starting address of the corresponding operation. The process <b>520</b> then proceeds to process block <b>524</b>, where it retrieves the value representing the most significant bits of the starting address from the storage location specified. The process <b>520</b> then advances to process block <b>526</b>, where it shifts the retrieved value by a predetermined number of bits. In one embodiment, the predetermined number represents the number of least significant bits in the starting address. Next, the process <b>520</b> determines the cache segment affected by the operation or the instruction <b>64</b> or <b>66</b>, as shown in process block <b>528</b>. In one embodiment, the cache segment is a page. In alternate embodiments the cache segment may be any predetermined portion of the cache. The process <b>520</b> then proceeds to process block <b>530</b>, where it flushes the contents of the cache segment to the storage device specified. The process <b>520</b> then proceeds to decision block <b>530</b>, where it queries if the instruction received corresponding to the operation is a FLUSH or a FLUSH and INVALIDATE instruction. If the instruction is a FLUSH, the process <b>520</b> terminates. If the instruction is a FLUSH and INVALIDATE instruction, the process <b>520</b> proceeds to process block <b>534</b>, where it invalidates the data in the corresponding cache segment beginning at the starting address specified. In one embodiment, this is performed by setting the invalid bit corresponding to each cache line in the cache segment. The process <b>520</b> then terminates.</p>\n<p num=\"p-0035\">The use of the present invention thus enhances system performance by providing an invalidate instruction and/or a flush instruction for invalidating and/or flushing data in any predetermined portion of the cache memory. For cases where consistency between the cache and main memory are maintained by software, system performance is enhanced, since flushing only the affected portions of cache is more efficient and flexible than flushing the entire cache. In addition, system performance is enhanced by having a flushing and/or invalidate operation that has a granularity that is larger than a cache line size, since the user can flush and/or invalidate a memory region using a single instruction instead of having to alter the code, as the computer system changes the size of a cache line.</p>\n<p num=\"p-0036\">While a preferred embodiment has been described, it is to understood that the invention is not limited to such use. In addition, while the invention has been described in terms of several embodiments, those skilled in the art will recognize that the invention is not limited to the embodiments described. The method and apparatus of the invention can be practiced with modification and alteration within the spirit and scope of the appended claims. The description is thus to be regarded as illustrative instead of limiting on the invention.</p>\n<?DETDESC description=\"Detailed Description\" end=\"tail\"?>\n</description>"}], "inventors": [{"first_name": "Lance", "last_name": "Hacking", "name": ""}, {"first_name": "Shreekant", "last_name": "Thakkar", "name": ""}, {"first_name": "Thomas", "last_name": "Huff", "name": ""}, {"first_name": "Vladimir", "last_name": "Pentkovski", "name": ""}, {"first_name": "Hsien-Cheng E.", "last_name": "Hsieh", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "INTEL CORPORATION"}, {"first_name": "", "last_name": "INTEL CORPORATION", "name": ""}], "ipc_classes": [{"primary": true, "label": "G06F  12/08"}], "locarno_classes": [], "ipcr_classes": [{"label": "G06F  12/08        20060101A I20051008RMDE"}], "national_classes": [{"primary": true, "label": "711214"}, {"primary": false, "label": "711E1204"}, {"primary": false, "label": "711145"}, {"primary": false, "label": "711135"}, {"primary": false, "label": "711133"}, {"primary": false, "label": "711E12022"}, {"primary": false, "label": "711144"}, {"primary": false, "label": "711159"}], "ecla_classes": [{"label": "G06F  12/08B20"}, {"label": "G06F  12/08B2"}], "cpc_classes": [{"label": "G06F  12/0891"}, {"label": "G06F  12/0804"}, {"label": "G06F  12/0891"}, {"label": "G06F  12/0804"}], "f_term_classes": [], "legal_status": "Expired - Fee Related", "priority_date": "1998-07-24", "application_date": "1998-07-24", "family_members": [{"ucid": "DE-19934515-A1", "titles": [{"lang": "EN", "text": "Computer system for conducting cache-segment flush invalidation operations"}, {"lang": "DE", "text": "Verfahren und Einrichtung zum Durchf\u00fchren von Cache-Segment-Flush- und Cache-Segment-Invalidier-Operationen"}]}, {"ucid": "US-6978357-B1", "titles": [{"lang": "EN", "text": "Method and apparatus for performing cache segment flush and cache segment invalidation operations"}]}, {"ucid": "SG-85645-A1", "titles": [{"lang": "EN", "text": "A METHOD AND APPARATUS FOR PERFORMING CACHE SEGMENT FLUSH AND CACHE SEGMENT INVALIDATION OPERATIONS"}]}, {"ucid": "GB-9916637-D0", "titles": [{"lang": "EN", "text": "Method and apparatus for performing cache segment flush and cache segment invalidation operations"}]}, {"ucid": "GB-2343029-A", "titles": [{"lang": "EN", "text": "Invalidating and flushing a predetermined area of cache memory"}]}, {"ucid": "HK-1040439-A1", "titles": [{"lang": "EN", "text": "A METHOD AND APPARATUS FOR PERFORMING CACHE SEGMENT FLUSH OPERATIONS"}]}, {"ucid": "HK-1040439-B", "titles": [{"lang": "ZH", "text": "\u57f7\u884c\u7de9\u885d\u5b58\u5132\u90e8\u4efd\u9ad8\u901f\u64cd\u4f5c\u65b9\u6cd5\u53ca\u5100\u5668"}, {"lang": "EN", "text": "A METHOD AND APPARATUS FOR PERFORMING CACHE SEGMENT FLUSH OPERATIONS"}]}, {"ucid": "HK-1028652-A1", "titles": [{"lang": "EN", "text": "METHOD AND APPARATUS FOR PERFORMING CACHE SEGMENT FLUSH AND CACHE SEGMENT INVALIDATION OPERATIONS"}]}, {"ucid": "GB-2343029-B", "titles": [{"lang": "EN", "text": "Method and apparatus for performing cache segment flush and cache segment invalidation operations"}]}]}