{"patent_number": "US-4268907-A", "publication_id": 68922805, "family_id": 21714186, "publication_date": "1981-05-19", "titles": [{"lang": "EN", "text": "Cache unit bypass apparatus"}], "abstracts": [{"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"docdb\" mxw-id=\"PA9316514\" source=\"translation\"><p>A cache unit includes a cache store organized into a number of levels to provide a fast access to instructions and data words. Directory circuits, associated with the cache store, contain address information identifying those instructions and data words stored in the cache store. The cache unit has at least one instruction register for storing address and level signals for specifying the location of the next instruction to be fetched and transferred to the processing unit. Replacement circuits are included which, during normal operation, assign cache locations sequentially for replacing old information with new information. The cache unit further includes apparatus operative in response to a first predetermined type of command specifying the fetching of data words to set an indicator flag to a predetermined state. The apparatus conditions the replacement circuits in response to each subsequent predetermined type of command to bypass storage of the subsequently fetched data words when the indicator flag is in the predetermined state preventing the replacement of extensive numbers of data and instruction words already stored in cache during the execution of the instruction.</p></abstract>"}, {"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA36273467\"><p>A cache unit includes a cache store organized into a number of levels to provide a fast access to instructions and data words. Directory circuits, associated with the cache store, contain address information identifying those instructions and data words stored in the cache store. The cache unit has at least one instruction register for storing address and level signals for specifying the location of the next instruction to be fetched and transferred to the processing unit. Replacement circuits are included which, during normal operation, assign cache locations sequentially for replacing old information with new information. The cache unit further includes apparatus operative in response to a first predetermined type of command specifying the fetching of data words to set an indicator flag to a predetermined state. The apparatus conditions the replacement circuits in response to each subsequent predetermined type of command to bypass storage of the subsequently fetched data words when the indicator flag is in the predetermined state preventing the replacement of extensive numbers of data and instruction words already stored in cache during the execution of the instruction.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"1\"><claim-text>1. A data processing system comprising:<claim-text>an addressable main store having a plurality of word locations for storing information including data and instructions;</claim-text><claim-text>a cache unit coupled to said main store for providing immediate access to data and instruction words fetched from said main store, said cache unit including a buffer store having a plurality of addressable locations, and said cache unit including control means for fetching said data and instruction words from said main store in response to command signals; and,</claim-text><claim-text>processing means coupled to said buffer store, said processing means for processing instructions fetched from said main store, each instruction including an operation code portion, said processing means including control means for generating signals including memory commands required for the execution of said instructions, said processing control means including decoder circuit means responsive to signals indicative of an operation code portion coded to specify a predetermined class of instruction to generate coded command signals specifying the fetching of a segment of data words from said cache unit; and,</claim-text><claim-text>said cache unit further including:<claim-text>decoder circuit means coupled to said processing means;</claim-text><claim-text>indicator circuit means coupled to said decoder circuit means, said cache decoder circuit means in response to a first set of said coded command signals to switch said indicator circuit means to a predetermined state; and,</claim-text><claim-text>bistable control means coupled to said indicator means and to said cache decoder circuit means, said bistable control means being conditioned by said cache decoder circuit means in response to a succeeding set of coded command signals to switch to said predetermined state when said segment of data words is not stored in said buffer store and said indicator circuit means is in said predetermined state for inhibiting other segments of data words fetched from said main store in response to said predetermined class of instruction from being stored in said buffer store.</claim-text></claim-text></claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"2\"><claim-text>2. The system of claim 1 wherein each instruction further includes a number of address portions and wherein said main store is organized into a plurality of sets of blocks of word locations, said processing control means being operative to generate memory command signals accompanying said command signals, said coded memory command signals including a command code specifying the type of main store read operation and an address generated from one of said address portions specifying the data word to be fetched from said cache unit and said processing decoder circuit means including circuit means operative to generate signals corresponding to said command code coded to specify the fetching of a block of data words corresponding to said segment including said data word specified by said command address from said main store.</claim-text></claim>"}, {"num": 3, "parent": 2, "type": "dependent", "paragraph_markup": "<claim num=\"3\"><claim-text>3. The system of claim 2 wherein said processing control means further includes means operative to generate a number of sets of said coded command signals in response to said operation code portion, each set specifying the fetching of said block of data words.</claim-text></claim>"}, {"num": 4, "parent": 3, "type": "dependent", "paragraph_markup": "<claim num=\"4\"><claim-text>4. The system of claim 3, wherein said number of sets of said coded command signals varies in accordance with the number of data words defining a pair of data strings specified by first and second ones of said number of address portions to be operated upon as specified by said operation code portion.</claim-text></claim>"}, {"num": 5, "parent": 4, "type": "dependent", "paragraph_markup": "<claim num=\"5\"><claim-text>5. The system of claim 4 wherein said operation code portion is coded to specify a move operation.</claim-text></claim>"}, {"num": 6, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"6\"><claim-text>6. The system of claim 1 wherein said buffer store comprises a plurality of word locations organized into a plurality of levels, each for storing a number of blocks of words of said information and said cache unit further includes:<claim-text>a directory for storing block addresses identifying the blocks of words stored within said buffer store levels, said directory including a plurality of locations, each of said locations including a plurality of bit positions for storing level assignment signals identifying a next level within said buffer store into which new information fetched from said main store is to be placed; and,</claim-text><claim-text>replacement circuit means for generating said level assignment signals in a predetermined pattern, said replacement circuit means being coupled to said directory and to said bistable control means, said directory being conditioned by said bistable control means when in said predetermined state to prevent assigning the level specified by said level assignment signals.</claim-text></claim-text></claim>"}, {"num": 7, "parent": 6, "type": "dependent", "paragraph_markup": "<claim num=\"7\"><claim-text>7. The system of claim 6 wherein said cache unit further includes:<claim-text>comparison means coupled to said directory and to said processing means for comparing said block addresses read from said directory with the high order portion of said command address and generating a hit-miss signal indicative of whether or not the data word being requested is stored in said buffer store; and,</claim-text><claim-text>gating means coupled to said comparison means, said indicator circuit means, said cache decoder circuit means and to said bistable control means, said gating means logically combining said hit-miss signal with signals from said indicator circuit means and said cache decoder circuit means for conditioning said bistable control means to switch to said predetermined state.</claim-text></claim-text></claim>"}, {"num": 8, "parent": 6, "type": "dependent", "paragraph_markup": "<claim num=\"8\"><claim-text>8. The system of claim 6 wherein said cache unit further includes:<claim-text>an address register including a number of bit positions for storing an address of a next data word to be accessed by said processing means;</claim-text><claim-text>a data buffer coupled to said main store, said buffer comprising a plurality of addressable locations for storing a segment of data consisting of a number of data words, each location for storing a data word and an indicator signal for designating when said word had been stored therein; and,</claim-text><claim-text>compare circuit means coupled to said address register and to said data buffer, said compare circuit means for enabling the transfer of requested data words to said processing means upon detecting that the data word specified by the address contents of said address register has been received from said main store and is being written into one of said data buffer locations.</claim-text></claim-text></claim>"}, {"num": 9, "parent": 6, "type": "dependent", "paragraph_markup": "<claim num=\"9\"><claim-text>9. The system of claim 6 wherein said replacement circuit means includes:<claim-text>a register coupled to said directory for storing said level assignment signals read out therefrom; and,</claim-text><claim-text>increment circuit means for generating sequences of level assignment signals, said increment circuit means being coupled to said register and to said directory, said increment circuit means being operative to modify said level assignment signals by incrementing them by one skipping over the assignment of that level.</claim-text></claim-text></claim>"}, {"num": 10, "parent": 9, "type": "dependent", "paragraph_markup": "<claim num=\"10\"><claim-text>10. The system of claim 9 wherein said directory further includes a section having a plurality of addressable levels corresponding in number to said number of buffer store levels, each level including a plurality of locations for storing said block addresses, said cache unit further including:<claim-text>first decoder circuit means having a plurality of input terminals coupled to receive said level assignment signals from said register of said replacement circuit means, an enabling input terminal coupled to said bistable control means and a plurality of output terminals for applying read/write control signals to said directory levels, said first decoder circuit means being conditioned by said bistable control means when in said predetermined state from generating said read/write control signals in response to said level assignment signals inhibiting the storage of a second portion of said command address into the level designated by said level assignment signals preventing said assignment of said level.</claim-text></claim-text></claim>"}, {"num": 11, "parent": 10, "type": "dependent", "paragraph_markup": "<claim num=\"11\"><claim-text>11. The system of claim 10 wherein said cache unit further includes:<claim-text>write flag indicator means coupled to said bistable control means, said write flag indicator means for storing an indication specifying when a requested segment of data words is to be written into one of said buffer store levels; and,</claim-text><claim-text>memory write control means coupled to said buffer store and to said write flag indicator means, said write control means for generating signals for enabling said segment of data words received from said main store to be written into said one level, said bistable control means when in said predetermined state inhibiting said write flag indicator means from storing said indication for preventing said memory write control means from generating said signals for writing said segment into said buffer store level.</claim-text></claim-text></claim>"}, {"num": 12, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"12\"><claim-text>12. The system of claim 1 wherein said processing control means further includes microprogram control means including:<claim-text>an addressable address store coupled to receive signals corresponding to said operation code portion, said address store including a plurality of locations, each for storing a word including at least a first address identifying a first microinstruction of a different one of a plurality of execution sequences and an output register connected to said address store for storing the word contents of a location specified by said operation code portion; and,</claim-text><claim-text>a cycled addressable control store including a plurality of locations storing at least one microinstruction of a different one of said plurality of execution sequences required for controlling the operation of said processing means during the execution of said instructions and an output register connected to said control store and to said processing decoder circuit means, said control store output register for temporarily storing the microinstruction contents of an accessed location during a cycle of operation of said control store, one of said plurality of execution sequences including a number of microinstructions coded for conditioning said processing unit during execution of the operation specified by said operation code portion specifying said predetermined class of instruction, each of said microinstructions including a number of fields, at least one of said number of fields being used to specify cache commands and said processing decoder circuit means being coupled to said control store output register and operative in response to signals from said one field of each microinstruction read out to said control store output register containing a predetermined code to generate said coded command signals specifying said fetching of a segment of data words.</claim-text></claim-text></claim>"}, {"num": 13, "parent": 12, "type": "dependent", "paragraph_markup": "<claim num=\"13\"><claim-text>13. The system of claim 12 wherein said microprogram control means further includes branch control means coupled to a number of indicator storage circuits and coupled to said control store for conditioning said control store to branch to microinstructions within said sequence in accordance with signals corresponding to the states of said indicator storage circuits and said branch control means in response to a signal from a predetermined one of said indicator storage circuits to condition said control store to branch to a location within said control store for terminating the execution of said instruction.</claim-text></claim>"}, {"num": 14, "parent": 13, "type": "dependent", "paragraph_markup": "<claim num=\"14\"><claim-text>14. The system of claim 13 wherein said system further includes interface signalling means coupled to said predetermined one of said indicator storage circuits and to said indicator circuit means, said predetermined one of said indicator storage circuits when switched to said predetermined state conditioning said indicator circuit means to switch from said predetermined state to a reset state.</claim-text></claim>"}, {"num": 15, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"15\"><claim-text>15. A data processing system comprising:<claim-text>a main store including a plurality of word locations for storing data and instructions;</claim-text><claim-text>a processing unit coupled to said main store for processing instructions received therefrom, each instruction including an operation code, said processing unit including control means for generating signals including memory commands required for the execution of said instructions, said control means including decoder circuit means responsive to signals indicative of an operation code specifying a predetermined class of instruction to generate cache command signals coded to specify fetching a segment of data words from said main store;</claim-text><claim-text>a cache unit operatively coupled to said main store for providing said processing unit with immediate access to said data and instructions fetched from said main store, said cache unit being coupled to said processing unit and including:<claim-text>a buffer store including a plurality of addressable word locations arranged into a plurality of levels for storing said data and instructions, each level containing a number of blocks of said word locations;</claim-text><claim-text>a directory including a plurality of locations corresponding in number to the number of levels in said buffer store, each location of said directory storing block addresses identifying the blocks of words stored within a corresponding one of said buffer store levels;</claim-text></claim-text><claim-text>comparison means coupled to said directory for comparing said block addresses read from said directory with a first portion of a command address accompanying said cache command signals and generating a hit-miss detection signal indicating whether or not the data word being requested by said processing unit is stored in said buffer store;</claim-text><claim-text>detection means coupled to said directory, to said comparison means and to said processing unit, said detection means generating an output signal in response to a predetermined number of sets of said cache command signals when said hit-miss detection signal indicates a miss condition, said output signal indicating that said processing unit is executing said predetermined class of instruction; and,</claim-text><claim-text>said directory being inhibited by said output signal from storing second portions of the command addresses associated with predetermined ones of said predetermined number of sets of said cache command signals preventing a flushing of the contents of a substantial number of said plurality of locations of said buffer store with segments of data words fetched in response to said predetermined class of instruction.</claim-text></claim-text></claim>"}, {"num": 16, "parent": 15, "type": "dependent", "paragraph_markup": "<claim num=\"16\"><claim-text>16. The system of claim 15 wherein said detection means comprises:<claim-text>decoder means coupled to said processing unit;</claim-text><claim-text>indicator circuit means coupled to said decoder means, said indicator circuit means being switched from a first state to a second state by said decoder means in response to a predetermined one of said predetermined number of sets of said cache command signals; and,</claim-text><claim-text>bistable control means coupled to said indicator means, to said decoder means and to said comparison means, said bistable control means being conditioned by said decoder means in response to another one of said predetermined number of sets of cache command signals when conditioned by said hit-miss detection signal indicating said miss condition to switch from said first to said second state for generating said output signal.</claim-text></claim-text></claim>"}, {"num": 17, "parent": 16, "type": "dependent", "paragraph_markup": "<claim num=\"17\"><claim-text>17. The system of claim 16 wherein said predetermined number of said sets of said cache command signals represents replacement of the contents of a number of locations of said buffer store sufficient to accommodate short move operations.</claim-text></claim>"}, {"num": 18, "parent": 17, "type": "dependent", "paragraph_markup": "<claim num=\"18\"><claim-text>18. The system of claim 17 wherein said predetermined number is two and each set of said cache command signals is coded to specify a load quad operation.</claim-text></claim>"}, {"num": 19, "parent": 17, "type": "dependent", "paragraph_markup": "<claim num=\"19\"><claim-text>19. The system of claim 17 wherein said number of said locations provides storage for at least sixteen characters.</claim-text></claim>"}, {"num": 20, "parent": 15, "type": "dependent", "paragraph_markup": "<claim num=\"20\"><claim-text>20. The system of claim 15 wherein each instruction within said class further includes a number of address portions, said processing unit control means including means operative to generate memory command signals accompanying said cache command signals, said memory command signals including a command code specifying the type of main store read operation and said command address generated from one of said address portions specifying the data word to be fetched from said cache unit.</claim-text></claim>"}, {"num": 21, "parent": 20, "type": "dependent", "paragraph_markup": "<claim num=\"21\"><claim-text>21. The system of claim 20 wherein the number of sets of said cache command signals varies in accordance with the number of data words defining a pair of data strings specified by first and second ones of said number of address portions to be operated upon as specified by said operation code portion of said instruction.</claim-text></claim>"}, {"num": 22, "parent": 15, "type": "dependent", "paragraph_markup": "<claim num=\"22\"><claim-text>22. The system of claim 15 wherein each of said locations of said directory includes a plurality of bit positions for storing level assignment signals identifying a next level within said buffer store into which a segment of data words fetched from said main store is to be placed; and, wherein<claim-text>said cache unit further includes:<claim-text>replacement circuit means for generating said level assignment signals in a predetermined pattern, said replacement circuit means being coupled to said directory and to said detection means, said directory being conditioned by said output signal from said detection means to prevent assignment of the level specified by said level assignment signals.</claim-text></claim-text></claim-text></claim>"}, {"num": 23, "parent": 22, "type": "dependent", "paragraph_markup": "<claim num=\"23\"><claim-text>23. The system of claim 22 wherein said cache unit further includes:<claim-text>an address register including a number of bit positions for storing an address of a next data word to be accessed by said processing unit.</claim-text><claim-text>a data buffer coupled to said main store, said buffer comprising a plurality of addressable locations for storing a segment of data words, each location for storing a data word and an indicator signal for designating when a data word had been stored therein; and,</claim-text><claim-text>compare circuit means coupled to said address register and to said data buffer, said compare circuit means for enabling the transfer of requested data words to said processing means upon detecting that the data word sepcified by the address contents of said address register has been received from said main store and is being written into one of said data buffer locations.</claim-text></claim-text></claim>"}, {"num": 24, "parent": 23, "type": "dependent", "paragraph_markup": "<claim num=\"24\"><claim-text>24. The system of claim 23 wherein said cache unit further includes:<claim-text>write flag indicator means coupled to said detection means, said write flag indicator means for storing an indication specifying when a requested segment of data words is to be written into one of said buffer store levels; and,</claim-text><claim-text>memory write control means coupled to said buffer store and to said write flag indicator means, said write control means for generating signals for enabling said segment of data words received from said main store to be written into said one level, said output signal from said detection means inhibiting said write flag indicator means from storing said indication for preventing said memory write control means for generating said signals for writing said segment into said buffer store level.</claim-text></claim-text></claim>"}, {"num": 25, "parent": 15, "type": "dependent", "paragraph_markup": "<claim num=\"25\"><claim-text>25. The system of claim 15 wherein said control means further includes microprogram control means including:<claim-text>an addressable address store coupled to receive signals corresponding to said operation code, said address store including a plurality of locations, each for storing a word including at least a first address identifying a first microinstruction of a different one of a plurality of execution sequences and an output register connected to said address store for storing the word contents of a location specified by said operation code; and,</claim-text><claim-text>a cycled addressable control store including a plurality of locations storing at least one microinstruction of a different one of said plurality of execution sequences required for controlling the operation of said processing unit during the execution of said instructions and an output register connected to said control store and to said decoder circuit means, said control store output register for temporarily storing the microinstruction contents of an accessed location during a cycle of operation of said control store, one of said plurality of execution sequences including a number of microinstructions coded for conditioning said processing unit during execution of the operation specified by said operation code specifying said predetermined class of instruction, each of said microinstructions including a number of fields, at least one of said number of fields being used to specify cache commands and said processing decoder circuit means being coupled to said control store output register and operative in response to signals from said one field of each microinstruction read out from said control store containing a predetermined code to generate said coded command signals specifying said fetching of a segment of data words.</claim-text></claim-text></claim>"}, {"num": 26, "parent": 25, "type": "dependent", "paragraph_markup": "<claim num=\"26\"><claim-text>26. The system of claim 25 wherein said microprogram control means further includes branch control means coupled to a number of indicator storage circuits and coupled to said control store for conditioning said control store to branch to microinstructions within said sequence in accordance with signals corresponding to the states of said indicator storage circuits and said branch control means in response to a signal from a predetermined one of said indicator storage circuits to condition said control store to branch to a location within said control store for terminating the execution of said instruction.</claim-text></claim>"}, {"num": 27, "parent": 26, "type": "dependent", "paragraph_markup": "<claim num=\"27\"><claim-text>27. The system of claim 26 wherein said system further includes interface signalling means coupled to said predetermined one of said indicator storage circuits and to said detection means, said predetermined one of said indicator storage circuits when switched to said predetermined state conditioning said detection means for the processing of a next instruction.</claim-text></claim>"}, {"num": 28, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"28\"><claim-text>28. A data processing system comprising:<claim-text>a main store including a plurality of word locations for storing data and instruction words;</claim-text><claim-text>a cache unit operatively coupled to said main store for providing immediate access to said data and instruction words fetched from said main store in response to commands received from a processing unit including a command code and an address, said cache unit including:<claim-text>a buffer store including a plurality of addressable word locations arranged into a plurality of levels, each level containing a number of blocks of said word locations;</claim-text><claim-text>an addressable directory having a plurality of locations corresponding in number to the number of levels in said buffer store, each location of said directory storing block addresses identifying the blocks of words within a corresponding one of said buffer store levels;</claim-text><claim-text>comparison means coupled to said directory for comparing said block addresses read from said directory in response to said address of each of said commands and generating a hit-miss detection signal indicating whether or not the data word being requested is stored in said buffer store; and,</claim-text></claim-text><claim-text>said processing unit for processing instructions received from said main store, each instruction including an operation code, said processing unit being coupled to said cache unit for transferring and receiving information to and from said cache unit during the execution of said instructions, said processing unit including:</claim-text><claim-text>control means for generating signals including cache command signals and said memory commands required for the execution of said instructions, said control means including:<claim-text>a plurality of registers for storing instructions received from said cache unit to be processed;</claim-text><claim-text>means coupled to at least one of said plurality of registers for receiving signals corresponding to said operation code and for generating output signals indicative of the class of instruction to be processed in response to said operation code signals; and,</claim-text><claim-text>hardware control decoder circuit means coupled to said cache unit for generating said cache command signals and signals for specifying said memory commands in accordance with said output signals from said means coupled to said one register, said hardware control decoder circuit means being conditioned by output signals from said means coupled to said one register indicating that an instruction stored in one of said plurality of registers is of a predetermined class to generate said cache command signals coded to specify a load quad buffer store operation together with said memory command signals and</claim-text></claim-text><claim-text>said cache unit further including:<claim-text>bypass detection means coupled to said directory, to said comparison means and to said processing unit, said bypass detection means generating an output signal upon detecting receipt of a predetermined number of sets of said cache command signals when said hit-miss detection signal indicates a miss condition, said output signal indicating that said processing unit is executing said predetermined class of instruction; and,</claim-text><claim-text>said directory being inhibited by said output signal from storing second portions of the command addresses associated with predetermined ones of said predetermined number of sets of said cache command signals preventing a flushing of the contents of a substantial number of said plurality of locations of said buffer store with segments of data words fetched in response to said predetermined class of instruction.</claim-text></claim-text></claim-text></claim>"}, {"num": 29, "parent": 28, "type": "dependent", "paragraph_markup": "<claim num=\"29\"><claim-text>29. The system of claim 28 wherein said bypass detection means comprises:<claim-text>decoder means coupled to said processing unit;</claim-text><claim-text>indicator circuit means coupled to said decoder means, said indicator circuit means being switched from a first state to a second state by said decoder means in response to a predetermined one of said predetermined number of sets of said cache command signals; and,</claim-text><claim-text>bistable control means coupled to said indicator means, to said decoder means and to said comparison means, said bistable control means being conditioned by said decoder means in response to another one of said predetermined number of sets of cache command signals when conditioned by said hit-miss detection signal indicative of a miss condition to switch from said first to said second state for generating said output signal.</claim-text></claim-text></claim>"}, {"num": 30, "parent": 28, "type": "dependent", "paragraph_markup": "<claim num=\"30\"><claim-text>30. The system of claim 28 wherein said predetermined number of said sets of said cache command signals represents replacement of the contents of a number of locations of said buffer store sufficient to accommodate short move operations.</claim-text></claim>"}, {"num": 31, "parent": 28, "type": "dependent", "paragraph_markup": "<claim num=\"31\"><claim-text>31. The system of claim 28 wherein each instruction includes a number of addresses and wherein the number of sets of said cache command signals specifying load quad buffer operations varies in accordance with the number of data words defining a pair of data strings specified by first and second ones of said number of addresses to be operated upon as specified by said operation code.</claim-text></claim>"}, {"num": 32, "parent": 31, "type": "dependent", "paragraph_markup": "<claim num=\"32\"><claim-text>32. The system of claim 31 wherein said operation code is coded to specify a move operation.</claim-text></claim>"}, {"num": 33, "parent": 28, "type": "dependent", "paragraph_markup": "<claim num=\"33\"><claim-text>33. The system of claim 28 wherein each of said locations of said directory include a plurality of bit positions for storing level assignment signals identifying a next level within said buffer store into which a segment of data words fetched from said main store is to be placed; and,<claim-text>replacement circuit means for generating said level assignment signals in a predetermined pattern, said replacement circuit means being coupled to said directory and to said bypass detection means, said directory being conditioned by said output signal to prevent assigning the level specified by said level assignment signals.</claim-text></claim-text></claim>"}, {"num": 34, "parent": 28, "type": "dependent", "paragraph_markup": "<claim num=\"34\"><claim-text>34. The system of claim 28 wherein said cache unit further includes:<claim-text>an address register including a number of bit positions for storing an address of a next data word to be accessed by said processing unit;</claim-text><claim-text>a data buffer coupled to said main store, said buffer comprising a plurality of addressable locations for storing a segment of data consisting of a number of data words, each location for storing a data word and an indicator signal for designating when said word has been stored therein; and,</claim-text><claim-text>compare circuit means coupled to said address register and to said data buffer, said compare circuit means for enabling the transfer of requested data words to said processing unit upon detecting that the data word specified by the address contents of said address register has been received from said main store and is being written into one of said data buffer locations.</claim-text></claim-text></claim>"}, {"num": 35, "parent": 34, "type": "dependent", "paragraph_markup": "<claim num=\"35\"><claim-text>35. The system of claim 34 wherein said cache unit further includes:<claim-text>write flag indicator means coupled to said bypass detection means, said write flag indicator means for storing an indication specifying when a requested segment of data words is to be written into one of said buffer store levels; and,</claim-text><claim-text>memory write control means coupled to said buffer store and to said write flag indicator means, said write control means for generating signals for enabling said segment of data words received from said main store to be written into said one level, said output signal from said detection means inhibiting said write flag indicator means for storing said indication for preventing said memory write control means from generating said signals for writing said segment into said buffer store level.</claim-text></claim-text></claim>"}, {"num": 36, "parent": 28, "type": "dependent", "paragraph_markup": "<claim num=\"36\"><claim-text>36. The system of claim 28 wherein said means coupled to said one register further includes microprogram control means including:<claim-text>an addressable address store coupled to receive signals corresponding to said operation code, said address store including a plurality of locations, each for storing a word including at least a first address identifying a first microinstruction of a different one of a plurality of execution sequences and an output register connected to said address store for storing the word contents of a location specified by said operation code; and,</claim-text><claim-text>a cycled addressable control store including a plurality of locations storing at least one microinstruction of a different one of said plurality of execution sequences required for controlling the operation of said processing unit during the execution of said instructions and an output register connected to said control store, said control store output register for temporarily storing tthe microinstruction contents of an accessed location during a cycle of operation of said control store, one of said plurality of execution sequences including a number of microinstructions coded for conditioning said processing unit during execution of the operation specified by said operation code specifying said predetermined class of instruction, each of said microinstructions including a number of fields, at least one of said number of fields being used to specify cache commands and said hardware control decoder circuit means being coupled to said control store output register and to said address store output register, said hardware control decoder circuit means being operative in response to signals from said word contents of said location specified by said operation code and said one field of each microinstruction read out from said control store containing a predetermined code to generate said cache command signals coded for specifying said load quad operations.</claim-text></claim-text></claim>"}, {"num": 37, "parent": 36, "type": "dependent", "paragraph_markup": "<claim num=\"37\"><claim-text>37. The system of claim 36 wherein said microprogram control means further includes branch control means coupled to a number of indicator storage circuits and coupled to said control store for conditioning said control store to branch to microinstructions within said sequence in accordance with signals corresponding to the states of said indicator storage circuits and said branch control means in response to a signal from a predetermined one of said indicator storage circuits to condition said control store to branch to a location within said control store for terminating the execution of said instruction.</claim-text></claim>"}, {"num": 38, "parent": 37, "type": "dependent", "paragraph_markup": "<claim num=\"38\"><claim-text>38. The system of claim 37 wherein said system further includes interface signalling means coupled to said predetermined one of said indicator storage circuits and to said indicator circuit means, said predetermined one of said indicator storage circuits when switched to said predetermined state conditioning said bypass detection circuit means for processing a next instruction.</claim-text></claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES316674231\"><?BRFSUM description=\"Brief Summary\" end=\"lead\"?><h4>REFERENCED APPLICATIONS</h4><p>1. \"Instruction Buffer Apparatus of a Cache Unit\" invented by Marion G. Porter and Rober W. Norman, Jr. Ser. No. 968,050, filed on Dec. 11, 1978 and assigned to the same assignee as named herein.</p><p>2. \"A Cache Arrangement for Performing Simultaneous Read/Write Operations\" invented by Marion G. Porter, William A. Shelly and Robert W. Norman, Jr., Ser. No. 968,521, filed on Dec. 11, 1978 and assigned to the same assignee as named herein.</p><p>3. \"A Cache Unit with Transit Block Buffer Apparatus\" invented by Marion G. Porter, Charles P. Ryan and William A. Shelly, Ser. No. 968,522, filed on Dec. 11, 1978 and assigned to the same assignee as named herein.</p><p>4. \"Cache Apparatus for Enabling Overlap of Instruction Fetch Operations\" invented by Marion G. Porter and Charles P. Ryan, Ser. No. 968,049, filed on Dec. 11, 1978 and assigned to the same assignee as named herein.</p><p>5. \"Command Queue Apparatus Included Within a Cache Unit for Facilitating Command Sequencing\" invented by Marion G. Porter, Ser. No. 968,311, filed on Dec. 11, 1978 and assigned to the same assignee as named herein.</p><p>6. \"A Cache Arrangement Utilizing a Split Cycle Mode of Operation\" invented by Marion G. Porter, Robert W. Norman, Jr. and William A. Shelly, Ser. No. 968,312, filed on Dec. 11, 1978 and assigned to the same assignee as named herein.</p><p>7. \"Cache Unit Information Replacement Apparatus\" invented by Marion G. Porter, Robert W. Norman, Jr. and Charles P. Ryan, Ser. No. 968,048, filed on Dec. 11, 1978 and assigned to the same assignee as named herein.</p><p>8. \"Buffer Store Including Control Apparatus which Facilitates the Concurrent Processing of a Plurality of Commands\" invented by Charles P. Ryan, Ser. No. 853,982, filed on Nov. 22, 1977 and assigned to the same assignee as named herein.</p><p>9. \"A Cache Memory Location Mechanism\" invented by Charles P. Ryan, Ser. No. 858,575, filed on Dec. 8, 1977 and assigned to the same assignee as named herein.</p><p>10. \"Data Processing System Programmable Pre-Read Capability\" invented by John E. Wilhite, William A. Shelly and Charles P. Ryan, Ser. No. 853,944, filed on Nov. 22, 1977 and assigned to the same assignee as named herein.</p><p>11. \"Buffer Store Including Control Apparatus which Facilitates the Concurrent Processing of a Plurality of Commands\" invented by Charles P. Ryan, Ser. No. 853,982, filed on Nov. 22, 1977 and assigned to the same assignee as named herein.</p><h4>BACKGROUND OF THE INVENTION</h4><p>1. Field of Use</p><p>This invention relates to cache units utilized by a processing unit and more particularly to apparatus for improving the performance of a cache unit.</p><p>2. Prior Art</p><p>In general, the cache unit provides a data processing unit with fast access to data and instructions. To do this, such unit responds to each command received from the data processing unit by fetching the requested block of data or instructions from main store. In such systems, all accessed data and instruction words from main store are written into cache except for the situations when the cache unit is placed in a bypass mode of operation. This normally occurs when the processing unit detects the existence of a fault or error condition. For further information reference may be made to U.S. application titled \"Input/Output Cache System Including Bypass Capability\" invented by Jaime Calle and Lawrence W. Chelberg, Ser. No. 755,871, filed on Dec. 30, 1976 and assigned to the same assignee as named herein. While it is possible to bypass cache under the circumstances described above, this is done under the direction and control of the data processing unit. It has been found that certain types of instructions which are used to process fields of data within main store could during normal execution cause the replacement of large segments of data words residing in cache. In such cases, this was found to be equivalent to a cache flushing operation. Recognizing that the execution time may become quite long when large data fields are involved, some processing units include apparatus for automatically interrupting such instructions as part of a mid instruction interrupt procedure. While this avoids continuous execution of one instruction, there still is extensive replacement of cache data.</p><p>Accordingly, it is a primary object of the present invention to provide an improved cache unit.</p><p>It is a further object of the present invention to provide a cache unit which prevents the replacement of data which could result in a decrease in processing efficiency.</p><h4>SUMMARY OF THE INVENTION</h4><p>The above objects are achieved in a preferred embodiment of the present invention which comprises a cache system coupled between a data processing unit and a main store. The cache system includes a cache store having a plurality of levels for storing blocks of data and instruction words, a directory for storing addresses identifying which blocks reside in cache store and control apparatus operative in response to commands received from the data processing unit to make the requests from main store after searching the directory and detecting that the requested data does not reside in the cache store. The control apparatus includes decoder circuits which are operative upon detecting a predetermined type of command to generate signals for switching a control flag indicator to a predetermined state.</p><p>The control apparatus in response to a next command of the same type is operative to switch a further control bistable element to the predetermined state when the control flag indicator is in the predetermined state and the data being requested is not stored in the cache store. The further control bistable element when in the predetermined state is operative to condition the directory from assigning further blocks of locations in the cache store for replacing the data words stored therein with the blocks of data words requested by each of following predetermined types of commands generated by the processing unit during its execution of a particular type of program instruction.</p><p>Such instructions include move type instructions which involve moving strings of data characters from one segment of main store to another segment. It has been found that where a limited number of data characters are moved, there is a high probability that the same area of main store will be again accessed. However, where the number of data characters is large, there is a low probability that the same area of main store is accessed again. Accordingly, the arrangement of the preferred embodiment of the present invention by providing for the storage of an initial portion of the data words, which corresponds to a half block within the cache store, enables the data processing unit to have fast access to those characters when the move is short. In the preferred embodiment, the half block consists of 4 words, each word having 4 data characters or bytes. Since most of the move operations which are short involve an average of nine to twelve characters, all of the data characters subsequently accessed by the processing unit from main store reside in cache store. However, when the move operation involves more than sixteen characters, the remaining data characters are automatically prevented from being stored in cache. That is, the cache store is bypassed and the data characters are loaded directly into a quad word data buffer. From there, they are transferred to the data processing unit. Accordingly, this prevents the replacement of segments of information most likely to be accessed with data words of a segment which most likely will not be accessed. This of course prevents any decrease in the processing unit's performance.</p><p>In the preferred embodiment, the particular type of instruction is identifiable through the particular type of command issued by the data processing unit. However, it will be appreciated that there are also other types of instructions whose execution also results in issuance of such commands. Accordingly, the arrangement of the preferred embodiment is able to process an entire class of instructions. It will be obvious that it may be desirable to vary the amount of half blocks or blocks which are stored before the cache store is bypassed. However, these and other considerations will be obvious to those skilled in the art.</p><p>The novel features which are believed to be characteristic of the invention, both as to its organization and method of operation, together with further objects and advantages will be better understood from the following description when considered in connection with the accompanying drawings. It is to be expressly understood, however, that each of the drawings is given for the purpose of illustration and description only and is not intended as a definition of the limits of the present invention.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4><p>FIG. 1 illustrates in block form a system employing the principles of the present invention.</p><p>FIG. 2 shows in block diagram form the host processor 700 and the cache unit 750 of FIG. 1.</p><p>FIGS. 3a through 3e show in greater detail, certain ones of blocks of FIG. 2.</p><p>FIG. 4 shows in block diagram form the cache unit 750 of FIG. 2.</p><p>FIG. 5 shows in greater detail, the cache processor interface 604.</p><p>FIG. 6a illustrates the format of the control store control unit of FIG. 1.</p><p>FIG. 6b illustrates the format of the microinstruction words of the execution control store of FIGS. 2 and 3b.</p><p>FIG. 6c illustrates the format of multiword instructions utilized with the apparatus of the present invention.</p><p>FIGS. 7a through 7e show in greater detail, different ones of the sections of cache unit 750.</p><p>FIG. 8 is a flow diagram used to illustrate the operation of the present invention.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>DESCRIPTION OF THE PREFERRED EMBODIMENT</h4><h4>General Description</h4><p>As seen from FIG. 1, the system which incorporates the principles of the present invention includes at least one input/output processor (IOPP) 200, a system interface unit (SIU) 100, a high-speed multiplexer (HSMX) 300, a low-speed multiplexer (LXMX) 400, a host processor 700, a cache memory 750, at least one memory module corresponding to a local memory module 500, and at least one memory module corresponding to a memory module 800. Different ones of these modules connect to one of a number of ports of the system interface unit 100 through a plurality of lines of different types of interfaces 600 through 604. More specifically, the input/output processor 200, the cache memory 750, and the high-speed multiplexer 300 connects to ports G, E and A, respectively, while the low-speed multiplexer 400, local memory module 500, and main memory module 800 connect to ports J, LMO and RMO, respectively. The host processor 700 connects to the cache memory 750.</p><h4>System Interfaces</h4><p>Before describing in detail the processor 700 and cache unit 750, constructed in accordance with principles of the present invention, each of the interfaces 600 through 604 discussed previously will now be described.</p><p>The data interface 600 is one of the interfaces which provides for exchange of information between an active module and system interface unit 100. Exchange is accomplished by controlling the logical states of various signal lines in accordance with pre-established rules implemented through a sequence of signals termed a \"dialog\".</p><p>The interface 601 is a programmable interface which provides for transfer of command information from an active module and a designated module. The transfer is accomplished by controlling the logic of states of the various signal lines in accordance with pre-established rules implemented through a sequence of signals termed a \"dialog\".</p><p>A further interface is the interrupt interface 602 which provides for interrupt processing by the input/output processor 200. That is, the interface enables the transfer of interrupt information by an active module to the SIU 100 to the input/output processor 200 for processing. Similar to the other interfaces, the transfer of interrupt requests is accomplished by controlling the logical states of the various signal lines in accordance with pre-established rules implemented through a sequence of signals termed a \"dialog\".</p><p>A next set of interface lines utilized by certain ones of the modules of FIG. 1 corresponds to the local memory interface 603. This interface provides for exchanging information between local memory 500 and the modules of the system. The exchange is accomplished by controlling logical states of the various signal interface lines in accordance with pre-established rules implemented through a dialog sequence of signals.</p><p>Memory and programmable interface commands are transferred out of the same physical data lines of the interface. The interface does not include a set of lines for processing interrupt requests and therefore the modules connected to the local memory by the SIU 100 cannot directly cause a memory interrupt.</p><p>For a more detailed description of the elements of FIG. 1 and each of the interfaces 600 through 603, reference may be made to U.S. Pat. No. 4,006,466.</p><p>The last interface 604 is an internal interface between the cache unit 750 and central processor 700 which corresponds to the cache/CPU interface lines of FIG. 5. This interface provides for exchanging information and control signals between the processor 700 and the cache unit 750. The exchange is accomplished by controlling the logical states of the various signal interface lines. The cache/CPU interface includes a plurality of data to processor lines (ZDI 0-35, P0-P3), a plurality of ZAC and write data lines (ZADO 0-23, RADO 24-35, P0-P3), a processor request signal line (DREQ-CAC), a plurality of cache command lines (DMEM 0-3), a hold cache line (HOLD-C-CU), a cancel line (CANCEL-C), a flush line (CAC-FLUSH), a read word line (RD-EVEN), a read instruction buffer line (RD-IBUF), a read double (FRD-DBLE), an odd line (FODD), a plurality of instruction lines (ZIB0-35, P0-P3), a control line (DSZ), a read I-buffer data line (RD-IBUF/ZDI), a plurality of zone bit lines (DZD 0-3), a bypass cache line (BYP-CAC), a write signal line (WRT-SGN), an instruction buffer empty line (IBUF-EMPTY), an instruction buffer ready line (IBUF-RDY), an instruction buffer full line (IBUF-FULL), a CP stop line (CP-STOP), a CP control line (DATA-RECOV), a descriptor control line (FPIM-EIS), a transfer no-go line (NO-GO) and a plurality of instruction word address lines (ZPTROUT0-1)</p><p>Instructions, cache commands and data are forwarded to the cache unit 750 via different ones of these lines. Additionally, the operation of the processor 700 is enabled or disabled by certain ones of these lines as explained herein. The description of the CPU/cache interface lines are given in greater detail herein.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \nCPU/CACHE INTERFACE LINES                                                 \nDesignation       Description                                             \n______________________________________                                    \nDREQ-CAC   This line extends from processor 700                           \n           to cache unit 750. When the DREQ-CAC                           \n           line is set to a binary ONE, a ZAC                             \n           command is transferred to cache 750.                           \n           In the case of a write ZAC command,                            \n           write data words are transferred in                            \n           the one or two cycles following the                            \n           ZAC command and data words are sent                            \n           from the processor 700 through the                             \n           cache 750 without modification, to the                         \n           SIU 100.                                                       \nDMEM 0,1,2,3                                                              \n           These lines extend from the processor                          \n           700 to cache 750. These lines are                              \n           coded to designate the command that                            \n           the cache 750 is to execute. The                               \n           coding is as follows:                                          \n           DMEM = 0000 no op No action is taken                           \n           and no cache request is generated.                             \n           DMEM = 0001 Direct The direct command                          \n           enables the processor 700 to per-                              \n           form a direct transfer of an operand                           \n           value without action on the part of                            \n           the cache 750. Hence, no cache                                 \n           request is generated by this type of                           \n           command.                                                       \n           DMEM = 0010 - Address Wraparound                               \n           Command (ADD-WRAP) The address wrap-                           \n           around command is executed to return                           \n           the command given to cache 750 by pro-                         \n           cessor 700. On the same cycle,                                 \n           the command is given to processor 700                          \n           via the ZDI lines 0-35.                                        \n           DMEM = 0100 - Load Instruction Buffer                          \n           Instruction Fetch 1 (LD-IBUF-IF1) The                          \n           load instruction buffer command is                             \n           used to load the address of the                                \n           next block of instructions into the                            \n           alternate instruction register RICA/                           \n           RICB.                                                          \n           There are three possible sequences of                          \n           operation for this command.                                    \n         1.  In the case of a cache hit when                              \n             the cache 750 is not being by-                               \n             passed, the block address and                                \n             level stored in the cache 750 are                            \n             loaded into the alternate instruc-                           \n             tion register. A cache access is                             \n             made to fetch the desired instruc-                           \n             tion which is transferred to pro-                            \n             cessor 700 via the ZDI lines 0-35                            \n             on the subsequent T clock pulse.                             \n             The alternate instruction register                           \n             now becomes the current instruc-                             \n             tion register.                                               \n         2.  In the case of a cache miss when                             \n             the cache 750 is not being bypassed,                         \n             the block address and the level                              \n             designated by the round robin cir-                           \n             cuits are loaded into the alternate                          \n             instruction register. The processor                          \n             is turned off or held on the subse-                          \n             quent T clock pulse to determine                             \n             whether the generation of the IF1                            \n             command is in response to a trans-                           \n             fer instruction. If it is and the                            \n             transfer is a NO-GO, the current                             \n             instruction register is used to                              \n             access the next instuction and                               \n             the processor 700 is turned on. If                           \n             the IF1 command is caused by a                               \n             transfer instruction which is a                              \n             GO, then cache 750 sends a memory                            \n             request to SIU 100 for the desired                           \n             block of instructions and a                                  \n             directory assignment is made for the                         \n             missing block. The instructions re-                          \n             ceived from memory are first written                         \n             into the instruction buffer and then                         \n             into cache. The requested instruc-                           \n             tion is transferred to processor                             \n             700 via the ZDI lines and the pro-                           \n             cessor 700 is turned on or released                          \n             on the subsequent T clock pulse. - The remaining             \n             instructions of the                                          \n             block are transferred to processor                           \n             700 from the instruction buffer                              \n             via the ZIB lines.                                           \n         3.  When the cache is to be bypassed                             \n             and there is a hit, the full-empty                           \n             bit for that block is reset. All                             \n             other operations are the same as                             \n             in the cache miss case, except                               \n             that no directory assignment is                              \n             made and the block is not written                            \n             into cache.                                                  \n         DMEM = 0101 - Load Instruction Buffer                            \n         Instruction Fetch 2 (LD-IBUF-IF2) The                            \n         load instruction buffer command is used                          \n         to load the level of the second block                            \n         of instructions into the current in-                             \n         struction register. The processor 700                            \n         is not turned off in the case of a miss                          \n         condition. There are also three                                  \n         possible sequences of operation for                              \n         this command. -                                                  \n           1.    In the case of a cache hit condi-                        \n           tion and no bypass, the level of                               \n           the second block of instructions                               \n           is loaded into the current instruc-                            \n           tion register.                                                 \n         2.                                                               \n           In the case of a cache miss                                    \n           condition and no bypass, when                                  \n           the IF1 command was found to be                                \n           the result of a transfer in-                                   \n           struction NO-GO condition,                                     \n           the IF1 operation is cancelled.                                \n           In the case of other than a                                    \n           NO-GO condition, a directory                                   \n           assignment is made for                                         \n           the second block of instructions                               \n           and the level obtained from the                                \n           round robin circuits are written                               \n           into the current instruction regis-                            \n           ter. Cache 750 sends a memory                                  \n           request to memory for the block                                \n           and when the instructions are re-                              \n           ceived they are first written                                  \n           into the instruction buffer and                                \n           later into cache 750. When the                                 \n           instructions are needed, they are                              \n           read out from the instruction                                  \n           buffer and transferred to pro-                                 \n           cessor 700 via the ZIB lines 0-35.                             \n         3.                                                               \n           In the case of a bypass, when                                  \n           there is a hit condition, the full-                            \n           empty bit for that block is reset.                             \n           All other operations are the same                              \n           as in the case of a cache miss ex-                             \n           cept that there is no directory                                \n           assignment and the block is not                                \n           written into cache 750.                                        \n         DMEM = 0110 - Load Quad The load                                 \n         quad command is used to load the block                           \n         address for data (not instructions)                              \n         into the alternate instruction regis-                            \n         ter. It is similar to the IF2 except                             \n         that the address and level (round                                \n         robin circuits provide level when a                              \n         cache miss condition) are written                                \n         into the alternate instruction regis-                            \n         ter. When the data is not in cache                               \n         750 and processor 700 requests it                                \n         before it is received from memory,                               \n         the processor 700 is held or stopped                             \n         until the data is received.                                      \n         DMEM = 0111 - Pre-read (PR-RD) The                               \n         pre-read command is used to load cache                           \n         750 with data which the processor 700                            \n         expects to use in the near future.                               \n         The three possible sequences of opera-                           \n         tion are as follows:                                             \n         1.  For a cache hit and no bypass,                               \n             the pre-read command is executed                             \n             as a no-op.                                                  \n         2.  For a cache miss and no bypass,                              \n             the cache 750 generates a memory                             \n             request for the block and a                                  \n             directory assignment is made for                             \n             the missing block. When the data                             \n             is received from memory, it is                               \n             written into cache. The processor                            \n             700 is not held for this condition.                          \n         3.  For a cache bypass, the pre-read                             \n             command is treated as a no-op.                               \n         DMEM = 1000 - Read Single (RD-SNG)                               \n         The read single command is used to                               \n         transfer a single data word to pro-                              \n         cessor 700. There are four possible                              \n         sequences of operation for this                                  \n         command. -                                                       \n           1.    In the case of a cache hit and no                        \n           bypass, the addressed word is                                  \n           read from cache 750 and trans-                                 \n           ferred to processor 700 on the                                 \n           next T clock pulse via the ZDI                                 \n           lines 0-35.                                                    \n         2.                                                               \n           In the case of a cache miss and                                \n           no bypass, the processor 700 is                                \n           stopped and missing block is                                   \n           assigned in the directory. Cache                               \n           750 transfers the memory request                               \n           to main memory. The data words                                 \n           are written into cache as they are                             \n           received. When the requested                                   \n           data word is received, processor                               \n           700 is turned on upon the                                      \n           occurrence of the subsequent T                                 \n           clock pulse.                                                   \n         3.                                                               \n           In the case of a cache hit and                                 \n           bypass, the full-empty bit of the                              \n           addressed block is reset and the                               \n           processor 700 is turned off or held.                           \n           The cache 750 transfers the re-                                \n           quest for one word to memory and                               \n           the processor 700 is turned on upon                            \n           the subsequent T clock pulse                                   \n           following receipt of the requested                             \n           data word. The data word is not                                \n           written into cache 750.                                        \n         4.                                                               \n           For a cache miss and bypass, the                               \n           same operations take place as in                               \n           the cache hit and bypass case                                  \n           with the exception that the full-                              \n           empty bit of the addressed block                               \n           is not changed.                                                \n         DMEM = 1001 - Read Clear (RD-CLR)                                \n         The read clear command is used to                                \n         transfer a data word from memory into                            \n         processor 700 and also clear it out.                             \n         There are two possible sequences of                              \n         operation for this command.                                      \n         1.  For a cache hit, the full-empty                              \n             bit for that block is reset and                              \n             processor 700 is turned off. The                             \n             cache 750 makes a memory request                             \n             for one data word. The memory                                \n             clears the location. When the                                \n             word is received, the cache 750                              \n             transfers the word to processor                              \n             700 and turns on the processor 700                           \n             on the next T clock pulse. The word                          \n             is not written into cache 750.                               \n         2.  For a cache miss, the same opera-                            \n             tions take place as in the cache                             \n             hit with the exception of no                                 \n             change in full-empty bits of the                             \n             addressed block.                                             \n         DMEM = 1010 - Read Double (RD-DBL)                               \n         The read double command is used to                               \n         transfer two data words to processor                             \n         700. There are two types of read                                 \n         double commands which differ in the                              \n         order in which the data words are                                \n         given to processor 700. When line                                \n         DSZ1 is a binary ZERO, the order is                              \n         odd word and even word. When line                                \n         DSZ1 is a binary ONE, the order is                               \n         even word and then odd word. There                               \n         are four possible sequences of opera-                            \n         tion for this command.                                           \n         1.  For a cache hit and no bypass, the                           \n             first word is transferred to pro-                            \n             cessor 700 on the subsequent T                               \n             clock pulse via the ZDI lines 0-35.                          \n             On the next T clock pulse, the                               \n             second data word is transferred to                           \n             processor 700 via the ZDI lines                              \n             0-35.                                                        \n         2.  For a cache miss and no bypass, the                          \n             processor 700 is turned off and a                            \n             directory assignment is made for                             \n             the block containing the addressed                           \n             word pair. The cache 750 transfers                           \n             the memory request to SIU 100 for                            \n             the block. As the data words                                 \n             are received they are written                                \n             into cache. When the requested                               \n             word pair is available, the first                            \n             word is transferred to processor                             \n             700 and it is turned on or re-                               \n             leased on the subsequent T clock                             \n             pulse. The cache 750 transfers                               \n             the second word to processor 700                             \n             on the next T clock pulse.                                   \n         3.  For a cache hit and bypass, the                              \n             full-empty bit of the addressed                              \n             block is reset and processor 700                             \n             is turned off. The cache 750                                 \n             transfers the request to memory                              \n             for the two data words. As                                   \n             soon as the two words are available,                         \n             the processor 700 is turned on                               \n             and the first data word is trans-                            \n             ferred to it on the subsequent                               \n             T clock pulse. The processor 700                             \n             receives the second data word on                             \n             the next T clock pulse. The data                             \n             words are not written into cache.                            \n         4.  For a cache miss and bypass, the                             \n             same operations take place as in                             \n             the case of the cache hit and by-                            \n             pass, except that there is no                                \n             change in full-empty bits.                                   \n         DMEM = 1011 - Read Remote (RD-RMT)                               \n         The read remote command is used to                               \n         circumvent normal cache read actions.                            \n         When the command is received, pro-                               \n         cessor 700 is turned off and the re-                             \n         quest is transferred to the main                                 \n         memory. When the requested word                                  \n         pair has been fetched from memory, the                           \n         first word is given to processor                                 \n         700 and it is turned on the subse-                               \n         quent T clock pulse. The second data                             \n         word is transferred to processor 700                             \n         on the next T clock pulse. The order                             \n         in which the data words are trans-                               \n         ferred is even word and then odd word.                           \n         No changes are made within cache                                 \n         750.                                                             \n         DMEM = 1100 - Write Single (WRT-SNG)                             \n         The write single command is used to                              \n         write data into memory. There are two                            \n         possible sequences of operation for                              \n         this command.                                                    \n         1.  For a cache hit, the cache 750                               \n             transfers the request to memory.                             \n             When it is accepted the data word                            \n             is transferred to memory. The                                \n             data word is also written into                               \n             cache 750.                                                   \n         2.  For a cache miss, the same opera-                            \n             tions take place as the cache hit                            \n             except that no change is made to                             \n             the cache 750.                                               \n         DMEM = 1110 - Write Double (WRT-DBL)                             \n         The write double command is used to                              \n         write two data words into memory.                                \n         This command is carried out in a                                 \n         manner similar to the write single                               \n         command except that two words are                                \n         transferred/written rather than one                              \n         word.                                                            \n         DMEM = 1111 - Write Remote (WRT-RMT)                             \n         The write remote command is used to                              \n         circumvent normal cache write actions                            \n         in that when the addressed words are                             \n         in cache 750, they are not updated.                              \n         The cache 750 transfers the request                              \n         to memory and when accepted, the                                 \n         two data words are transferred to                                \n         memory.                                                          \nHOLD-C-CU  This line extends from processor 700                           \n           to cache 750. When set to a binary                             \n           ONE, this control signal specifies                             \n           that the cache 750 is to assume a                              \n           HOLD state for requests or data                                \n           transfers.                                                     \nCANCEL-C   This line extends from processor 700                           \n           to cache 750. When set to a binary                             \n           ONE, this control signal indicates                             \n           that the cache 750 should abort any                            \n           processor command which is currently                           \n           being executed.                                                \nCAC-FLUSH  This line extends from processor 700                           \n           to cache 750. When set to a binary                             \n           ONE, it starts a flush of the cache                            \n           750 (i.e., the cache 750 is forced                             \n           to look empty by resetting all of the                          \n           full-empty bits).                                              \nRD-EVEN    This line extends from processor 700                           \n           to cache 750. When the cache makes                             \n           a double word request to the SIU,                              \n           the even word is saved in a special                            \n           register (REVN). When RD-EVEN line                             \n           is set to a binary ONE, the contents                           \n           of the REVN register are gated onto the                        \n           ZDI lines via the ZDIN switch.                                 \nZADO 0-23, These 40 unidirectional lines extend                           \nRADO 24-35,                                                               \n           from processor 700 to cache 750. The                           \nPO-P3      lines are used to transfer ZAC commands                        \n           and write data words to cache 750.                             \n           When the DREQ CAC line is forced to                            \n           a binary ONE, ZAC command and in the                           \n           case of a write type of command, the                           \n           write data words are transferred dur-                          \n           ing the one or two cycles following                            \n           the ZAC command. The commands en-                              \n           coded onto the DMEM lines may or may                           \n           not be the same as the ZAC command.                            \nRD-IBUF    This line extends from the processor 700                       \n           to cache 750. When set to a binary ONE,                        \n           the line indicates that processor 700                          \n           is taking the instruction from the                             \n           instruction register RIRA. In most                             \n           cases, it is used to start the fetching                        \n           of the next instruction to be loaded                           \n           into RIRA.                                                     \nDZD 0-3    These four lines extend from processor                         \n           700 to cache 750. These lines trans-                           \n           fer odd word zone bit signals for                              \n           write double commands.                                         \nBYP-CAC    This line extends from processor 700                           \n           to cache 750. When set to a binary                             \n           ONE, this line causes the cache 750 to                         \n           request data words from main memory for                        \n           read type instructions. When a cache                           \n           hit occurs, the block containing the                           \n           requested data is removed from cache 750                       \n           by resetting the full-empty bit associ-                        \n           ated therewith. For write single or                            \n           double commands, the data is written in-                       \n           to cache 750 when a cache hit occurs.                          \nWRT-SGN    This line extends from the cache 750                           \n           to processor 700. It is used to sig-                           \n           nal the processor 700 during write                             \n           commands that the cache 750 has com-                           \n           pleted the transfer of ZAC commands and                        \n           data words to the SIU 100.                                     \nFPIM-EIS   This line extends from processor 700                           \n           to cache 750. When forced to a bin-                            \n           ary ONE, it signals cache 750 that                             \n           processor 700 is issuing an IF1 command                        \n           for additional EIS descriptors.                                \nDSZ1       This line extends from the processor                           \n           750 to cache 750. The state of this                            \n           line specifies to cache 750 the order                          \n           in which words are to be sent to the                           \n           processor 700 when a read double                               \n           command is performed.                                          \nNO-GO      This line extends from processor 700 to                        \n           cache 750. When forced to a binary                             \n           ONE, it indicates that processor                               \n           700 executed a transfer                                        \n           instruction which is a NO-GO.                                  \n           This signals cache 750 that it                                 \n           should cancel the IF1 command it                               \n           received when it was a miss and                                \n           ignore the IF2 command which is                                \n           currently applied to the DMEM lines.                           \nRD-IBUF/ZDI                                                               \n           This line extends from processor                               \n           700 to cache 750. It causes the                                \n           cache 750 to access the data word                              \n           at the address contained in the                                \n           alternate instruction register and                             \n           put this data on the ZDI lines. For                            \n           an outstanding LDQUAD command, the                             \n           cache 750 holds processor 700 when                             \n           line RD-IBUF/ZDI is forced to a                                \n           binary ONE.                                                    \nFRD-DBL    This line extends from processor 700                           \n           to cache 750. This signals cache                               \n           750 in advance that the processor                              \n           700 is requesting that a read double                           \n           operation be performed.                                        \nFODD       This line extends from processor 700                           \n           to cache 750. This line is used in                             \n           conjunction with the FRD-DBLE line                             \n           to signal the order of the words                               \n           being requested. When this line is a                           \n           binary ONE, this indicates that the                            \n           order is odd followed by even.                                 \nZDI 0-35   These 40 unidirectional lines                                  \nP.sub.0, P.sub.1, P.sub.2, P.sub.3                                        \n           extend from cache 750 to processor 700.                        \n           They apply data from the cache 750                             \n           to the processor 700                                           \nZIB 0-35   These 40 unidirectional lines extend                           \nP.sub.0, P.sub.1, P.sub.2, P.sub.3                                        \n           from cache 750 to processor 700.                               \n           They apply instructions to the pro-                            \n           cessor 700.                                                    \nI BUF-EMPTY                                                               \n           This line extends from cache 750 to                            \n           processor 700. When set to a binary                            \n           ONE, this line indicates that cache                            \n           750 has transferred the last instruc-                          \n           tion from the current instruction                              \n           block.                                                         \nI BUF-RDY  This line extends from cache 750 to                            \n           processor 700. When set to a binary                            \n           ONE, the line indicates that there                             \n           is at least one instruction in the                             \n           current instruction block in cache                             \n           750. The line is set to a binary                               \n           ZERO to indicate a non-ready condition                         \n           as follows:                                                    \n         1.  Whenever the instruction address                             \n             switches from the last instruction                           \n             of an IF1 block in cache to the                              \n             first instruction of an IF2 block                            \n             not in cache and not in the                                  \n             IBUF2 buffer.                                                \n         2.  Whenever instructions are being                              \n             fetched from the IBUF1 or IBUF2                              \n             buffer and the next instruction                              \n             to be fetched is in a two word                               \n             pair which has not been received                             \n             from memory.                                                 \nI BUF-FULL This line extends from cache 750 to                            \n           processor 700. This line indicates                             \n           that there are at least four instruc-                          \n           tions in the current instruction                               \n           block or it has at least one instruc-                          \n           tion and an outstanding IF2 request.                           \nCP STOP    This line extends from cache 750                               \n           to processor 700. When forced to a                             \n           binary ONE state, the line signals                             \n           that the processor 700 is held or                              \n           required to wait or halt its operation.                        \n           In the case of a read miss condition                           \n           due to a processor command, processor                          \n           700 is held on the subsequent T clock                          \n           cycle pulse. When released, the                                \n           DATA RECOV line is forced to a binary                          \n           ONE to restrobe the affected processor                         \n           register(s). When the RDIBUF/ZDI                               \n           line is forced to a binary ONE before                          \n           the data is received from memory,                              \n           processor 700 is held prior to the                             \n           subsequent T clock pulse. When re-                             \n           released, the requested data is made                           \n           available to processor 700 on the                              \n           ZDI lines and is used on the subse-                            \n           quest T clock pulse.                                           \nDATA-RECOV This line extends from the cache 750                           \n           to processor 700. It is used to re-                            \n           strobe processor registers following                           \n           the stopping of the processor 700 in                           \n           response to the detection of a cache                           \n           miss condition or read bypass condi-                           \n           tion. At the end of the cycle in                               \n           which the DREQ CAC line is forced to                           \n           a binary ONE, the miss condition is                            \n           detected but processor 700 cannot be                           \n           stopped until after the subsequent                             \n           T clock pulse. Therefore, bad data/                            \n           instructions are strobed into the pro-                         \n           cessor registers from the ZDI/ZIB                              \n           lines. When the requested data/                                \n           instructions become available, the                             \n           DATA RECOV line is forced to a                                 \n           binary ONE to restrobe the registers                           \n           which were strobed during the last                             \n           cache request.                                                 \nZPTR-OUT 0-1                                                              \n           These two lines extend from cache                              \n           750 to processor 700. These lines                              \n           are coded to specify the two least                             \n           significant bits of the address of                             \n           the instruction contained in the                               \n           RIRA instruction register or the I                             \n           buffer.                                                        \nFEO20      This line extends from processor 700                           \n           to cache unit 750. It is used to                               \n           signal the cache unit 750 when it                              \n           had completed the execution of a                               \n           move instruction.                                              \n______________________________________                                    \n</pre><h4>General Description of Processor 700--FIG. 2</h4><p>Referring to FIG. 2, it is seen that the host processor 700 includes an execution control unit 701, a control unit 704, an execution unit 714, a character unit 720, an auxiliary arithmetic and control unit (AACU) 722, and a multiply-divide unit 728, which are interconnected as shown. Additionally, the control unit 704 has a number of interconnections to the cache unit 750 as shown.</p><p>The execution control unit 701 includes an execution control store address preparation and branch unit 701-1, and an execution control store 701-2. The store 701-2 and unit 701-1 are interconnected via buses 701-3 and 701-6 as shown.</p><p>The control unit 704 includes a control logic unit 704-1, a control store 704-2, an address preparation unit 704-3, data and address output circuits 704-4, and an XAQ register section 704-5 which interconnect as shown.</p><p>As seen from FIG. 2, the SIU interface 600 provides a number of input lines to the cache unit 750. The lines of this interface have been described in detail previously. However, in connection with the operation of cache unit 750, certain ones of these lines are specially coded as follows.</p><p>1. MITS 0-3 for Reads are coded as follows:</p><p>bits 0-1=00;</p><p>bits 2-3= Transit block buffer address containing the ZAC command for current read operation.</p><p>For Write Operation bit 0-3= Odd word zone</p><p>2. MIFS lines are coded as follows:</p><p>bit 0=0;</p><p>bit 1=0 even word pairs (words 0,1);</p><p>bit 1=1 odd word pairs (words 2,3);</p><p>bits 2-3=Transit block buffer address containing the ZAC command for the data being received.</p><p>As concerns the interface lines DFS 00-35, P0-P3, these lines convey read data to cache unit 750. The lines DTS 00-35, P0-P3 are used to transfer commands and data from cache 750 to the SIU 100.</p><p>The control unit 704 provides the necessary control for performing address preparation operations, instruction fetching/execution operations and the sequential control for various cycles of operation and/or machine states. The control is generated by logic circuits of block 704-1 and by the execution control unit 701 for the various portions of the control unit 704.</p><p>The XAQ register section 704-5 includes a number of program visible registers such as index registers, an accumulator register, and quotient register. Other program visible registers, such as the instruction counter and address registers, are included within the address preparation unit 704-3.</p><p>As seen from FIG. 2, the section 704-5 receives signals from unit 704-3 representative of the contents of the instruction counter via lines RIC 00-17. Also, lines ZRESA 00-35 apply output signals from the execution unit 714 corresponding to the results of operations performed upon various operands. The section 704-5 also receives an output signal from the auxiliary arithmetic and control unit via lines RAAU0-8.</p><p>The section 704-5 provides signals representative of the contents of one of the registers included within the section as an input to the address preparation unit 704-3. The address preparation unit 704-3 forwards the information through a switch to the execution unit 714 via the lines ZDO 0-35. Similarly, the contents of certain ones of the registers contained within section 704-5 can be transferred to the execution unit 714 via the lines ZEB 00-35. Lastly, the contents of selected ones of these registers can be transferred from section 704-5 to the multiply/divide unit 728 via the lines ZAQ 00-35.</p><p>The address preparation unit 704-3 generates addresses from the contents of various registers contained therein and applies the resultant logical, effective and/or absolute addresses for distribution to other units along the lines ASFA 00-35. The address preparation unit 704-3 receives the results of operations performed on a pair of operands by the execution unit 714 via the lines ZRESB 00-35. The unit 704-3 receives signals representative of the contents of a pair of base pointer registers from the control logic unit 701 via the lines RBASA and RBASB0-1. Outputs from the multiply/divide unit 728 are applied to the address preparation unit 704-3. Lastly, the contents of a secondary instruction register (RSIR) are applied as input to the unit 704-13 via the lines RSIR 00-35.</p><p>The data and address output circuits 704-4 generate the cache memory address signals which it applies to the cache unit 750 via the lines RAD0/ZAD0 00-35. These address signals correspond to the signals applied to one of the sets of input lines ZDI 00-35, ASFA 00-35 and ZRESB 00-35 selected by switches included within the circuits of block 704-4. These circuits will be further discussed herein in greater detail.</p><p>The control logic unit 704-1 provides data paths which have an interface with various units included within the cache unit 750. As described in greater detail herein, the lines ZIB 00-35 provide an interface with an instruction buffer included within the cache 750. The lines ZDI 00-35 are used to transfer data signals from the cache 750 to the control logic unit 704-1. The ZPTROUT lines are used to transfer address information from cache 750 to unit 704-1. Other signals are applied via the other data and control lines of the cache-CPU interface 604. These lines include the CP-STOP line shown separately in FIG. 2.</p><p>As seen from FIG. 2, the control logic unit 704-1 provides a number of groups of output signals. These output signals include the contents of certain registers, as for example, a basic instruction register (RBIR) whose contents are applied as an input to control store 704-2 via the lines RBIR 18-27. The control logic unit 704-1 receives certain control signals read out from control store 704-2 via the lines CCSD0 13-31.</p><p>The control logic unit 704-1 also includes a secondary instruction register (RSIR) which is loaded in parallel with the basic construction register at the start of processing an instruction. The contents of the secondary instruction register RSIR 00-35, as previously mentioned, are applied as inputs to the address preparation unit 704-3. Additionally, a portion of the contents of the secondary instruction register is applied as an input to the auxiliary arithmetic control unit 722 via the lines RSIR 1-9 and 24-35.</p><p>The control store 704-2 as explained herein provides for an initial decoding of program instruction op-codes and therefore is arranged to include a number of storage locations (1024), one for each possible instruction op-code.</p><p>As mentioned, signals applied to lines RBIR 18-27 are applied as inputs to control store 704-2. These signals select one of the possible 1024 storage locations. The contents of the selected storage location are applied to the lines CCSD0 13-31 and to CCSD0 00-12 as shown in FIG. 2. The signals supplied to lines CCSD0 00-12 correspond to address signals which are used to address the execution control unit 701 as explained herein.</p><p>The remaining sections of processor 700 will now be briefly described. The execution unit 714 provides for instruction execution wherein unit 714 performs arithmetic and/or shift operations upon operands selected from the various inputs. The results of such operations are applied to selected outputs. The execution unit 714 receives data from a data input bus which corresponds to lines RDI 00-35 which have as their source the control logic unit 704-1. The contents of the accumulator and quotient registers included within section 704-5 are applied to the execution unit 714 via the lines ZEB 00-35 as mentioned previously. The signals applied to the input bus lines ZDO 00-35 from the address preparation unit 704-3 are applied via switches included within the execution unit 714 as output signals to the lines ZRESA 00-35 and ZRESB 00-35, as shown in FIG. 2. Additionally, execution unit 714 receives a set of scratch pad address signals from the auxiliary arithmetic and control unit 722 applied via the lines ZRSPA 00-06. Additionally, the unit 722 also provides shift information to the unit 714 via the lines ZRSC 00-35.</p><p>The character unit 720 is used to execute character type instructions which require such operations as translation and editing of data fields. As explained herein, these types of instructions are referred to as extended instruction set (EIS) instructions. Such instructions which the character unit 720 executes include the move, scan, and compare type instructions. Signals representative of operands are applied via lines ZRESA 00-35. Information as to the type of character position within a word and the number of bits is applied to the character unit 720 via the input lines ZDB 00-07.</p><p>Information representative of the results of certain data operations is applied to the unit 722 via the lines ZOC 00-08. Such information includes exponent data and data in hexadecimal form. The character unit 720 applies output operand data and control information to the unit 722 and the unit 728 via the lines RCHU 00-35.</p><p>The auxiliary arithmetic and control unit 722 performs arithmetic operations upon control information such as exponents used in floating point operations, calculates operand lengths and pointers and generates count information. The results of these operations are applied to execution unit 714 via the lines ZRSPA 00-06 and lines ZRSC 00-06 as mentioned previously. Information signals corresponding to characters such as 9-bit characters, 6-bit characters, decimal data converted from input hexadecimal data, quotient information and sign information are applied to section 704-5 via the lines RAAU 00-08.</p><p>As seen from FIG. 2, the unit 722 receives a number of inputs. Character pointer information is applied via the lines ASFA 33-36. EIS numeric scale factor information and alphanumeric field length information are applied to the unit 722 via the lines RSIR 24-35. Other signals relating to fetching of specific instructions are applied via the lines RSIR 01-09. Exponent signals for floating point data are applied to the unit 722 via the lines ZOC 00-08 while floating point exponent data signals from unit 704-1 are applied via the lines RDI 00-08. Shift count information signals for certain instructions (e.g. binary shift instructions) are applied to the unit via the lines RDI 11-17. As concerns the input signals applied to the lines RCHU 00-35, lines 24-35 apply signals corresponding to the length of EIS instruction fields while 18-23 apply address modification signals to the unit 722.</p><p>The last unit is the multiply/divide unit 728 which provides for high-speed execution of multiply and divide instructions. This unit may be considered conventional is design and may take the form of the multiply unit described in U.S. Pat. No. 4,041,292 which is assigned to the same assignee as named herein. The unit 728 as seen from FIG. 2 receives multiplier dividend and divisor input signals via the lines RCHU 00-35. The multiplicand input signals from register section 704-5 are applied via the lines ZAQ 00-35. The results of the calculations performed by the unit 728 are applied as output signals to the lines ZMD 00-35.</p><p>As mentioned previously, the cache unit 750 transfers and receives data and control signals to and from the SIU 100 via the data interface line 600. The cache unit 750 transfers and receives data and control signals to and from the processor 700 via the lines of interface 604. Lastly, the cache unit 750 receives address and data signals from the circuits 704-4 via the lines RADO/ZADO 00-35.</p><h4>Detailed Description of the Processor 700</h4><p>Certain ones of the sections which comprise the processor 700 illustrated in FIG. 2 will now be discussed in greater detail with respect to FIGS. 3a through 3e.</p><p>Referring to FIGS. 3a and 3b, it is seen that the processor includes two control stores: (1) the control unit control store (CCS) 704-200 which forms part of the control unit 704; and (2) the execution control store (ECS) 701-3 which is included within the execution control unit 701.</p><p>The cache oriented processor 700 of the preferred embodiment of the present invention includes a three stage pipeline. This means that the processor 700 requires at least three processor cycles to complete the processing of a given program instruction and can issue a new instruction at the beginning of each cycle. Hence, a number of program instructions may be in some stage of processing at any given instant of time.</p><p>In the preferred embodiment the processor 700 includes the following stages: an instruction cycle (I) wherein instruction interpretation, op-code decoding and address preparation take place; a cache cycle (C) wherein access to the cache unit 750 is made ensuring high performance operation; and, an execution cycle (E) wherein instruction execution takes place under microprogram control.</p><p>As concerns control, during the I cycle, the op-code of the instruction applied via lines RBIR 18-27 is used to access a location within control store 704-2. During a C cycle, the accessed contents from control store 704-2 are applied to lines CCS DO 00-12 and in turn used to access one of the storage locations of the execution control store 701-2. During the C cycle, the microinstructions of the microprogram used to execute the instruction are read out from the execution control store 701-2 into a 144-bit output register 701-4. The signals designated MEMD0 00-143 are distributed to the various functional units of processor 700. During an E cycle, the processor executes the operation specified by the microinstruction.</p><p>Referring specifically to FIG. 2, it is seen that the control store 704-2 includes a control unit control store (CCS) 704-200 which is addressed by the op-code signals applied to the lines RBIR 18-27. The CCS 704-200, as mentioned previously, includes 1024 storage locations, the contents of which are read out into an output register 704-202 during an I cycle of operation. FIG. 6a shows schematically the format of the words stored within the control store 704-200.</p><p>Referring to FIG. 6a, it is seen that each control unit control store word includes five fields. The first field is a 13-bit field which contains an ECS starting address location for the instruction having an op-code applied to lines RBIR 18-27. The next field is a three bit field (CCS\u03c6) which provides for the control of certain operations. The bit interpretations of this field depend upon its destination and whether it is decoded by specific logic circuits or decoded under microprogram control. The next field is a 4-bit field which provides for certain register control operations.</p><p>The next field is a 6-bit sequence control field which is coded to specify a sequence of operations to be performed under hardwired logic circuit control as well as the type of cache operation. In the present example, this field is coded as 75<sub>8</sub>. The last field is a 6-bit indicator field which is not pertinent to an understanding of the present invention.</p><p>As seen from FIG. 3a, signals corresponding to the CCSA field of a control unit control store word are applied via a path 704-204 as an input to the execution generation circuits 701-7. Signals corresponding to the CCSR field are applied as an input to the execution unit 714 via path 704-206. Additionally, the same signals are applied as an input to the address preparation unit 704-3 via another path 704-208.</p><p>Signals representative of the sequence control field apply as an input to the sequence control logic circuits 704-101 via path 704-210. As explained herein, these circuits decode the sequence control field and generate signals for conditioning the cache unit 750 to perform the operation designated.</p><p>As mentioned previously, the execution address generation circuit 701-1 receives an input address which corresponds to field CCSA from the control store 704-2. As seen from FIG. 3b, these circuits include an input address register 701-10 whose output is connected to one position of a four position switch 701-12 designated ZECSA. The output of the switch serves as an address source for the control store 701-2. The first position of the switch 701-12 is connected to receive an address from the MICA register 701-14. The contents of register 701-14 are updated at the end of each cycle to point to the location within the ECS control store following the location whose contents were read out during that cycle.</p><p>The second position selects the address produced from the ZCSBRA branch address selector switch 701-18. The third position selects the address of the first microinstruction in each microprogram provided by the CCS control store which is loaded into the REXA register 701-10. When the CCS output is not available at the termination of a microprogram, a predetermined address (octal address 14) is automatically selected.</p><p>The first position of branch switch 701-18 receives signals corresponding to a branch address read out from store 701-2 into register 701-4 which is in turn forwarded to a return control register 701-20. The second, third and fourth positions of switch 701-18 receive signals from RSCR register 701-20, an MIC register 701-15 and the contents of a number of vector branch registers 701-36. The MIC register 701-15 stores an address which points to the microinstruction word following the microinstruction word being executed. This address corresponds to the address from switch 701-12 incremented by one by an increment circuit 701-12.</p><p>The vector branch registers include a 4-bit vector branch register 0 (RVB0), a 2-bit vector branch register 1 (RVB1) and a 2-bit vector branch register 2 (RVB2). These registers are loaded during a cycle of operation with address values derived from signals stored in a number of different indicator flip-flops and registers applied as inputs to the number of groups of input multiplexer selector circuits 701-32 and 701-34. The outputs of the circuits 701-32 and 701-34 are applied as inputs to two position selector circuits 701-30. These circuits in turn generate the output signals ZVBR0, ZVBR1 and ZVBR2 which are stored in the register 701-36.</p><p>The switch 701-36 provides an address based upon the testing of various hardware indicator signals, state flip-flop signals selected via an INDGRP field. The branch decision is determined by masking (ANDING) the selected indicator set with the INDMSKU and INDMSKL fields of a microinstruction word. If a vector branch is selected, INDMSKU is treated as 4 ZERO bits. The \"OR\" of the 8 bits is compared to the state defined by the TYPG and GO microinstruction fields. The hardware signals are applied via a number of data selector circuits 701-28 only one of which is shown whose outputs are in turn applied as inputs to a further five position multiplexer selector circuit 701-26. The output of the multiplexer circuit 701-26 feeds a comparison circuit which \"ands\" the indicator signals with the mask signals to produce the resulting signals MSKCBR0-7.</p><p>The signals MSKCBR0-7 are applied to another comparison circuit which \"ands\" the signals with the condition branch test signals TYPGGO to set or reset a branch decision flip-flop 701-22 which produces a signal RBDGO whose state indicates whether branching is to take place. The output signal RBDGO is applied as a control input to the first two positions of switch 701-12. When the branch test condition is not met (i.e., signal RBDGO=0), then the incremented address from the MICA register 701-14 is selected.</p><p>In some instances, as seen herein, it is not possible to test the state of an indicator on the cycle following its formation. For this reason, history registers HR0-HR7, not shown, are provided for register storage of the Group 2 indicators. The states of such stored indicators are selected and tested in a manner similar to that of the other indicators (i.e., mask fields).</p><p>Additionally, the unit 701-1 includes a number of indicator circuits, certain ones of these are used to control the operation of certain portions of the processor 700 when the strings being processed by certain types of instructions have been exhausted. These indicator circuits are included in block 701-42 and are set and reset under the control of a field within the microinstruction word of FIG. 6a (i.e., IND6 field). The bits of this field read out from the ECS output register 701-4 are applied to an RMI register 701-38 for decoding by a decoder 701-40. Based upon the state of status indicator signals received from the various processor units (e.g. 714, 720, 722, etc.), the appropriate ones of the auxiliary flip-flops are switched to binary ONE states. The outputs of these flip-flops are applied via the different positions of a 4 position switch 701-44 to the GP3 position of switch 701-26 for testing. The same outputs are applied to a second position of a ZIR switch 701-43 for storage via the ZDO switch 704-340. The ZIR switch 701-43 also receives indicator signals from an indicator register (IR) 701-41. This register is loaded via the RDI lines 18-30 and 32 in response to certain instructions.</p><p>The indicator status signals for example include the outputs of different adder circuits (AL, AXP) of the unit 720. These signals will set different ones of a number of exhaust flag flip-flops designated FE11, FE12, FE13, FE1E, FE2E, FE2 and FE3. The FE1E and FE2E flip-flops are set during any FPOA cycle of any instruction. These flip-flops in turn cause the FE11, FE12 and FE13 flip-flops to be set when the outputs from the AL or AXP adder circuits of unit 720 are generated. The setting and resetting of these indicators will be described herein in further detail in connection with the description of operation. However, the exhaust flag flip-flops pertinent to the example given herein are set and reset in accordance with the following Boolean expressions.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->__________________________________________________________________________\nSET: FE1E                                                                 \n         = FPOA + IND6FLD field.                                          \nRESET:                                                                    \n     FE1E                                                                 \n         = IND6FLD field.                                                 \nSET: FE2E                                                                 \n         = FPOA + IND6FLD field.                                          \nRESET:                                                                    \n     FE2E                                                                 \n         = IND6FLD field.                                                 \nSET: FE11                                                                 \n         = IND6FLD field \u00b7 FE1E (ALES + AXPES +                  \n           DESC1 \u00b7 AP0-4 = 0) + IND6FLD field \u00b7 FE1E    \n           \u00b7                                                     \n           DESC1 \u00b7 (AP0-5 = 0 + APZN + ALZN) + IND6FLD field.    \nRESET:                                                                    \n     FE11                                                                 \n         = FPOA + IND6FLD field.                                          \nSET: FE12                                                                 \n         = IND6FLD field \u00b7 FE1E \u00b7 (ALES + AXPES +       \n           FE13).                                                         \nRESET:                                                                    \n     FE12                                                                 \n         = FPOA + IND6FLD field.                                          \nSET: FE13                                                                 \n         = IND6FLD field \u00b7 FE1E \u00b7 ALES + IND6FLD        \n           field.                                                         \nRESET:                                                                    \n     FE13                                                                 \n         = FPOA + IND6FLD field.                                          \nSET: FE2 = IND6FLD field \u00b7 FE2E \u00b7 ALES + IND6FLD field  \n           \u00b7                                                     \n           FE2E \u00b7 DESC2 \u00b7 (AP0-4 = 0 + AP0-5 = 0 + APZN \n           +                                                              \n           ALZN) + (IND6FLD field) FE2E \u00b7  DESC2 +               \n           IND6FLD.                                                       \nRESET:                                                                    \n     FE2 = FPOA + IND6FLD field.                                          \nSET: FE3 = IND6FLD field \u00b7 DESC3 \u00b7 (AP0-4 = 0 + AP0-5   \n           +                                                              \n           APZN + ALZN) + IND6FLD field \u00b7 DESC3 +                \n           IND6FLD.                                                       \nRESET:                                                                    \n     FE3 = FPOA + IND6FLD field.                                          \nWherein IND6FLD indicates a particular code;                              \n ##STR1##                                                                 \n ##STR2##                                                                 \nAPZN = AP0-7 \u2266 0; and,                                             \nALZN = AL0-11 \u2266 0.                                                 \n__________________________________________________________________________\n</pre><p>The ZCSBRA switch 701-18 is normally enabled when the branch decision flip-flop RBD was set to a binary ONE in the previous cycle. The first position selects a 13-bit branch address from the current microinstruction applied via the RCSR register 701-20. The branch address enables any one of the locations of the ECS control store to be addressed directly. The second position selects the concatenation of the 6 low order address bits from the current microinstruction applied via MIC register 701-15 and the 7 upper bits of the branch address from the current microinstruction applied via the RSCR register 701-20. This permits branches within a 64-word page defined by the contents of the MIC register 701-15 (current location+1).</p><p>The third position selects the concatenation of 4 low order bits from the RVBO vector branch register, 6 bits from the branch field of the current microinstruction stored in RCSR register and the 3 upper bits of the address stored in the MIC register. This permits 16-way branches. The fourth position selects the concatenation of the 2 low order ZEROS with 4 bits from the vector branch register RVBO with the 4 most significant bits of the branch address field of the current microinstruction and the 3 upper bits of the current address stored in the MIC register. This permits 16-way branches with 3 control store locations between each adjacent pair of destination addresses.</p><p>The fifth position selects the concatenation of 2 low order ZEROS with 2 bits from vector branch register RVB1, with the 6 bits of the branch address of the current microinstruction and the upper 3 bits from the MIC register. This permits branches with 4 possible destinations with 3 control store locations between each adjacent pair of destination addresses.</p><p>The sixth position selects the concatenation of 2 low order ZEROS with 2 bits from vector branch register RVB2 with the 6 bits of the branch address of the current microinstruction and the upper 3 bits from the MIC register. This permits 4-way branches with 3 control store locations between each adjacent pair of destination addresses.</p><p>The output of switch 701-12 addresses a specific location within control store 701-2 which causes the read out of a microinstruction word having a format illustrated in FIG. 6b. Referring to that Figure, it is seen that this microinstruction word is coded to include a number of different fields which are used to control the various functional units within processor 700. Only those fields which are related to the present example will be described herein.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \nBits 0-1             Reserved for Future Use.                             \nBit   2  EUFMT       Defines which format the EU                          \n                     is to operate with. EUFMT-0                          \n                     specifies a first micro-                             \n                     instruction format while                             \n                     EUFMT = 1 specifies an alter-                        \n                     nate microinstruction format.                        \nBits 3-5 TRL         TR Low Write Control.                                \n       Write control of EU temporary regis-                               \n       ters TR0-TR3.                                                      \n         OXX         No change                                            \n         100         Write TR0                                            \n         101         Write TR1                                            \n         110         Write TR2                                            \n         111         Write TR3                                            \nBits 6-8 TRH         TR High Write Control.                               \n       Write control of EU temporary regis-                               \n       ters TR4-TR7.                                                      \n         OXX         No change                                            \n         100         Write TR4                                            \n         101         Write TR5                                            \n         110         Write TR6                                            \n         111         Write TR7                                            \nBits 9-12                                                                 \n         ZOPA        ZOPA Switch Control.                                 \n       Selects the output of ZOPA switch.                                 \n       (0)     0000     TR0                                               \n       (1)     0001     TR1                                               \n       (2)     0010     TR2                                               \n       (3)     0011     TR3                                               \n       (4)     0100     TR4                                               \n       (5)     0101     TR5                                               \n       (6)     0110     TR6                                               \n       (7)     0111     TR7                                               \n       (8-11)  10XX     RDI                                               \n       (12)    1100     ZEB                                               \n       (13)    1101     ZEB                                               \n       (14)    1110     ZEB                                               \n       (15)    1111     0 (disable)                                       \nBits 13-16                                                                \n         ZOPB        ZOPB Switch Control.                                 \n       Selects the output of ZOPB switch.                                 \nBits 17-18                                                                \n         ZRESA       ZRESA Switch Control.                                \n       Selects the output of ZRESA switch.                                \n         00        ALU                                                    \n         01        Shifter                                                \n         10        Scratchpad/RDI switch                                  \n         11        ZDO                                                    \nBits 19-20                                                                \n         ZRESB     ZRESB Switch Control.                                  \n       Selects the output of ZRESB switch.                                \n         00        ALU                                                    \n         01        Shifter                                                \n         10        Scratchpad/RDI switch                                  \n         11        ZDO                                                    \nBit  21  RSPB      Scratchpad Buffer Strobe                               \n                   Control.                                               \n       Strobes RSPB with ZRESB data.                                      \n         0         No strobe                                              \n         1         Strobe RSPB                                            \nBit  22  RSP       Scratchpad Write Control.                              \n         0         Read scratchpad                                        \n         1         Write scratchpad                                       \nBit  23  ZSPDI     Scratchpad/RDI Switch Control.                         \n       Selects the output of the Scratchpad/                              \n       RDI switch.                                                        \n         0         Scratchpad output                                      \n         1         RDI                                                    \nBits 24-25                                                                \n         ZSHFOP    Shifter Operand Switch Con-                            \n                   trol.                                                  \n       Selects the left operand to the                                    \n       Shifter.                                                           \n         00        ZOPA output                                            \n         01        EIS output                                             \n         10        0                                                      \n         11        Select 0 or -1 depending on bit                        \n                   0 of right operand to Shifter.                         \nBits 24-27                                                                \n         ALU       ALU Function Control.                                  \n       Selects the operation applied to the                               \n       two inputs (A and B) to the ALU.                                   \nBits 24-29                                                                \n         N/a                                                              \nBits 26-31                                                                \n         RFU         Reserved for Future Use.                             \nBits 30-31                                                                \n         ZALU        ALU Switch Control.                                  \n       Selects the output of ZALU switch.                                 \nBits 32-33                                                                \n         NXTD        Next Descriptor Control.                             \n       Strobes RBASB and RDESC registers.                                 \n       00      RBASB    00                                                \n               RDESC    00                                                \n       01      RBASB    01                                                \n               RDESC    01                                                \n       10      RBASB    Alt                                               \n               RDESC    10                                                \n         11        No strobes (default)                                   \nBits 32-35                                                                \n         CCM         Control constant field                               \n                     referenced by the CONTF                              \n                     field.                                               \nBits 34-35                                                                \n         IBPIPE      IBUF/Pipeline Control.                               \n       Selects the reading of IBUF or the                                 \n       pipeline operation.                                                \n         00          No operation                                         \n         01          Read IBUF/ZDI (Alt)                                  \n         10          Type 1 Restart Release or                            \n         11          Type 4 Restart Wait                                  \nBits 36-37                                                                \n         FMTD                                                             \n       Selects the loading of various CU                                  \n       registers and indicates the inter-                                 \n       pretation to be given to the MEMADR                                \n       field for small CU control.                                        \n       00        No operation                                             \n       01        RADO    ASFA                                             \n       10        RADO    ZRESB                                            \n       11        RADO    ASFA                                             \nBits 38-40                                                                \n         MEMADR        Cache Control.                                     \n       Selects cache operations. The com-                                 \n       plete interpretation for this control                              \n       is a function of the FMTD control.                                 \n       000       No operation                                             \n       001       Read Sgl                                                 \n       010       Load Quad                                                \n       011       Preread                                                  \n       100       Write Sgl                                                \n       101       Write Dbl                                                \n       110       Read Sgl Trans (for FMTD = 11                            \n                 only)                                                    \n       111       Write Sgl Word (for FMTD = 11                            \n                 only)                                                    \nBit 41   ZONE        Zone Control.                                        \n       Indicates zone or no zone for small                                \n       CU control.                                                        \n         0         No zone                                                \n         1         Zone                                                   \nBits 42-44                                                                \n         TYPA        Type A Flag.                                         \n       Indicates the type A overlayed fields                              \n       being used.                                                        \n         000       Type A = 0 fields                                      \n         .                                                                \n         .                                                                \n         .                                                                \n         .                                                                \n         100       Type A = 4 fields                                      \nBits 44-46                                                                \n         PIPE        Pipeline Control                                     \n       Selects the type of restart to be                                  \n       initiated.                                                         \n       000     No operation                                               \n       001     Type 1 Restart and Release                                 \n       010     Type 2 Restart                                             \n       011     Type 3 Restart                                             \n       100     Type 4 Restart                                             \n       101     Type 5 Release                                             \n       110     Type 6 Restart                                             \nBits 44-47                                                                \n         AUXREG      Auxiliary Register Write                             \n                     Control                                              \n       Selects an auxiliary register or                                   \n       combinations to be strobed with data                               \n       selected by the AUXIN control field.                               \n       (0)     0000     No strobe                                         \n       (1)     0001     RRDXA                                             \n       (2)     0010     R29                                               \n       (3)     0011     R29, RRDXA, FRL, RID                              \n       (4)     0100     RRDXB                                             \n       (5)     0101     RTYP                                              \n       (6)     0110     RBASA                                             \n       (7)     0111     RBASA, RTYP                                       \n       (8)     1000     RBASB                                             \n       (9)     1001     RDESC                                             \n       (10)    RBASA, R29, RRDXA                                          \nBits 45-46                                                                \n         TYPB           Type B Flag.                                      \n       Indicates the Type B overlayed fields                              \n       being used.                                                        \n       00    Type B = 0 fields                                            \n       .                                                                  \n       .                                                                  \n       .                                                                  \n       .                                                                  \n       11    Type B = 3 fields                                            \nBit  47  RSC         RSC Strobe Control.                                  \n       Strobes the RSC register. (Shift                                   \n       Count)                                                             \nBit  47  RSPA        RSPA Strobe Control.                                 \n       Strobes the RSPA register.                                         \nBits 47-48                                                                \n         N/A                                                              \nBit  47  RAAU        RAAU Strobe Control.                                 \n       Strobes RAAU register.                                             \nBits 48-49                                                                \n         ZLX         ZLX Switch Control.                                  \n       Selects the output of the ZLX switch.                              \nBits 48-49                                                                \n         ZSPA        ZSPA Switch Control.                                 \n       Selects the output of the ZSPA                                     \n       switch.                                                            \nBits 48-50                                                                \n         AUXIN       Auxiliary Register Input                             \n                     Control.                                             \n       Selects data to be strobed into                                    \n       auxiliary register(s).                                             \nBit  49  ZADSP       ZADSP Switch Control.                                \n       Selects the output of ZADSP switch.                                \nBits 50-52                                                                \n         ZSC         ZSC Switch Control.                                  \n       Selects the output of ZSC switch.                                  \nBits 50-52                                                                \n         ZRSPA       ZRSPA Switch Control.                                \n       Selects the output of ZRSPA switch.                                \nBits 50-52                                                                \n         ZAAU        ZAAU Switch Control.                                 \nBit  51  RSIR        RSIR Register Strobe.                                \n       Strobes the RSIR register as a function                            \n       of the AUXIN field.                                                \nBit  53  RDW         R1DW, R2DW Register Strobe.                          \n       Strobes the R1DW or R2DW register as a                             \n       function of the RDESC register.                                    \nBits 53-54                                                                \n         ZLNA        ZLNA Switch Control.                                 \n       Selects output of ZLNA switch.                                     \nBits 54-57                                                                \n         CONTF       Miscellaneous Flip-Flop                              \n                     Control.                                             \n       Selects one of four groups of control                              \n       flip-flops to be set or reset by the                               \n       control constant field (CCM). The                                  \n       flip-flops include those of blocks                                 \n       704-104 and 704-110.                                               \nBits 55-56                                                                \n         ZLNB        ZLNB Switch Control.                                 \n       Selects the output of ZLNB switch.                                 \nBits 55-56                                                                \n         ZSPA (2)    Type A = 2 ZSPA Switch, RSPA                         \n                     Register Control.                                    \n       Selects ZSPA switch output and strobes                             \n       RSPA register.                                                     \nBits 57-58                                                                \n         ZPC         ZPC Switch Control.                                  \n       Selects the output of ZPC switch.                                  \nBits 59-62                                                                \n         ZXP         ZXP Switch, RXP Register                             \n                     Bank Control.                                        \n       Selects ZXP switch output and the RXP                              \n       register into which it will be                                     \n       written.                                                           \nBits 59-63                                                                \n         ZLN(1)      ZLN Switch, RLN Register                             \n         (Type       Bank Control.                                        \n         A = 1)                                                           \n       Selects ZLN switch output and the RLN                              \n       register into which it will be written.                            \nBits 59-60                                                                \n         ZPA         ZPA Switch Control.                                  \n       Selects the output of ZPA switch.                                  \n       00 = RP0                                                           \n       .                                                                  \n       .                                                                  \n       .                                                                  \n       .                                                                  \n       11 = RP3                                                           \nBits 61-62                                                                \n         ZPB         ZPB Switch Control.                                  \n       Selects the output of ZPB switch.                                  \n       00 = RP0                                                           \n       .                                                                  \n       .                                                                  \n       .                                                                  \n       .                                                                  \n       11 = RP3                                                           \nBits 63-64                                                                \n         ZXPL         ZXPL Switch Control.                                \n         (Type A = 0)                                                     \n       Selects the output of ZXPL switch.                                 \n       00 = RXPA                                                          \n       .                                                                  \n       .                                                                  \n       .                                                                  \n       .                                                                  \n       11 = RXPD                                                          \nBit  63  ZLN(2)      ZLN Switch, RLN Register                             \n         (Type       Bank Control.                                        \n         A = 2)                                                           \n       Selects ZLN switch output and the RLN                              \n       register into which it will be written.                            \nBits 63-66                                                                \n         RDIN        RDI In Control.                                      \n       Selects the data to be strobed into                                \n       the RDI register and selects one of                                \n       the modification control fields (MF.sub.1 -                        \n       MF.sub.3, TAG) of an instruction word. RDI                         \n       strobe may also be controlled by the                               \n       MISCREG field.                                                     \nBit  64  ZXPL(1)     ZXPL Switch Control.                                 \n         (Type A = 1)                                                     \n       Selects the output of ZXPL switch.                                 \nBits 64-68                                                                \n         ZRPAC       ZRPA Switch, ZRPC Switch,                            \n         (Type       RPO-3 Register Bank Control.                         \n         A = 2)                                                           \n       Selects ZRPC and ZRPA switch outputs                               \n       and the RPO-3 register into which the                              \n       ZRPA output will be written.                                       \nBits 65-66                                                                \n         ZXPR        ZXPR Switch Control.                                 \n         (Type A = 0)                                                     \n       Selects the output of ZXPR switch.                                 \nBits 65-66                                                                \n         ZXP(1)      ZXP Switch, RXP Register                             \n         (Type       Bank Control.                                        \n         A = 1)                                                           \n       Selects ZXP switch output and the RXP                              \n       register into which it will be written.                            \nBits 67-68                                                                \n         ZPD         ZPD Switch Control.                                  \n         (Type A = 0)                                                     \n       Selects the output of ZPD switch.                                  \nBit  67  ZRPAC(4)    ZRPA Switch, ZRPC Switch,                            \n         (Type       RPO-3 Register Bank Control.                         \n         A = 4)                                                           \n       Selects CP4 from ZRPA switch and                                   \n       strobes the RP1 register.                                          \nBit  67  TYPD        Type D Flag.                                         \n         Type D Flag which indicates D over-                              \n         layed fields.                                                    \nBit  68  ZRPB(4)     ZRPB Switch, RP4-7 Register                          \n         (Type       Bank Control.                                        \n         A = 4)                                                           \n       Selects 0 from ZRPB switch and strobes                             \n       the RP4 register.                                                  \nBits 68-71                                                                \n         MEM         Cache Memory Control.                                \n       Selects the cache operation in con-                                \n       junction with the SZ control.                                      \n       (0)     0000     No operation                                      \n               .                                                          \n               .                                                          \n               .                                                          \n               .                                                          \n       (15)    1111     Write Remote                                      \nBits 68-70                                                                \n         IBUF        IBUF Read Control.                                   \n       Selects the destination of IBUF data                               \n       when reading IBUF.                                                 \nBits 69-73                                                                \n         AXP         ZXPA Switch, ZXPB Switch,                            \n         (Type       AXP Adder, ZAXP Switch, RE                           \n         A = 0)      Register Control.                                    \n       Selects ZXPA and ZXPB switch outputs,                              \n       the AXP adder function applied to them,                            \n       and the ZAXP switch output. Also                                   \n       strobes the RE register.                                           \nBits 69-73                                                                \n         ZRPB        ZRPB Switch, RP4-7 Register                          \n         (Type       Bank Control.                                        \n         A = 1)                                                           \n       Selects ZRPB switch output and the                                 \n       RP4-7 register into which it will be                               \n       written.                                                           \nBits 69-71                                                                \n         ZRPAC-3     ZRPA Switch, ZRPC Switch,                            \n         (Type       RP0-3 Register Bank Control.                         \n         A = 3)                                                           \n       Selects ZRPC and ZRPA switch outputs                               \n       and the RPO-3 register into which the                              \n       ZRPA output will be written.                                       \nBits 72-74                                                                \n         ZRPB(3)     ZRPB Switch, RP4-7 Register                          \n         (Type       Bank Control.                                        \n         A = 3)                                                           \n       Selects ZRPB switch output and the                                 \n       RP4-7 register into which it will be                               \n       written.                                                           \nBits 72-73                                                                \n         SZ          Size/Zone Cache Control.                             \n       Controls cache operations in conjunction                           \n       with the MEM control field.                                        \nBits 74-78                                                                \n         ZRPB(3)     ZRPB Switch, RP4-7 Register                          \n         (Type       Bank Control.                                        \n         A = 0)                                                           \n       Selects ZRP switch output and the RP4-7                            \n       register into which it will be written.                            \nBits 74-78                                                                \n         AL          ZALA Switch, ZALB Switch, AL                         \n         (Type       Adder Control.                                       \n         A = 1)                                                           \n       Selects ZALA and ZALB switch outputs                               \n       and the AL adder function applied to                               \n       them.                                                              \nBit  74  TYPE        Type E Flag.                                         \n       Type E flag which indicates the type                               \n       E overlayed fields.                                                \nBits 75-77                                                                \n         ZXP(3)      ZXP Switch, RXP Register Bank                        \n         (Type       Control.                                             \n         A = 3)                                                           \n       Selects ZXP switch output and the RXP                              \n       register into which it will be written.                            \nBits 75-78                                                                \n         MISCREG     Miscellaneous Register Con-                          \n                     trol.                                                \n       Selects various operations on mis-                                 \n       cellaneous registers (e.g. RBIR, RDI,                              \n       RLEN, RSPP).                                                       \nBits 75-78                                                                \n         ZDO         ZDO Switch Control.                                  \n       Selects the output of the ZDO switch.                              \nBit  78  ZIZN        ZIZN Switch Control.                                 \n       Selects the output of ZIZN switch.                                 \nBits 79-83                                                                \n         AP          ZAPA Switch, ZAPB Switch,                            \n                     AP Adder Control.                                    \n       Selects ZAPA and ZAPB switch output                                \n       and the AP adder function applied to                               \n       them.                                                              \nBits 79-81                                                                \n         ZLN (3)     ZLN Switch, RLN Register                             \n         (Type       Bank Control.                                        \n         A = 3)                                                           \n       Selects ZLN switch output and the RLN                              \n       register into which it will be written.                            \nBits 79-83                                                                \n         ZLN (4)     ZLN Switch, RLN Register Bank                        \n         (Type       Control.                                             \n         A = 4)                                                           \n       Selects ZLN output and the RLN regis-                              \n       ter into which it will be written.                                 \nBits 80-81                                                                \n         RAAU        RAAU/RE Register Strobe.                             \n       Selects the data to be strobed into                                \n       the RAAU and RE registers by con-                                  \n       trolling several switches and adders                               \n       in the unit 722.                                                   \nBits 82-83                                                                \n         AP (3)      ZAPA Switch, ZAPB Switch,                            \n         (Type       AP Adder Control.                                    \n         A = 3)                                                           \n       Selects ZAPA and ZAPB switch outputs                               \n       and the AP adder function applied to                               \n       them.                                                              \nBit  84  ZRSC        ZRSC Switch Control.                                 \n         (Type A = 0)                                                     \n         Selects the output of ZRSC Switch.                               \nBits 85-86                                                                \n         N/A                                                              \nBit  86  RLEN        RLEN Strobe Control.                                 \n         (Type A = 3)                                                     \n       RLEN strobes are also controlled by                                \n       hardware or by the MISCREG field.                                  \nBit  87  FMT         Format Flag.                                         \n         Indicates the type of format.                                    \nBits 88-89                                                                \n         TYPF                                                             \n       Indicates the type of overlayed fields.                            \n       00  =       Scratchpad Address                                     \n       01  =       Character Unit Control                                 \n       10  =       Multiply/Divide Control                                \n       11  =       N/A                                                    \nBit  90  RFU         Reserved for Future Use.                             \nBits 90-93                                                                \n         CHROP       Character Unit Op Code.                              \n       Selects main operation to be per-                                  \n       formed by Character Unit and the                                   \n       interpretation to be given to the                                  \n       CHSUBOP field.                                                     \n       (0)     0000     No operation                                      \n       (1)     0001     Load Data                                         \n       (2)     0010     MOP Execute                                       \n       (3)     0011     Compare Single                                    \n       (4)     0100     Compare Double                                    \n       (5)     0101     Load Register                                     \n       (6)     0110     Update CN                                         \n       (7)     0111     Undefined                                         \n       (8)     1000     Set RCH Operation A                               \n       (9)     1001     Set RTF1                                          \n       (10)    1010     Set RTF2                                          \n       (11)    1011     Set RTF3                                          \n       (12)    1100     Set RCN1                                          \n       (13)    1101     Set RCN2                                          \n       (14)    1110     Set Edit Flags                                    \n       (15)    1111     CH Unit Clear                                     \nBit  90  RCH         RCH Register Strobe.                                 \n       Strobes the OP1 RCH register.                                      \nBit  90  RFU         Reserved for Future Use.                             \nBits 91-97                                                                \n         SPA         Scratchpad Address.                                  \n         Contains the address that may be used                            \n         to address the EU scratchpad.                                    \nBits 91-93                                                                \n         N/A                                                              \nBits 94-97                                                                \n         CHSUBOP     Character Unit Sub-Op Code.                          \n       Selects the detailed function of the                               \n       Character Unit or it may contain a con-                            \n       stant. The interpretation of this                                  \n       field is a function of the CHROP                                   \n       control as shown below.                                            \n       CHROP = 0000 No Operation                                          \n       CHSUBOP.sub.0-3                                                    \n        XXXX      No interpretation                                       \n       CHROP = 0001 Load Data Operation                                   \n       CHSUBOP.sub.0-1                                                    \n                  (Suboperation)                                          \n         00       OP1 Load by CN1 and TF1                                 \n         01       OP1 Load in Reverse by                                  \n                  CN1 and TF1                                             \n         10       OP2 Load by CN2 and TF2                                 \n                  and Test Character                                      \n         11       Load Sign                                               \n       CHSUBOP.sub.2-3                                                    \n                  (Fill Control)                                          \n         1X       Fill character loaded to                                \n                  ZCU                                                     \n         X1       Fill character loaded to                                \n                  ZCV                                                     \n       CHROP = 0010 MOP Execute Operation                                 \n       CHSUBOP.sub.0-1                                                    \n                  (Suboperation)                                          \n         00       MOP set by CN2                                          \n         01       MOP Execute                                             \n         10       Undefined                                               \n         11       Undefined                                               \n       CHUBOP.sub.2-3                                                     \n         XX       No interpretation                                       \nBits 94-97                                                                \n         CHSUBOP (continued)                                              \n       CHROP = 0101 Load Register Operation                               \n       CHSUBOP.sub.0-1                                                    \n                  (Selects output of RCH)                                 \n       CHSUBOP.sub.2-3                                                    \n                  (Selects output of ZOC                                  \n                  switch)                                                 \n       CHROP = 1011 Set RTF3 Operation                                    \n       CHSUBOP.sub.0-1                                                    \n                  (Selects data to be                                     \n                  inspected for 00, indicat-                              \n                  ing a 9-bit character.)                                 \n       CHSUBOP.sub.2-3                                                    \n                  (Constant Field)                                        \n       CHROP = 1110 Set Edit Flags Operation                              \n       CHSUBOP.sub.0-3                                                    \n                  (Constant selecting flags                               \n                  to be set)                                              \n         1XXX     Set ES (End suppression)                                \n         X1XX     Set SN (sign)                                           \n         XX1X     Set Z (zero)                                            \n         XXX1     Set BZ (Blank When Zero).                               \nBits 94-97                                                                \n         RFU          Reserved for Future Use.                            \nBits 97-97                                                                \n         N/A                                                              \nBit  98  TYPG         TYPE G FLAG.                                        \n       Indicates the type of overlayed fields.                            \n         0 = BRADRU field                                                 \n         1 = IND6 field                                                   \nBit  99  GO          State of Conditional Branch                          \n                     Test.                                                \nBits 99-106                                                               \n         BRADRU      Branch Address Upper.                                \nBits 99-106                                                               \n         IND6FLD     Indicator Control.                                   \n       Selects an indicator.                                              \nBits 99-106                                                               \n         Bit 99 = 0 specifies a change indica-                            \n         tors instruction.                                                \n         Bit 99 = 1 specifies a set/reset indi-                           \n         cators instruction (set or reset                                 \n         indicated by X bit 0 or 1 respectively).                         \n       Bits 100-104 105 = 1     106 = 1                                   \n         0000                                                             \n         .                                                                \n         .                                                                \n         .                                                                \n         .                                                                \n         1100X     Exhaust 1   Exhaust 2                                  \n         1101X     Exhaust 3   N/A                                        \n         1110X     Exhaust 1   Exhaust 2                                  \n                   Eff.        Eff.                                       \nBits 107-112                                                              \n         BRADRL      BRANCH ADDRESS LOWER.                                \n       Contains lower portion of an ECS address                           \n       used for branching.                                                \nBit  113 EXIT        Selection of Exit Switch Con-                        \n                     trol.                                                \n       Selection of Exit indicates end of                                 \n       microprogram.                                                      \nBits 114-116                                                              \n         ZCSBRA      ZCSBRA Switch Control.                               \n       Defines the position to be selected                                \n       in a Control Store Branch Address                                  \n       Switch.                                                            \nBits 117-118                                                              \n         N/A                                                              \nBits 119-123                                                              \n         INDGRP      Conditional Branch Indicator                         \n                     Group Control.                                       \n       The first two bits (119-120) select the                            \n       \"group\" of microprogram indicators.                                \n       The last three bits (121-123) select                               \n       the \"set\" of indicators within each                                \n       \"group\".                                                           \nBit  124 TYPH        Type H field.                                        \n       Indicates the type H overlayed fields.                             \n         0 = INDMSKU                                                      \n         1 = VCTR field                                                   \nBits 125-128                                                              \n         INDMSKU     Conditional Branch Indicator                         \n                     Mask Upper.                                          \n       Contains the upper 4 bits of the indi-                             \n       cator mask in type H = 0 field.                                    \nBits 125-129                                                              \n         VCTR        Vector Select.                                       \n       Selects the branching vectors to be                                \n       strobed into the RVB0, RVB1 and RVB2                               \n       registers. The most significant bit                                \n       (125) determines which of two groups                               \n       0 or 1, 2 or 3 and 4 or 5 will be                                  \n       strobed into the RVB0, RVB1 and RVB2                               \n       registers respectively. The remaining                              \n       3 bits select the vector within each                               \n       group.                                                             \nBits 129-132                                                              \n         INDMSKL     Conditional Branch Indicator                         \n                     Mask Lower.                                          \n       Contains the lower 4 bits of the                                   \n       indicator mask.                                                    \nBits 133-135                                                              \n         N/A                                                              \nBits 136-139                                                              \n         CNSTU       Constant Upper.                                      \n       Contains the upper 4 bits of the con-                              \n       stant field.                                                       \nBits 140-143                                                              \n         CNSTL       Constant Lower.                                      \n       Contains the lower 4 bits of the con-                              \n       stant field.                                                       \n______________________________________                                    \n</pre><h4>Control Logic Unit 704-1</h4><p>This unit includes the sequence decode logic circuits 704-100 as mentioned whose outputs feed a plurality of I cycle control state flip-flops of block 704-102. These flip-flops in response to signals from the circuits 704-100 as well as microinstruction signals from register 701-4 (DMEMR038-40 which corresponds to the mem address field MEMADR of FIG. 6b) generate the various required I cycle control states required for the execution of program instructions. It is assumed that block 704-102 also includes gate circuits which generate register hold signals (HOLDE00) which are distributed throughout the processor 700.</p><p>As seen from FIG. 3c, the I cycle control state flip-flops receive control input signals via control lines including a line CPSTOP00 from cache unit 750. As explained herein, the state of CPSTOP00 line determines whether processor operation continues in that when the line is forced to a binary ZERO, the hold or enabling signals for the I cycle control state flip-flops and other storage registers are also forced to ZEROS. The hold signals corresponding to signals [HOLDI00 and [HOLDE00 operate to hold or freeze the state of the processor 700. Since no incrementing of the control store address can take, the ECS control store reads out the same microinstruction word. The signals [HOLDI and [HOLDE are set in accordance with the following Boolean expressions: [HOLDI=CACHE HOLD+TERMB (DREQ-IF-DIR)+HOLD REL wherein the state of signal CACHE HOLD corresponds to the state of signal CPSTOP, the states of signals TERMB (DREQ-IF-DIR) are binary ONES during control state FPOA when the cache command specifies an I fetch or direct operation and the signal HOLD REL is a binary ONE until switched to a binary ZERO by the generation of a microprogram release signal; and [HOLD E=[HOLD I.</p><p>The hardware sequence generated by the circuits 704-100 in response to the signals applied to lines CCSDO20-25 used in explaining the operation of the present invention is as follows.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \nCCS-S CODE             SEQUENCE                                           \n______________________________________                                    \n111011    =      MLR                                                      \n           The sequence is FPOA-FPOP1 followed                            \n           by FPOP2. There is an escape to micro-                         \n           program control which following the                            \n           setting up of registers, tables, etc.                          \n           required for processing move operands                          \n           signals the hardware control circuits                          \n           to enter state FESC.                                           \n______________________________________                                    \n</pre><p>The hardwired control states used in explaining the operation of the present invention and operations performed in connection with such control states are as follows.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \nCONTROL                                                                   \nSTATE/CYCLE DESCRIPTION                                                   \n______________________________________                                    \nFPOA        The FPOA Prepare Operand Address state                        \n            is the starting control state for all                         \n            instructions. During FPOA, an address                         \n            is calculated, and the Op-code is                             \n            translated via the CCS control store                          \n            to control further actions.                                   \nFPOP        The FPOP Prepare Operand Pointer is                           \n            the control state used to process                             \n            instruction descriptors.                                      \nFESC        The FESC Escape is the state for                              \n            providing a variable delay to the                             \n            I-Process pipeline. During the FESC                           \n            state, the ECS control store shall                            \n            have complete control over the pro-                           \n            cessor 700, and shall determine when                          \n            to restart the I-Process pipeline.                            \n______________________________________                                    \n</pre><p>As seen from FIG. 3c, signals corresponding to the I cycle control states are applied as inputs to a plurality of control flip-flops of block 704-104, decoder circuits of block 704-106, a number of control logic circuits of block 704-108 and to a plurality of control flag indicator flip-flops of block 704-110. It is also seen that the various indicator flip-flops of block 704-110 also receive microinstruction input signals via lines MEMD054-57 from execution control unit 701-4.</p><p>As seen from FIG. 3c, signals generated by the hardware control logic circuits 704-108 fall into one of three groups as a function of the units whose operations are being controlled. That is, the groups are instruction buffer control, hardware control and hardware memory control.</p><p>In each case, each group of signals is ORED together with equivalent signals generated by other sources and then decoded. The other sources correspond to fields within the two different formats of the microinstruction word of FIG. 6a which are loaded into RCSR register 704-112 from the ECS output register 701-4.</p><p>One field corresponds to bits 32-83 of one format (large CU) and another field (short CU) corresponds to bits 32-41 of another format. These fields are decoded by a decoder 704-114 into the sets of bits indicated and combined within the decoders 704-116, 704-124, 704-126 and 704-128 as shown. Further decoding is done by the circuits of blocks 704-118, 704-135 and 704-120. The results of decoding such fields are either distributed throughout processor 700 or are stored in an RMEM register 704-130, an RSZ flip-flop 704-132, an FREQDIR flip-flop 704-136 and an FREQCAC flip-flop 704-134.</p><p>Additional decoding of the large and short CU fields and signals from the I cycle state circuits of block 704-112 is done via decoders 704-106 and 704-107. The decoder 704-106 generates control signals for loading different ones of the registers and for enabling various multiplexer/selector switches within the processor 700. The decoder 704-107 operates to generate signals for setting and resetting a pair (RBASB) of base pointer B flip-flops 704-144. Other combinations of these signals are used to set and reset the descriptor number flip-flops of blocks 704-140 and 704-142.</p><p>As seen from FIG. 3c, the decoder 704-116 receives a control signal [EXH00 generated by the decoder circuits of block 704-117. These circuits receive signals from the RDESC register 704-140 and signals from the exhaust flip-flops of block 701-1. In accordance with the states of these signals, the circuits force signal [EXH00 to a binary ZERO to inhibit the generation of a cache memory command upon the occurrence of an exhaust condition. The signal [EXH000 is generated in accordance with the following Boolean expression:</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->[EXH000=DESCO\u00b7FE11+DESC1\u00b7FE2+DESC2\u00b7FE3.</pre><p>The different flip-flops of block 704-104 will now be discussed in greater detail. In greater detail, the flip-flop FCHAR provides certain changes in the control of address generation. When the FCHAR flip-flop is set to a binary ONE during the processing of a load type instruction specifying character modification, then the contents of the RDI register are not changed under hardware control. This allows the RDI register to be loaded with data under microprogram control prior to starting the pipeline. Also, if the FCHAR flip-flop is set to a binary ONE during a store type instruction specifying character modification, then the execution address for this instruction is modified under hardware control to point to a unique address of the microinstruction sequence in the ECS control store that is to process this type of instruction.</p><p>The flip-flop FDT-FOUR provides additional control on the readout of the address register (ZAR<sub>0-19</sub>) of block 704-304. Flip-flop FADR-WD provides additional control for the ZDO switch 704-340. When this flip-flop is set to a binary ONE, then the ZAR position of the ZDO switch is forced to select a word address. The flip-flop FADR-B provides additional control for the ZDO multiplexer switch. When set to a ONE, then the ZAR position of the ZDO switch is forced to select a byte address. The flip-flop FNUM is normally set in response to the CCS-OP field of the microinstruction word. When set to a binary ONE, this indicates that the descriptor being processed is a numeric type. The flip-flop FIG-LEN provides additional control over the loading of registers within the unit 722 (length registers) and over memory operations. When set to a binary ONE, the RXP and RLN registers within unit 722 are not loaded from the RSIR register 704-154 during certain processor control states FPOP.</p><p>The FINH-ADR flip-flop inhibits the operation of the address preparation unit 704-3. When set to a binary ONE, an address cycle (FPOA/FPOP) consists of adding the contents of a temporary effective address register REA-T+ZERO. The register REA-T will have been loaded with the address prior to doing a FPOA/FPOP cycle. The FABS flip-flop enables the generation of absolute addresses. When set to a binary ONE, a 24-bit absolute address is used. As concerns the flag or indicator flip-flops of block 704-110, flip-flop FID when set to a binary ONE provides an indication that indirect address modification during an instruction is required on the descriptor loaded into the RSIR register.</p><p>The FRL flip-flop when set to a binary ONE indicates that the length is specified in a register associated with the instruction loaded into various instruction registers. The three flip-flops FINDA, FINDB and FINDC provide indications used in processing memory type instructions. Flip-flop FINDA is set to a binary ONE when length is specified in a register or when flip-flop FAFI is set to a ONE. Flip-flop FINDB is set to a binary ONE when the descriptor does not include nine bit characters. The flip-flop FINDC is set to a binary ONE when the descriptor does include six bit characters.</p><p>The FAFI flip-flop is set to a binary ONE when the processor circuits detect that indicator bit 30 of IR register 701-41 was set to a binary ONE during the execution of an EIS instruction indicative of a mid instruction interrupt (required to adjust pointer and length values because of interrupt). The FTRGP, TTNGO and FTRF-TST flip-flops are set to binary ONES in conjunction with transfer type instructions. More specifically, the FTRGP flip-flop provides a microprogram indication of being set to a binary ONE when the processor circuits detect the read out of a transfer type of instruction during the execution of an execute double (XED) or repeat (RPTS) instruction. The FTNGO flip-flop provides a microprogram indication of being set to a binary ONE when the condition of transfer signalled by the execution control unit 701 was transfer NO GO (i.e., transfer did not take place). The output of this flip-flop is applied to the NO GO line of interface 604. The FTRF-TST flip-flop of this group indicates when set to a binary ONE that the previous instruction executed by processor 700 was a transfer type instruction and that the current I cycle is to be executed conditioned upon the presence of a transfer GO (TRGO) signal from control unit 701.</p><p>Additionally, the circuits of block 704-110 include a number of flip-flops used in performing indirect addressing operations under hardwired control for other than EIS instructions. These include FIR, FIRT, FIRL and FRI flip-flops which are switched to binary ONES as functions of the different types of indirect address modifications required to be performed. For example, the FRI flip-flop signals a register then indirect address modification and is switched to a binary ONE when a register indirect (RI) indicator is a binary ONE. The FIR flip-flop is switched to a binary ONE when an indirect then register (IR) indicator is a binary ONE. This flip-flop signals the beginning of an indirect then register address modification. The FIRL flip-flop is switched to a binary ONE when an indirect then tally indirect (IT-I) indicator is a binary ONE. This flip-flop signals a last indirect operation. Another flip-flop TSX2 provides an indication used in processing transfer and set index instructions while a STR-CPR flip-flop is used during the processing of store instructions.</p><p>As seen from FIG. 3c, the outputs from the control flag flip-flops of block 704-110 are applied as inputs to the branch indicator circuits of block 701-1. Also, output signals from the control flag flip-flops are also applied as inputs to the I cycle flip-flops of block 704-102.</p><h4>Register Section 704-150</h4><p>As seen from FIG. 3c, the control logic unit 704-1 further includes a register section 704-150. This section contains the basic instruction register (PBIR) 704-152, the secondary instruction register (RSIR) 704-154, a base pointer A register (RBASA) 704-156 used for selecting one of the address registers RAR0 through RAR7 of block 704-304, a read index register A (RRDXA) 704-158 used for selection of index registers included within section 704-5 (not shown) and for selection of outputs from the ZDO multiplexer switch 704-340, a read index A save (RRDXAS) register 704-159, and a descriptor type register (RTYP) 704-160 indicating the type of data characters being pointed to by the descriptor value (e.g. 9-bit, 6-bit, 4-bit). The section 704-150 further includes a 1-bit instruction/EIS descriptor register designated R29 of block 704-162. The state of this bit in conjunction with the contents of the RBAS-A register 704-158 are used to select the particular address register used for address preparation. When register R29 of block 704-162 is set to a binary ZERO, this indicates that none of the address registers of block 704-304 are used during address preparation. The last registers of section 704-150 include the data in register (RDI) of block 704-164 and a read index register B (RRDXB) pointing to registers used by execution unit 714.</p><p>As seen from FIG. 3c, the RBIR register 704-152 is loaded via a two position switch 740-170 connected to receive signals from the sources indicated (i.e., a switch ZIB-B 704-172 and lines ZDI 0-35). The RSIR register 704-154 similarly receives signals from the ZDI lines and switch 704-172. The RBASA register 704-156 receives signals from the ZDI line 0-2 in addition to a further switch ZBASA of block 704-174. The RRDXA register and RTYP register receive signals from the ZDI lines as well as switches 704-176 and 704-178 as shown. Also, the RRDXA register receives signals from the RRDXAS register 704-159.</p><p>The switch 704-172 is a two position switch which receives inputs from the switches ZIB and ZRESB from the cache unit 750 and execution unit 714 respectively. The switch 704-174 is a three input switch which receives two inputs from the execution unit 714 and the output of the ZIB switch of cache unit 750.</p><p>Switch 704-176 is a four input switch which receives two of its inputs from the execution unit 714 and a single input from cache unit 750. The first position of the ZRDXA switch 704-176 selects the output of a ZRDXM switch 704-185. One position of this switch provides a tag field value from bit positions 5-8, 14-17, and 32-35 of the RBIR register 704-152 and bit positions 32-35 of the RSIR register 704-154 selected from ZIDD switch 704-180 and a two position ZMF switch 740-176.</p><p>The second position of switch 704-185 provides a constant value from the output of the ECS output register 704-1 (CCM field 32-34). The signals from the lines ZIDD 27-35 are applied as inputs to control flag flip-flops of block 704-110. The switch 701-178 receives an input from the control store 704-2, an input from cache unit 750 and an input from execution unit 714.</p><p>The data input register 704-164 receives a series of input signals from a ZIDD switch 704-180 which connects in series to a ZDIA switch 704-181 whose output provides one input of a further switch 704-182 which directly loads into the RDI register 704-164. The ZDIA switch 704-181 provides a further input to a three input switch 704-183 which receives the other inputs indicated from cache unit 750 and execution unit 714.</p><p>The ZIDD switch 704-180 receives an effective address via switch 704-186 from the address preparation unit 704-3 as well as inputs from the RBIR register 704-152, the RSIR register 704-154 and a two position ZMF switch 704-187. The positions 18 through 35 of the REA position of switch 704-180 are derived from the ZDIA switch 704-181 as shown. The ZDIA switch 704-181 receives signals from the ZDI lines 0-35, a constant value generated from the inputs to a first switch position in addition to signals from the output of the ZIDD switch 704-80 and the ZRESB switch in execution unit 714. The switch 704-182 receives the output of the ZDIA switch and signals from the ZDI lines 0-35. The RRDXB register 704-189 is loaded by a three position switch 704-108. The switch receives via a first position signals from a RREG register included in the execution unit, a constant value from control store 701-2 via a second position and signals from the ZIDD switch via a third position.</p><p>The section 704-150 further includes a two position switch 704-185 and a scratchpad pointer register 704-186 whose output is used by the AACU 722 to form addresses for access to the scratchpad memory of the EU 714. The first switch position provides a constant value and is selected under hardware control (FPOA\u00b7R29). The second switch position applies as an output the contents of the RBASA register 704-156. This position is selected under both hardware and microprogram control (i.e., FPOA\u00b7R29 or MISCREG field).</p><p>It will be appreciated that the required timing signals for operating section 704 as well as other sections of processor 700 and cache unit 750 are provided by centrally located clock circuits. For example, in the preferred embodiment of FIG. 1, the clock circuits are located within the input/output processor system. Such clock circuits can be considered as conventional in design and can comprise a crystal controlled oscillator and counter circuits. The timing or clocking signals from such clock circuits are distributed in a conventional manner to the various portions of the system of FIG. 1 for synchronized operation. From such timing signals, circuits within processor 700 derive additional clocking signals as required. This will be described in greater detail with respect to the cache unit 750 of FIG. 4.</p><h4>Address Preparation Unit 704-1</h4><p>The address preparation unit 704-3 includes a number of registers and adders. The registers include a number of base registers (i.e., TBASEO through TBASEB) of block 704-300 used for storing descriptor values of an instruction, a pair of temporary effective address registers (TEA0, TEA1) and a pair of instruction counters (ICBA, ICBB) included within block 704-302 used for addressing the instruction buffer and eight address registers (RAR0 through RAR7) of 704-304 used during address preparation operations. The unit 704-3 also includes an instruction counter 704-310.</p><p>The adders include adder 704-312 used to update instruction counter 304-310 via switches 704-311 and 704-314 and a pair of adders 704-320 and 704-322. The adder 704-322 is used to generate an effective address value which is stored in a register 704-342 applied as an input of the control unit 704-1. The effective address is generated from a number of sources which include ZY switch 704-326 whose output is applied via a number of AND gates of block 704-327, selected address registers of block 704-304 or selected temporary address registers TEA0 and TEA1 of block 704-302 applied via another switch 704-328 or the index address signals ZX0-20 from unit 704-5. Additionally, adder 704-322 is used to update the contents of the instruction counter of the cache instruction buffer.</p><p>As seen from FIG. 3d, the outputs from adder 704-322 are also applied as an input to the adder 704-320. The adder 704-320 is used to combine base value stored in any one of the temporary base registers TABASE0 through TBASEB with the address signals ACSOSO-19 from adder 704-322. The resulting bits are applied as an input to a further adder network 704-320 which generates a logical address which is applied to the lines ASFA0-36 via an adder 704-321. This adder sums the operand inputs together with the carry inputs from blocks 704-300 and 704-320. The effective address is used to obtain an absolute address when the system is operated in a paged mode. Since this operation is not pertinent to the present invention, it will not be discussed further herein. For further information regarding such address development, reference may be made to U.S. Pat. No. 3,976,987.</p><p>The temporary base registers of block 704-300 are loaded via a switch 704-322. The switch receives an input from the execution unit 714 and the output from block 704-300. The execution unit 714 applies further inputs to the registers of block 704-302 via a switch 704-334 as well as to the address registers of block 704-304. An output multiplexer (ZDO) switch 704-340 enables the selection of the various registers within the address preparation unit 704-3 and unit 704-5 for transfer of their contents to the execution unit 714 via lines ZDO 0-35. Also, the ZDO switch 704-340 enables the contents of various ones of the registers and control flip-flops of unit 704-1 to be read out via a fourth position (ZDO-A). The fifth position enables the states of various indicators within the control store circuits of block 701-1 to be selected for examination.</p><h4>Data/Address Output Section 704-4 FIG. 3e</h4><p>The section 704-4 includes the registers and switches used for transferring commands and data to the cache 750. Such transfer operations normally require at least two cycles, one for sending an address and another for sending the data. Bits 5-8 of a command word are derived from the output of a four position switch 704-40. This switch receives a first constant value via a first position, the contents of a RZN register 704-42 via a second position, a second constant value via a third position and a third constant value via a fourth position.</p><p>Bits 1-4 of a command are applied by the circuits of block 704-1 to an OR gate circuit 704-44 together with bits 5-8. The OR gate 704-44 also receives via a ZADO switch 704-46 bits 1-8 of an RADO register 704-48. The RADO register 704-48 is an address and data out register which receives via a first position of a ZADOB switch 704-48 a logical (virtual) address from address preparation unit 704-3 via the lines ASFA0-35 data output signals from the EU 714 via lines ZRESB0-35. The positions of the ZADOB switch 704-48 are under the control of the FMTD field for small CU format and the RADO field in the case of large CU format.</p><p>As seen from the Figure, either the ZZN1-8 bits or the ZADO bits 1-8 are applied as outputs to the RADO/ZADO lines as function of the state of control signal [RADO-ZADO. Bits O and I are always binary ONES while bits 10-35 are furnished by the RADO register 704-46.</p><p>For additional information regarding the remaining sections of processor 700 as well as the sections of FIGS. 3a through 3e, reference may be made to the copending applications referenced in the introductory portion of this application.</p><h4>CACHE UNIT 750--FIG. 4</h4><h4>General Description</h4><p>The cache unit 750 is divided into five primary sections: a transit buffer and command queue section 750-1, a cache section 750-3, a directory and hit control section 750-5, an instruction buffer section 750-7 and an instruction counter section 750-9.</p><h4>Transit Buffer and Command Queue Section 750-1</h4><p>The transit buffer and command queue section 750-1 includes as major elements a four word write command buffer 750-100 and a four word transit block buffer read command buffer 750-102 which are addressed via a pair of counter circuits 750-104 and 750-106 in addition to a command queue 750-107 with associated in and out address pointer and compare circuits of blocks 750-108 through 750-110. The write buffer 750-100 provides storage for two write single or one write double command while the transit block 750-102 provides storage for up to four read type commands. The transit block buffer 750-102 also stores information associated with such read commands used in controlling the writing of memory data words into assigned areas (i.e., levels) of cache section 750-3. The four registers allow up to four memory reads to be in progress at any given time.</p><p>Section 750-1 also includes a control section 750-112. This section includes sets of different control circuits such as the command decoder and control circuits of blocks 750-113 and 750-114, the interface control circuits of blocks 750-115 and 750-116 and hold control circuits of block 750-117.</p><p>The circuits of blocks 750-113 and 750-114 decode the signals applied to the DMEM lines representative of commands transferred by processor 700 via the RADO/ZADO lines of interface 604 and generate the control signals for making entries in the command queue 750-107, incrementing and setting values into the in pointer and out pointer circuits of blocks 750-108 and 750-109. Also, the circuits generate control signals for storing commands into either write buffer 750-100 or transit block buffer 750-102.</p><p>The interface control circuits of blocks 750-115 and 750-116 generate signals for controlling the transfer of data signals received from SIU 100 into section 750-7 and for commands including the transfer of such commands to the SIU respectively. The hold circuits of block 750-117 which receive signals from decoder circuit 750-113 generate control signals for holding the execution of commands in appropriate situations (e.g. directory section busy) and controlling the loading of data into section 750-7.</p><p>As seen from FIG. 2, the transfer of write command control words proceed from buffer 750-100 via the third position of four position (ZDTS) switch 750-118, a data register 750-119 and the first position of two position switch 750-120. The write data words are transferred from buffer 750-100 to SIU 100 via a write data register 750-121 and the second position of switch 750-120. The RWRT position of switch 750-120 is selected for one (write single command) or two (write double command) clock intervals following receipt of a signal from SIU 100 via the ARA line made in response to a signal placed on line AOPR by cache 750 for transfer of the write command. Read commands are transferred from the read command portion of transit block buffer 750-102 to SIU 100 via the fourth position (ZTBC) of the ZDTS switch 750-118, register 750-119 and the first position of switch 750-120.</p><p>The multiport identifier lines MITS receive zone bit signals via a RMITS register 750-124 and a two position switch 750-125 for the second data word in the case of a write double command. As seen from the Figure, this switch receives signals from command queue 750-107 and processor 700. That is, when cache 750 issues a read command, transit block number signals from queue 750-107 are loaded into bit positions 2 and 3 of RMITS register 750-124.</p><p>The transit block number signals are returned by SIU 100 on the MIFS lines with the read data word. These signals are loaded into an RMIFS register 750-127 via a multiposition switch 750-126. Thereafter, the contents of bit positions 2 and 3 are applied via the first position of a two position switch 750-128 to a pair of address input terminals of transit block buffer 750-102. A second RMIFSB register 750-129 primarily provides temporary storage of the transit block number signals for multiword transfers (i.e., quad read commands).</p><p>The output signals from switch 750-128 are also applied to the control input terminals of a four position ZTBA switch 750-130 for selecting the appropriate address signals to be applied to cache section 750-3 for storage of the data words. The address contents of the transit block buffer 750-102 are also applied to one set of input terminals of a predetermined one of a group of compare circuits 750-132 through 750-135 for comparison with the address portion of a next command applied to a second set of input terminals of the comparator circuits via the RADO/ZADO lines. The result of the comparisons generated by a NAND gate 750-136 is applied to the hold control circuits of block 750-117.</p><p>As seen from FIG. 4, the zone bit signals of the ZAC command applied to the ZADOB lines 5-8, in the case of a write single command, or for the even word of a write double command, are loaded into a RZONE register 750-140 when the write command is loaded into write command data buffer 750-100. The output of RZONE register 750-140 is applied to the first position of a two position ZONE switch 750-144. The zone bit signals, applied to the lines DZD0-3 by processor 700 for the odd word of a write double command, are loaded into a RDZD register 750-142. The output of RDZD register 750-142 is applied to the second position of ZONE switch 750-144. The output signals ZONE0-3 are applied to the circuits of section 750-9 for controlling the writing of processor data into cache 750-300 as explained herein.</p><h4>Cache Section 750-3</h4><p>The section 750-3 includes a cache store 750-300 having 8192 (8K) 36-bit word locations organized into 128 sets of eight, eight word blocks. The unit 750-300 is constructed from bipolar random access memory chips, conventional in design.</p><p>The cache storage unit 750-300 is addressed by a 10-bit address RADR 24-33 applied via any one of a number of 4\u00d74 crossbar switches (e.g. 750-302a), conventional in design and the address registers associated therewith. As seen from the Figure, the crossbar switch receives address signals from several sources which include section 750-5, ZTBA switch 750-130 and section 750-7. The address signals appearing at the output of the crossbar switch are temporarily stored in the associated address register and applied to the address input terminals of cache storage unit 750-300.</p><p>During a write cycle of operation, the four sets of write control signals (WRT00100-WRT70100 through WRT03100-73100) generated by section 750-9, are applied to the cache storage unit 750-300 and are used to apply or gate clocking signals to the write strobe input terminals of the memory chips. This enables from one to four bytes of either a processor 700 data word from the ZADO/RADO lines of a memory data word from section 750-7 to be written into the addressed one of eight levels of cache storage unit 750-300. For processor data, the write signals are generated by decoding signals ZONE0-3 from switch 750-144. For memory data words, all of the zone signals are forced to binary ONES.</p><p>The appropriate level is established by the states of signals RTBLEV0100-2100 from transit block buffer 750-102 when writing memory data and by the hit level detected by directory circuits of block 750-512 when writing processor data. These signals are decoded by a decoder circuit 750-303 when enabled by a signal ENBMEMLEV100 from section 750-9.</p><p>During a read cycle of operation, the 36-bit word of each of the eight blocks (levels) is applied as an input to a 1 of 8 ZCD switch 750-306. The selection of the appropriate word is established by the states of a set of hit level signals ZCD010-210 generated by section 750-5. These signals are applied to the control input terminals of ZCD switch 750-306.</p><p>As seen from the Figure, the selected word is applied to a pair of registers 750-308 and 750-310, a 1 of 8 ZDI switch 750-312 and a 1 of 4 ZIB switch 750-314. The RIRA and RIRB registers 750-308 and 750-310 apply their contents to different positions of the ZIB and ZDI switches 750-312 and 750-314. The ZIB switch 750-314 selects instructions which are applied to the instruction bus (ZIB) of processor 700 while the ZDI switch 750-312 selects data or instructions or aperands or operands which are applied to the data in bus (ZDI) of processor 700.</p><p>In addition to applying instruction word signals read out from cache 750-300, the ZIB switch 750-314 also applies instruction word signals received from section 750-7 to processor 700. The ZDI switch 750-312 also applies data signals received from the ZCDIN siwtch 750-304 and section 750-7 to processor 700. The states of the control signals [ZIB010-110 and [ZDI010-210 applied to the control input terminals of switches 750-314 and 750-312 select the sources of instructions and data words to be transferred to processor 700 by such switches. The control signals are generated by the circuits of section 750-9.</p><p>In greater detail, the [ZIB010-110 signals are coded to select position #2 of switch 750-314 for a first instruction transfer in response to the detection of a directory hit for an I fetch 1 command or a directory hit for an I fetch 2 command following an I fetch 1 command to the last word in a block. The control signals are coded to select the RIRA position #1 for subsequent instruction transfers following a directory hit generated in response to an I fetch 1 or I fetch 2 command.</p><p>Where the I fetch 1 or I fetch 2 command results in a directory miss, the [ZIB010-110 signals are coded to select position #3 of ZIB switch 750-314 for transfer of instruction words received from section 750-7.</p><p>As concerns the ZDI switch 750-312, the ZCD position #1 is selected in response to the detection of directory hits and signals applied to the RDIBUF/ZDI line in response to a directory hit generated for a LDQUAD command. Memory data words are transferred to processor 700 via the ZDIN position #3 of the switch 750-312 following a directory miss. Following holding processor 700 for an instruction fetch from main memory, the signals [ZDI010-210 are coded to select the ZDIN position of switch 750-312 for transfer of the first instruction upon its receipt by section 750-7. The remaining instructions are transferred via ZIB switch 750-314.</p><p>The ZCDIN position #2 of switch 750-312 is used for diagnostic purposes to transfer signals from the ZADO-B/RADO lines. The remaining positions of ZDI switch 750-312 are used for display purposes (i.e., positions RIRB, ZRIB and RIRA). Also, position RIRB is selected to transfer data words to processor 700 in the case of a LDQUAD command when there is a directory hit.</p><h4>Directory and Hit Control Section 750-5</h4><p>This section includes an eight level control directory 750-500 and eight level set associative address directory 750-502. The directory 750-502 contains 128 locations, each location containing a 14-bit associative address for each level. A four position ZDAD switch 750-530 provides the random access memory (RAM) addresses for addressing directories 750-500 and 750-502 in addition to cache storage unit 750-300.</p><p>During a directory search cycle of operation, switch 750-530 under the control of signals SELZDADC0100-1100 generated by circuits within a block 750-526 selects RADO position 0. This applies the 14-bit address signals of a ZAC command from lines RADO 24-33 from processor 700 to the output terminals of the ZDAD switch 750-530. These signals are applied to the address input terminals of directories 750-500 and 750-502. During the search cycle, the contents of eight block/level addresses are read out and applied as one input of each of a group of eight comparator circuits 750-536 through 750-543. Each comparator circuit compares its block/level address with bits 10-23 of the ZAC command to determine a hit or miss condition. The results generated by the circuits 750-536 through 750-543 are applied to corresponding inputs of a group of AND gates 750-545 through 750-552. Each comparator circuit is made up of four sections, the results of which are combined in one of the AND gates 750-545 through 750-552. The final result hit signals ZHT0100 through ZHT7100 are applied as inputs to hit/miss network circuits of block 750-512 as explained herein.</p><p>The ZAC address signals are also saved in an RDAD register 750-532 when no hold condition is detected (i.e., signal [HOLD-DMEM from 750-112 is a binary ZERO). During the directory assignment cycle following the search cycle which detected a miss condition, signals SELZDADC0100-100 select RDAD position 1 of ZDAD switch 750-530. Also, a RDRIN register 750-534 is loaded with the 14-bit associative address signals from the ZADO-B lines 10-23 when the directory search cycle is completed for writing into the directory 750-502.</p><p>The control directory 750-500 also includes 128 locations, each having a predetermined number of bit positions for storing control information. Such information includes the full-empty (F/E) bits for the eight levels and round robin (RR) count bits in addition to parity check bits (not shown).</p><p>The full-empty bits indicate whether the particular directory addresses have any significance (i.e., are valid). For a cache hit to occur, the F/E bit must be set to a binary ONE. A binary ZERO indicates the presence of an empty block or portion thereof. The round robin bits provide a count which indicates which block was replaced last. This count when read out via one of the two sets of AND gates of block 750-504 into a register 750-506, is normally incremented by one by an increment adder circuit 750-508. The resulting signals NXTRR0-RR2 are written into directory 750-500 to identify the next block to be replaced.</p><p>As seen from the Figure, the F/E bit contents of the location are read out via the positions of a two position ZFER selector switch 750-506 and applied as inputs to the directory hit/miss and hit control circuits of block 750-512. The ZFER switch 750-506 selects which half of a group of F/E bits are to be used by the circuits of block 750-512 for a hit/miss indication and which half of the group of F/E bits are to be used by such circuits for an alternate hit determination. An address bit signal ZDAD31 controls the selection of switch positions.</p><p>The circuits of block 750-510 include a multi-section multiplexer circuit which generates the output signals FEDAT0100 and FEDAT1100 as a function of the hit and miss data pattern. Accordingly, these signals are set in response to the ALTHIT signal from the circuits of block 750-512. A pair of decoder circuits 750-520 and 750-521 operate to decode the level information signals ZLEV0100-2100 for generating appropriate sets of write enable strobe signals R/WFE010-210 and R/WLV0100-710 for control directory 750-500 and address directory 750-502. Thus, level (ZLEV) switch 750-522 operates to control the level at which F/E bits are set or reset and the level in the address directory 750-502 at which new addresses are written during a directory assignment cycle of operation.</p><p>As seen from the the Figure, the first position of ZLEV switch 750-522 when selected, applies to its output terminals signals OLDRR010-210 from directory 750-500. The second position of switch 750-522 when selected applies to its output terminals signals RLEVR0-R2 from a level register 750-524. The level register 750-524 is used to save the last set of hit level signals generated by the hit/miss level network circuits of block 750-512. This permits the hit level value to distribute to other sections of cache 750 for subsequent use (i.e., signals RHITLEV0-2).</p><p>The third position of switch 750-522 when selected applies to its output terminals, signals LEVR0-R2 generated by the circuits of block 750-512. The switch 750-522 is controlled by signals from control flip-flops included within block 750-526 (i.e., signals FBYPCAC and DIRBUSY). As seen from the Figure, the complements of the level signals stored in register 750-524 corresponding to signals RHITLEV010-210 are applied via a group of AND gates to control circuits within section 750-9.</p><p>During the search cycle of operation, the hit/miss level network circuits detect which level, if any, contains an address which matches the ZAC address. In the case of a match, it forces signal RAWHIT100 to a binary ONE and generates therefrom the sets of hit level signals ZCD010-210 and HITLEVC7010-7210 through an encoding circuit. The signals are generated in accordance with the states of the F/E bit signals ZFE010-710. That is, for a cache hit to occur at a given level, the F/E bit must be a binary ONE. As mentioned above, a binary ZERO indicates the presence of an empty block level. Each encoder circuit includes AND/OR gating circuits, conventional in design which generate the level signals in accordance with the Boolean expression ##EQU1## Additionally, the signals ZCD010-210 also may be generated from the level signals ZNICLEV000-2100 provided by section 750-9 during instruction fetches.</p><p>The block 750-512 also includes an alternate hit network which can also be used in the assignment of an eight word block by generating an alternate hit signal ALTHIT100 and a set of signals ALTHITLEV0100-2100 for loading into register 750-504 in place of the round robin assignment signals C7RR0100-2100. For the purpose of the present invention, such arangements can be considered conventional in design. Reference may be made to U.S. Pat. No. 3,820,078 listed in the introductory portion of this application.</p><p>As seen from the Figure, the circuits of block 750-512 generate other hit signals HITTOTB100, HITTOC7100 and HITTOIC100. These signals are derived from signal RAWHIT100 in accordance with the following Boolean expressions:</p><p>1. HITTOC7100=RAWHIT100\u00b7BYPCAC000.</p><p>2. HITTOIC100=HITTOC7100.</p><p>3. HITTOTB100=RAWHIT100\u00b7BYPCAC000+PRERD100\u00b7BYPCAC100.</p><p>The circuits of block 750-512 receive the cache bypass signals BYPCAC000 and BYPCAC100 from block 750-526. As mentioned, this block includes a number of control state flip-flops which generate signals for sequencing the section 750-5 through various required operations for the processing of the various types of commands. Additionally, block 750-512 includes logic circuits for generating required control signals during such operations. For the purpose of the present invention, these circuits may be implemented in a conventional manner. Therefore, in order to simplify the description herein, only a brief description and the Boolean expressions will be given for certain control state flip-flops and control logic circuits as required for an understanding of the operation of the present invention.</p><h4>CONTROL STATE FLIP-FLOPS</h4><p>The FJAM1 flip-flop is set in response to a hit condition at the end of a directory search cycle for a read double command. The flip-flop holds the lower address bits in register(s) 750-32 enabling the accessing of the second word from cache storage unit 750-300 in the case of a read double command. Also, the flip-flop is set in response to a write signal command to cause the selection of the RDAD position of the ZDAD switch 750-530 for providing or causing the same address to be applied to cache storage unit 750-500 for one more clock interval or cycle. In the absence of a hold condition (signal [HOLDDMEM=1), the FJAM1 flip-flop remains set for one cycle in accordance with the following Boolean expression:</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->SET=FJAM1=REQCOMB\u00b7RAWHIT\u00b7BYPCAC\u00b7(RDDBL+WRTSNG)+HOLDDMEM\u00b7FJAM2+HOLDDMEM\u00b7FJAM1.</pre><p>The FJAM2 flip-flop is set in response to a hit condition at the end of a directory search cycle for a write double command. The setting of the FJAM2 flip-flop causes the setting of the FJAM1 flip-flop at the end of the next clock interval. The control state of the FJAM2 flip-flop together with the FJAM1 flip-flop causes the selection of the RDAD position of ZDAD switch 750-530 for providing the proper address for writing data into cache storage unit 750-300.</p><p>The FJAM2 flip-flop also remains set for one cycle in accordance with the following Boolean expression:</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->SET=FJAM2=REQCOMBO\u00b7RAWHIT\u00b7BYPCAC\u00b7WRTDBL+HOLDDMEM\u00b7FJAM2.</pre><p>A flip-flop NRMPTC1 directly controls the ZDAD switch 750-530 and is set in accordance with the states of signals generated by the other control state flip-flops.</p><p>The NRMPTC1 flip-flop normally remains set for one cycle in accordance with the following Boolean expression:</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->__________________________________________________________________________\n SET = NRMPTC1 =                                                          \n            ##STR3##                                                      \n           FJAM2 + SETFJAM1 + REQCOMBO \u00b7 (RDTYPE \u00b7      \n            ##STR4##                                                      \n__________________________________________________________________________\n</pre><p>The FDIRASN flip-flop specifies a directory assignment cycle of operation wherein an associative address entry is written into address directory 750-500 in the case of miss conditions or cache bypass operations for read type commands.</p><p>The FDIRASN flip-flop is set for one cycle in accordance with the following Boolean expression:</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->SET=FDIRASN=REQCOMBO\u00b7RDTYP\u00b7(BYPCAC+RAWHIT).</pre><p>The FICENAB flip-flop enables the loading of the instruction register and is set for one cycle in response to a 1/2 T clock pulse in accordance with the following Boolean expression.</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->SET=FHT100.</pre><p>The FRCIC flip-flop is set for one cycle in response to a 1/2 T clock pulse in accordance with the following Boolean expression.</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->SET=FJAMZNICLEV.</pre><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->__________________________________________________________________________\nCONTROL LOGIC SIGNALS                                                     \n__________________________________________________________________________\n  The ALTHIT signal indicates the presence of a                           \n  pseudo hit condition.                                                   \n  ALTHIT = ALTLEV0 + ALTLEV1 + ...ALTLEV7.                                \n  The signals ALTHITLEV0, ALTHITLEV1 and ALTHITLEV2                       \n  provide a three bit code which specifies the level                      \n  at which a pseudo hit condition occurred. The signals                   \n  are coded as follows:                                                   \n  a. ALTHITLEV0 = ALTLEV4 + ALTLEV5 + ALTLEV6 + ALTLEV7.                  \n  b. ALTHITLEV1 = ALTLEV2 + ALTLEV3 + ALTLEV6 + ALTLEV7.                  \n  c. ALTHITLEV2 = ALTLEV1 + ALTLEV3 + ALTLEV5 + ALTLEV7.                  \n  The signals ALTLEV0 through ALTLEV7 indicate which                      \n  one of the eight levels, if any, has detected a                         \n  pseudo hit condition.                                                   \n   ##STR5##                                                               \n   ##STR6##                                                               \n  The DIRADDE signal is an enabling signal for decoder                    \n  750-521 which allows the generation of write                            \n  strobe signals applied to address directory 750-500.                    \n   ##STR7##                                                               \n  The DIRBUSY signal indicates when the directories                       \n  750-500 and 750-502 are busy.                                           \n  DIRBUSY = FLSH + FJAM2 + FJAM1 + FDIRASN.                               \n  The FEDCODE signal is an enabling signal for decoder                    \n  750-520 which allows the generation of write strobe                     \n  signals applied to control directory 750-500.                           \n   ##STR8##                                                               \n  The FORCEBYP signal enables a cache bypass operation                    \n  to take place.                                                          \n  FORCEBYP = FSKIPRR + FBYPCAC.                                           \n  The GSRCH signal indicates when a search cycle of                       \n  operation is to take place.                                             \n   ##STR9##                                                               \n  The signals HITLEVC70, HITLEVC71 and HITLEVC72 provide                  \n  a 3-bit code which specifies the level at which a hit                   \n  condition has occurred.                                                 \n  a. HITLEVC70 = HITLEV4 + HITLEV5 + HITLEV6 + HITLEV7.                   \n  b. HITLEVC71 = HITLEV2 + HITLEV3 + HITLEV6 + HITLEV7.                   \n  c. HITLEVC72 = HITLEV1 + HITLEV3 + HITLEV5 + HITLEV7.                   \n10.                                                                       \n  The signals HITLEV0 through HITLEV7 indicate which                      \n  one of the eight levels, if any, has detected a hit                     \n  condition.                                                              \n   ##STR10##                                                              \n  b. HITLEV7 = ZFE7 \u00b7 ZHT7.                                      \n  The RAWHIT signal indicates the detection of a hit                      \n  condition.                                                              \n  RAWHIT = HITLEV0 + ... + HITLEV7.                                       \n  The HITTOC7 and HITTOIC signals each indicates the                      \n  detection of a hit condition to certain circuits                        \n  within section 750-9.                                                   \n   ##STR11##                                                              \n  The HITTOTB signal indicates the detection of a hit                     \n  condition or a pre-read command when in the bypass                      \n  mode to the transit block buffer circuits.                              \n   ##STR12##                                                              \n  The LDRAD signal enables the loading of the RDAD                        \n  register 750-532.                                                       \n   ##STR13##                                                              \n  The LDRDRIN signal enables the loading of RDRIN                         \n  register 750-534.                                                       \n   ##STR14##                                                              \n  The signal RDDBLZCDE is used to enable the ZCD                          \n  switch 750-306 in the case of a read double command.                    \n   ##STR15##                                                              \n  The REQCOMBO signal indicates the presence of a cache                   \n  request.                                                                \n   ##STR16##                                                              \n  The ZCD0, ZCD1 and ZCD2 signals are used to control                     \n  the operation of the ZCD switch 750-306.                                \n  a. ZCD0 = ZCDL4 + ZCDL5 + ZCDL6 + ZCDL7 + ZNICLEV0 \u00b7           \n  ZCDICENAB + RDDBLLO.                                                    \n  b. ZCD1 = ZCDL2 + ZCDL3 + ZCDL6 + ZCDL7 + ZNICLEV1 \u00b7           \n  ZCDICENAB + RDDBLL1.                                                    \n  c. ZCD2 = ZCDL1 +  ZCDL3 + ZCDL5 + ZCDL7 + ZNICLEV2 \u00b7          \n  ZCDICENAB + RDDBLL2                                                     \n  wherein the term(s) ZCDLi is ZCDLEVi.                                   \n  The ZFEDATWT1 signal is a data write strobe signal                      \n  used for writing F/E bit signals FEDAT0100 and                          \n  FEDAT1100 into directory 750-500.                                       \n  ZFEDATWT1 = FDIRASN \u00b7 ZDAD31.                                  \n20.                                                                       \n  The FEDAT0100 signal corresponds to the first full/                     \n  empty bit.                                                              \n  FEDAT0100 = FBYPCAC000 + FALTHIT100.                                    \n  The FEDAT1100 signal corresponds to the second                          \n  full/empty bit.                                                         \n  FEDAT1100 = FALTHIT100 + FBYPCAC000.                                    \n  The SELZDADC1 signal controls the operation of the                      \n  ZDAD switch 750-530.                                                    \n  SELZDADC1 = NRMPTC1.                                                    \n  The RWRR signal is a round robin write signal used                      \n  for writing the RR bit signals back into directory                      \n  750-500.                                                                \n   ##STR17##                                                              \n__________________________________________________________________________\n</pre><p>It will be seen from the Figure that the different decoded command signals are generated by a decoder circuit 750-528 in response to the signals applied to the DMEM lines 0-3 by processor 700. The decoder 750-528 is enabled by a signal from the DREQCAC line. The decoded command signals (e.g. WRTDBL, WRTSNG, PRERD, RDTYPE) together with other control signals such as [HOLDDMEM, FSKIPRR00 and those from the lines [CANCELC AND BYPCAC are applied as inputs to the circuits of block 750-526.</p><h4>Instruction Buffer Section 750-7</h4><p>This section receives memory data and instructions from the DFS lines which are transferred to processor 700 via the ZDI switch 750-312 and ZIB switch 750-314 respectively. The memory signals are loaded into an RDFS register 750-702 via one position of a two position switch 750-700.</p><p>Memory data fetched as a result of a miss condition upon receipt is applied to the ZDI switch 750-312 via the RDFS position #0 of a 1 of 4 position (ZDIN) switch 750-708. In the case of a load quad command, memory data is loaded into the 4 location (LQBUF) buffer 750-706 when the [LQBUF signal is forced to a binary logical ONE. The write/read address signals [WRTBUF010-110/[RDBUF010-110 from section 750-112 control the writing and reading of data into and from the locations of buffer 750-706.</p><p>The memory data stored in the LQBUF buffer 750-706 is then transferred to the ZDI via the RLQBUF position #2 of the ZDIN switch 750-708.</p><p>In the case of a read double command, the even word of the pair is transferred into a REVN register 750-710. Thereafter, the even word is transferred to the ZDI switch 750-312 via position #1 of ZDIN switch 750-708 for execution of a read double odd command request or upon receipt of a RD-EVEN signal from processor 700.</p><p>As seen from the Figure, each memory data word is also loaded into the RDFSB register 750-712 and thereafter written into cache storage unit 750-300 via the ZCDIN switch 750-304 at the level specified by the contents of the RADR register 750-32.</p><p>In the case of instruction transfers, each instruction received from memory is loaded into one of the 4 storage locations of a specified one (IBUF1/IBUF2) of a pair of instruction buffers 750-715 and 750-717. The IBUF1 and IBUF2 buffers 750-715 and 750-717 are used to buffer up to two four word blocks that can be accessed from memory in response to I fetch 1 or I fetch 2 commands for which a miss condition has been detected.</p><p>The instructions are written into the location of one of the IBUF1 and IBUF2 buffers 750-715 and 750-717 specified by signals [WRTBUF0100-1100 under the control of write strobe signals [IBUF1/[IBUF2. Read control signals [RDBUF0100-1100 enable the read out of such instructions for transfer to processor 700 whenever the IBUF1 or IBUF2 location specified by the signals [ZEXT0100-1100 contains an instruction. The instruction is transferred to processor 700 via positions 1 or 2 of a two position switch 750-720 and the ZRIB switch position of the ZIB switch 750-314.</p><p>The IBUF1 and IBUF2 buffers 750-715 and 750-717 apply output valid signals IBUF1V100 and IBUF2V100 to IBUFREADY circuits of block 750-722. These circuits force IBUFRDY line to a binary ONE indicating that there is at least one instruction in the I buffer being addressed (current instruction block). As seen from the Figure, the IBUFREADY circuits receive input signals (e.g. USETBRDY, IFETCHRDY) from control circuits within section 750-9.</p><h4>Instruction Counter Section 750-9</h4><p>This section stores cache address signals (24-33) for indicating the next instruction to be accessed, in one of two instruction address registers (RICA/RICB) 750-900 and 750-902. The cache address signals 24-33 are loaded into the instruction register RICA/RICB not being used when an IFETCH1 command is received from processor 700. The cache address is transferred via the RADO position of ZDAD switch 750-530 and a ZDAD position #0 of a 4 position ZICIN switch 750-904.</p><p>Each time processor 700 accesses an instruction, the contents of the instruction register RICA/RICB read out via one position of a two position ZIC switch 750-906 are incremented by one via an increment circuit 750-908. The incremented contents are returned to the instruction register RICA/RICB via the RNIC position #1 of ZICIN switch 750-904.</p><p>As seen from the Figure, each instruction register stores two level fields for fetching first and second blocks of instructions in response to IFETCH1 and IFETCH2 commands. The two pairs of level field signals are applied to the different switch positions of a 4 position crossbar switch 750-910. The selected level signals ZNICLEV0100-2100 applied as inputs to block 750-512 are used to control the operation of ZCD switch 750-306 for accessing the instructions specified by the instruction register RICA/RICB. The level field signals correspond to signals HITLEVC70100-2100 which are generated by the circuit of block 750-512. These signals are loaded into one of the instruction registers following a directory assignment cycle of operation.</p><p>In addition to the level field signals, the RICA and RICB instruction address registers store other signals used for various control purposes which will be discussed herein to the extent necessary.</p><p>The incoming cache address signals from the ZDAD switch 750-530 are incremented by one via another increment circuit 750-912. The incremented address signals are loaded into the RICA/RICB instruction register via the INC position #3 of ZICIN switch 750-904. The least significant two bits 32-33 of the cache address provide the IBUF1 or IBUF2 address (i.e., signals ZEXT0100-1100) to read out instruction blocks accessed from memory.</p><p>It will be noted that the pair of level field signals LEV1 and LEV2 from other outputs of switch 750-910 are applied as inputs to a pair of comparator circuits 750-912 and 750-914. The circuits 750-912 and 750-914 compare the level signals LEV1 and LEV2 of the current instruction block from switch 750-910 with the input level signals C7RR0100-2100 corresponding to the round robin count for the next available block. Also, the comparator circuit 750-912 receives as inputs memory level signals RTBLEV0100-2100 and instruction level signals ZNICLEV0100-2100 from switch 750-910 for comparison in addition to level signals ZIC0100-2100 for comparison with signals C7RR0100-2100. The cache address signals are incremented by 4 by an increment circuit 750-918 and applied as an input to the round robin skip control circuits of block 750-916. These circuits receive as another pair of inputs the input cache address signals 24-30 from ZDAD switch 750-530 and the cache address signals of the current instruction block from ZIC switch 750-906 for comparison by circuits included therein.</p><p>The results of the pairs of cache address signals and level signal comparison are combined within other circuits within the round robin skip control circuits of block 750-916. The circuits of block 750-916, in response to decoded signals from a decoder circuit 750-922, generate output control signals which avoid addressing conflicts. For a further discussion of the operation of such circuits, reference may be made to the copending application of Marion G. Porter, et al titled \"Cache Unit Information Replacement Apparatus\" referenced in the introduction of this application.</p><p>The output control signals from block 750-916 are applied as inputs to the circuits of IC control block 750-920. Additionally, the control circuits of block 750-920 receive the results of the decoding of command signals applied to the DMEM lines by the decoder circuit 750-922 when it is enabled by a signal from the DREQCAC line. These decoded signals together with the other signals from sections 750-1 and 750-5 are applied to block 750-920. The control circuits of block 750-920 generate address and control signals for sequencing section 750-9 through the required cycles of operation for processing certain types of commands (e.g. IFETCH1, IFETCH2 and LDQUAD commands).</p><p>The block 750-920 includes a number of control state flip-flops and logic circuits for generating the required control signals. For the same reasons mentioned in connection with section 750-5, only a brief description and the Boolean expressions will be given for certain state flip-flops and control circuits.</p><h4>CONTROL STATE FLIP-FLOPS</h4><p>FABCURLEV1 flip-flop defines the current level for the RICA/RICB instruction register. This flip-flop is set and reset in response to a T clock timing signal in accordance with the following Boolean expressions. The set condition overrides the reset condition. When FA/FBCURLEV is a binary ZERO, it selects level 1 and when a binary ONE, it selects level 2.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->__________________________________________________________________________\n SET =                                                                    \n       ##STR18##                                                          \n      ZDAD08 \u00b7 ZDAD09 \u00b7 HIT \u00b7 FACTVRIC100/000  \n      + ZEXT0 \u00b7                                                  \n      ZEXT1 \u00b7 RDIBUF \u00b7 HOLDEXECRDIBUF \u00b7        \n      FA/FBCURLEV000 \u00b7                                           \n       ##STR19##                                                          \n       ##STR20##                                                          \n       ##STR21##                                                          \n RESET =                                                                  \n       ##STR22##                                                          \n       ##STR23##                                                          \n       ##STR24##                                                          \n       ##STR25##                                                          \n       ##STR26##                                                          \n__________________________________________________________________________\n</pre><p>The FACTVRIC flip-flop specifies the currently active instruction register RICA/RICB. When the flip-flop is set to a binary ONE, it specifies the RICA register and when a binary ZERO, it specifies the RICB register. It is set and reset in response to a T clock timing pulse signal in accordance with the following Boolean expressions.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->__________________________________________________________________________\n ##STR27##                                                                \n          =                                                               \n            FACTVRIC \u00b7 TGLACTVRIC                                \nwherein                                                                   \n TGLATVRIC                                                                \n          =                                                               \n            ##STR28##                                                     \n            ##STR29##                                                     \n FACTVRIC                                                                 \n          =                                                               \n            ##STR30##                                                     \n TGLACTVRIC                                                               \n          =                                                               \n            ##STR31##                                                     \n            ##STR32##                                                     \n__________________________________________________________________________\n</pre><p>The FCPUWRTREQ flip-flop defines the time during which processor data is to be written into cache. It is set and reset in response to a T clock timing pulse in accordance with the following Boolean expressions.</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->SET=(DECODEWRTSNGL+DECODEWRTDBL)\u00b7HIT\u00b7[HOLDDMEM\u00b7[CANCELC.</pre><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->RESET=FWRTDBL\u00b7HOLDCACHECPUWRTSEQ.</pre><p>The FDBLMISS flip-flop defines a read double type miss condition and is used to select the ZDIN position of ZDI switch 750-312 during the cycle following data recovery. It is set and reset in response to a T clock timing pulse in accordance with the following Boolean expressions.</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->SET=(DECODERDDBL+DECODERDRMT)\u00b7[HOLDDMEM\u00b7[CANCELC.multidot.MISS.</pre><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->RESET=FRDMISS.</pre><p>The FEVENODD flip-flop specifies which word of the two word pairs processor 700 is waiting for when a read single type miss condition occurs. The flip-flop also defines the order that the data words are to be returned to processor 700 in the case of a read double type miss condition.</p><p>Further, the flip-flop is used during a read double hit condition to access the second data word. It is set and reset in response to a T clock timing pulse in accordance with the following Boolean expressions.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->__________________________________________________________________________\nSET = (DECODERDSNGL + DECODEIF1 \u00b7 FFPIMEIS) \u00b7           \n       ##STR33##                                                          \n       ##STR34##                                                          \n RESET =                                                                  \n       ##STR35##                                                          \n       ##STR36##                                                          \n       ##STR37##                                                          \n       ##STR38##                                                          \n__________________________________________________________________________\n</pre><p>The FFPIMEIS flip-flop specifies that the last processor state was an FPIMEIS state which means that the IF1 command on the DMEM lines is a request for additional EIS descriptors. This flip-flop is set and reset in response to a T clock pulse in accordance with the following Boolean expressions.</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->SET=FPIMEIS.</pre><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->RESET=DECODEIF1\u00b7[CANCELC\u00b7[HOLDDMEM.</pre><p>The FHOLDIF1 flip-flop defines when processor 700 is being held because of an IF1 miss condition so that when the instruction is received from memory, the current instruction register RICA/RICB can be updated by the FDATARECOV flip-flop. The flip-flop is set and reset in response to a T clock pulse in accordance with the following Boolean expressions.</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->SET=DECODEIF1\u00b7IFPIMEIS\u00b7[HOLDDMEM\u00b7[CANCELC.multidot.MISS.</pre><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->RESET=FNEWIF1\u00b7NOGO+FDATARECOV.</pre><p>The FINHRDY flip-flop is used to inhibit the signaling of an IBUFRDY condition to processor 700 when a conflict occurs between the instruction (IC) level and memory data level at the time processor 700 took the instruction loaded into RIRA/RIRB from cache. It is set in response to a T clock pulse and is reset unconditionally on the next T clock pulse when no set condition is present. It is set in accordance with the following Boolean expression.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->__________________________________________________________________________\n SET =                                                                    \n          ##STR39##                                                       \nwherein                                                                   \nSETIRTERM =                                                               \n         CMPDATAICLEV + MEMWRTREQ \u00b7                              \n          ##STR40##                                                       \n         DECODEIF1 \u00b7 FFPIMEIS + FINHRDY).                        \n RESET =                                                                  \n          ##STR41##                                                       \n__________________________________________________________________________\n</pre><p>The FJAMZNICLEV flip-flop is used to force the level signals ZNICLEV000-2100 of the next instruction to be applied to the control input terminals of ZCD switch 750-306 (i.e., signals ZCD010-210) following an IF1 command which did not specify the last word in the block. The flip-flop is set in response to a T clock pulse in accordance with the following Boolean expression. It is reset on the occurrence of the next T clock pulse.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \n SET =                                                                    \n        ##STR42##                                                         \n        ##STR43##                                                         \n______________________________________                                    \n</pre><p>The FNEWIF1 flip-flop defines the cycle after an IF1 command is received from processor 700. It is set for one cycle in response to a T clock pulse in accordance with the following Boolean expression.</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->SET=DECODEIF1\u00b7FFPIMEIS\u00b7[HOLDDMEM\u00b7[CANCELC.</pre><p>The FRDIBUF flip-flop is used to specify that a signal on the RDIBUF line was received from processor 700 during the last cycle of operation. It is set in accordance with the following Boolean expression. It is reset during the next cycle in the absence of a set condition.</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->SET=RDIBUF\u00b7HOLDEXECRDIBUF\u00b7NOGO.</pre><p>The FRDMISS flip-flop is used to cause the holding of processor 700 upon detecting a miss condition for any read type command. It is set and reset in response to a T clock pulse in accordance with the following Boolean expressions.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \nSET =   DECODERDSNGL + (DECODEIF1 \u00b7                              \n         ##STR44##                                                        \n        + DECODERDCLR  + DECODERDDBL) \u00b7                          \n         ##STR45##                                                        \nRESET = FDATARECOV + FNEWIF1 \u00b7 NOGO.                             \n______________________________________                                    \n</pre><p>The FRDREQ flip-flop defines when the second word fetched in response to a RDDBL command for a hit condition is to be read out from cache. It is set and reset in response to a T clock pulse in accordance with the following Boolean expressions.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \nSET =   DECODERDDBL \u00b7 HIT \u00b7                             \n         ##STR46##                                                        \n RESET =                                                                  \n         ##STR47##                                                        \n______________________________________                                    \n</pre><p>The FDATARECOV flip-flop inhibits the incrementing of the instruction register RICA/RICB when the IF1 command is to the last word in the block and the IF2 command is cancelled. It is set and reset in response to a T clock pulse in accordance with the following Boolean expressions:</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \nSET =   DATARECOV \u00b7 FLASTINST \u00b7[HOLDDMEM \u00b7     \n        [CANCELC + DATARECOV                                              \n         ##STR48##                                                        \n         ##STR49##                                                        \nRESET = [HOLDDMEM \u00b7 FDATARECOV.                                  \n______________________________________                                    \n</pre><p>The FINITLDQD flip-flop is used to initialize the two least significant bits of a LDQUAD command address and then used to mask these two bits to ZEROS on subsequent LDQUAD commands of the same move instruction. It is set and reset in response to a T clock pulse in accordance with the following Boolean expressions.</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->SET=DECODELDQUAD\u00b7[HOLDDMEM\u00b7CANCELC.</pre><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->RESET=FE3110.</pre><p>The FLDQUAD flip-flop defines when the alternate instruction register is being used to address data. It is set and reset in response to a T clock pulse in accordance with the following Boolean expressions.</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->SET=DECODELDQUAD\u00b7[HOLDDMEM[CANCELC.</pre><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->RESET=ZEXT0\u00b7ZEXT1\u00b7FLDQUAD\u00b7RDIBUF\u00b7HOLDEXECRDIBUF+FE2110.</pre><h4>CONTROL LOGIC SIGNALS</h4><p>1. The FA/FBLEVIVAL signal is used to define the state sof a first valid bit position of the RICA/RICB instruction register. It is set and reset on a T clock pulse in accordance with the following Boolean expressions. The reset condition overrides the set condition.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->__________________________________________________________________________\n a. FA/FBLEV1VALSET                                                       \n               =                                                          \n                 ##STR50##                                                \n                 ##STR51##                                                \n                 ##STR52##                                                \n                 ##STR53##                                                \n                 ##STR54##                                                \n b. FA/FBLEVIVAIRESET                                                     \n               =                                                          \n                 ##STR55##                                                \n                 ##STR56##                                                \n                FACTVRIC100/000 + ZEXT0 \u00b7 ZEXT1 \u00b7       \n                 ##STR57##                                                \n                 ##STR58##                                                \n                 ##STR59##                                                \n                 ##STR60##                                                \n                 ##STR61##                                                \n__________________________________________________________________________\n</pre><p>where RICA=FACTVRIC=1 and RICB=FACTVRIC=1.</p><p>2. The FA/FBLEV2VAL signal is used to define the state of a second valid bit position of the RICA/RICB instruction register. It is set and reset on a T clock pulse in accordance with the following Boolean expressions.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->__________________________________________________________________________\n a. FA/FBLEV2VALSET                                                       \n                =                                                         \n                  ##STR62##                                               \n                  ##STR63##                                               \n                  ##STR64##                                               \n                 FACTVRIC000/100 \u00b7 EISIF2.                       \n b. FA/FBLEV2VALRESET                                                     \n                =                                                         \n                  ##STR65##                                               \n                  ##STR66##                                               \n                  ##STR67##                                               \n                 FACTVRIC100/000 + ZEXT0 \u00b7 ZEXT1 \u00b7      \n                  ##STR68##                                               \n                 FA/FBCURLEV \u00b7 FACTVRIC000/100                   \n                  ##STR69##                                               \n__________________________________________________________________________\n</pre><p>wherein RICA=FACTVRIC=1 and RICB=FACTVRIC=1.</p><p>3. The [ZIB0 and [ZIB1 signals control the ZIB switch for transfers of instructions from cache 750 to processor 700 via the ZIB lines.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \na. [ZIB0 = IFETCHRDY \u00b7 FNEWIF1.                                  \n ##STR70##                                                                \n______________________________________                                    \n</pre><p>4. The [ZDI0, [ZDI1 and [ZDI2 signals control the ZDI switch for transfers of instructions and data from cache 750 to processor 700 via the ZDI lines. Control signal [ZDI0, which corresponds to the most significant bit of the three bit code, can be assigned to be a binary ZERO unless positions 4 through 7 are being used for display purposes.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \na. [ZDI1 = DATARECOV + FDBLMISS + RDEVEN.                                 \n ##STR71##                                                                \n______________________________________                                    \n</pre><p>5. The [ZICIN0 and [ZICIN1 signals control the ZICIN switch for loading address signals into the RICA and RICB instruction address registers 750-900 and 750-902.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \n ##STR72##                                                                \nb. [ZICIN1 = FDFN1HT \u00b7 FNEWIF1 + FDFN2HT.                        \n______________________________________                                    \n</pre><p>6. The signals ENABRIC1 and ENABRIC2 are used to enable the loading RICA and RICB registers.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \n a. ENABRIC1 =                                                            \n            ##STR73##                                                     \n            ##STR74##                                                     \n           FHOLDIF1 \u00b7 DATARECOV.                                 \n b. ENABRIC2 =                                                            \n            ##STR75##                                                     \nwherein                                                                   \n ##STR76##  DFN2T \u00b7 [MEMWRTREQ                                   \n           (ZEXT0 \u00b7 ZEXT1 \u00b7 EXECIF2 \u00b7          \n            ##STR77##                                                     \n            ##STR78##                                                     \n            ##STR79##                                                     \n            ##STR80##                                                     \n______________________________________                                    \n</pre><p>7. The signal DATARECOV defines the time that new data has been loaded into the processor's registers (e.g. RDI or RBIR) and when the processor is released. This signal is generated by a flip-flop of section 750-1 which is set to a binary ONE in response to a T clock pulse upon detecting an identical comparison between the address signals specifying the words requested to be accessed by processor 700 and signals indicating the word being transferred to cache unit 750. The comparison indicates that signals DATA, MIFS2, MIFS3, MIFS1 and DATAODD are identical to signals FHT, FHOLDTB0, FHOLDTB1, RADR32 and DOUBLEODD respectively</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \nwherein signal FHOLDTB0 =                                                 \n                 FRDMISS \u00b7 LDTBVALID \u00b7                  \n                  ##STR81##                                               \nsignal FHOLDTB1 =                                                         \n                 FRDMISS \u00b7 LDTBVALID \u00b7                  \n                  ##STR82##                                               \nsignal DOUBLEODD =                                                        \n                 FEVENODD \u00b7 FDPFS; and                           \nsignal DATA =    FARDA + FDPFS.                                           \n______________________________________                                    \n</pre><p>8. The ZDIN signals enable ZDIN switch 750-708.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \n ##STR83##                                                                \nb. ZDIN1 = ENABREVN = 0 For LDQUADCMD.                                    \n______________________________________                                    \n</pre><h4>DETAILED DESCRIPTION OF SECTION 750-1</h4><p>FIG. 7a shows in greater detail different ones of the blocks of section 750-1. It will be noted that for the purpose of facilitating understanding of the present invention, the same reference numbers have been used to the extent possible for corresponding elements in FIG. 4. In many cases, a single block depicted in FIG. 4 includes several groupings of circuits for controlling the operation thereof and/or for generating associated control signals. Therefore, some blocks with appropriate reference numbers are included as part of the different blocks of section 750-1.</p><p>Referring to the Figure, it is seen that certain portions of block 750-102 are shown in greater detail. The transit block buffer 750-102 is shown as including a first group of circuits for keeping track of data words received from memory in response to a read quad type command. These circuits include a plurality of clocked pair count flip-flops which comprise a four-bit position register 750-10200, a multiplexer circuit 750-10202, a plurality of NAND gates 750-10204 through 750-10210 and a decoder circuit 750-10212. It will be noted that there is a pair count flip-flop for each transit buffer location.</p><p>Additionally, the first group of circuits includes a plurality of clocked transit block valid flip-flops which comprise a four-bit position register 750-10214. The binary ONE outputs of each of the flip-flops are connected to a corresponding one of the four pair count flip-flops as shown.</p><p>In response to a read quad command, a first pair of words is sent to cache 750. This is followed by a gap and then the second pair is sent to cache 750. The pair count flip-flop associated with the transit block buffer location being referenced as specified by the states of signals MIFS2110 and MIFS3110 is switched to a binary ONE via a first AND gate in response to T clock signal [CLKT022 when signal DATAODD100 is forced to a binary ONE by the circuits of block 750-114. Signal RESETTBV100 is initially a binary ZERO and decoder circuit 750-10212 operates to force one of the first four output signals SETPC0100 through SETPC3100 in accordance with the states of the MIFS2110 and MIFS3110 from switch 750-128.</p><p>The pair count flip-flop is held in a binary ONE state via the other input AND gate by a transit block valid signal associated therewith being forced to a binary ONE. The appropriate one of the transit block valid bit flip-flops designated by decoder circuit 750-10601 (i.e., signals IN0100 through IN3100) is set to a binary ONE via a first AND gate. When switching takes place, increment signal INCTBIN100 is forced to a binary ONE state in response to T clock signal [CLKT022.</p><p>The multiplexer circuit 750-10202 in accordance with the states of the signals DMIFS2100 and DMIFS3100 from switch 750-128 selects the appropriate binary ONE out of the four pair count flip-flops to be applied to NAND gate 750-10204. This causes NAND gate 750-10204 to force signal LASTODD100 to a binary ZERO. This results in NAND gate 750-10206 forcing signal LASTDTAODD000 to a binary ONE.</p><p>When the next pair of data words are received, this causes NAND gate 750-10206 to force signal LASTDTAODD000 to a binary ZERO. This, in turn, causes NAND gate 750-10210 to force reset signal RESETTBV1100 to a binary ONE. The decoder circuit 750-10212 is conditioned by signal RESETTBV100 to force one of the four output terminals 4 through 7 to a binary ONE. This, in turn, resets the appropriate one of the transit block valid bit flip-flops via the other AND gate. As soon as the TB valid flip-flop resets, it resets the pair count flip-flop associated therewith via its other AND gate. It will be appreciated that such switching occurs in response to T clock signal [CLKT022.</p><p>As seen from FIG. 7a, the first group of circuits of block 750-102 further includes a plurality of NAND gates 750-10216 through 750-10222, each of which is connected to receive a different one of the binary ONE outputs from register 750-10214. The binary ONE outputs FTBV0100 through FTBV3100 are also connected to the control input terminals of the transit block address comparator circuits 750-132 through 750-136.</p><p>Each of the NAND gates 750-10216 through 750-10222 also is connected to receive a different one of the signals IN0100 through IN3100 from decoder circuit 750-10601. The outputs from these gates are applied to an AND gate 750-10224. The signals VALID000 through VALID3000 are used to indicate when a transit block register location is available for writing. That is, when a selected transit block valid bit flip-flop is in a reset state, AND gate 750-10224 maintains signal VALIDIN000 in a binary ONE state.</p><p>The VALIDIN000 signal conditions a further AND/NAND gate 750-10226 to force a control signal [RTB100 to a binary ONE during the second half of a cycle of operation (i.e., signal FHT020 is a binary ONE) in the case of a read command (i.e., signal DREQREAD100 is a binary ONE) at the time a directory assignment is not being made (i.e., signal FLDTBVALID000 is a binary ONE).</p><p>As seen from FIG. 7a, control signal [RTB100 is applied via a driver circuit 750-10228 to a decoder circuit 750-10230. The control signal [RTB110 causes the decoder circuit 750-10230 to force an appropriate one of the output signals [RTB0100 through [RTB3100 designated by the states of signals FTBPTR0100 and FTBPTR1100 applied via a pair of driver circuits 750-10232 and 750-10234 to a binary ONE state. This in turn causes bit positions 24-31 of one of the transit block register locations to be loaded with address signals applied via the RADO lines 24--31. The complement signal [RTB000 is applied as an input to block 750-107 for controlling the loading of command queue 750-107.</p><p>A second group of circuits of block 750-102 shown in greater detail includes the transit block buffer flag storage section 750-10238 of buffer 750-102. This section as well as the section of buffer 750-102, not shown, is constructed from a 4\u00d74 simultaneous dual read/write memory. The memory is a 16-bit memory organized as 4 words of 4 bits each, only three bits of which are shown. Words may be independently read from any two locations at the same time as information is being written into any location. The signals FTBPTR0100 and FTBPTR1100 are applied to the write address terminals while the read addresses are enabled by the VCC signal applied to the G1 and G2 terminals. The Y bit locations are selected in accordance with the states of read address signals MIFS3100 and MIFS2100 from switch 750-128. The Z bit locations are selected in accordance with the states of signals DMIF3100 and DMIF2100 from switch 750-128. Since these locations are not pertinent they will not be discussed further herein.</p><p>The memory may be considered conventional in design, for example, it may take the form of the circuits disclosed in U.S. Pat. No. 4,070,657 which is assigned to the same assignee as named herein. Upon the receipt of memory data, the flag bit contents of the transit block location specified by signals MIFS2100 and MIFS3100 are applied to the Y output terminals. These signals are in turn applied to blocks 750-102, 750-115 and 750-117, as shown. During the directory assignment cycle for a cache read miss, the flag bit positions of the transit block location specified by signals FTBPTR0100 and FTBPTR1100 are loaded with the signals FORCEBYP000, FRDQUAD100 and FLDQUAD100 generated by the circuits of blocks 750-5 and 750-114.</p><p>It is also seen from FIG. 7a that block 750-102 further includes a group of instruction fetch flag circuits which are associated with the operation of transit block buffer 750-102. These circuits include two sets of input AND gates 750-10240 through 750-10243 and 750-10250 through 750-10253, a pair of multiplexer selector circuits 750-10255 and 750-10256, an IF1 and IF2 flag storage register 750-10258 and an output multiplexer circuit 750-10260 arranged as shown.</p><p>The binary ONE outputs of the individual IF1 and IF2 flip-flops are connected to corresponding ones of the sets of AND gates 750-10240 through 750-10243 and 750-10250 through 750-10253. These AND gates also receive input signals from the circuits of block 750-106 generated in response to the in pointer signals FTBPTR0000 and FTBPTR1000 used for addressing the different register locations within the buffer 750-102 as mentioned previously.</p><p>The multiplexer circuit 750-10255 is connected to receive as a control input, signal FIF1ASSIGN100 from FIF1ASSIGN flip-flop 750-11418. The multiplexer circuit 750-10256 is connected to receive as a control input signal FIF2ASSIGN100 from FIF2ASSIGN flip-flop 750-1410. This enables the setting and/or resetting of the IF1 and IF2 flip-flops of register 750-10258 in response to the signals FIF1ASSIGN100 and FIF2ASSIGN100. The switching occurs in response to T clock signal [CLKT022 during the loading of a transit block register location when a control signal LDTBVALID100 is switched to a binary ONE via an AND gate 750-11428.</p><p>It will be noted that register 750-102588 contains an IF1 and IF2 flag bit position for each transit block register location. That is, the register includes flip-flops FIF10, FIF20 through FIF13, FIF23 for transit block register locations 0 through 3 respectively. Each of the binary ONE outputs from the IF1 and IF2 flag flip-flops are also applied to the different input terminals of the output multiplexer circuit 750-10260. The circuit 750-11450 contains two sections. This permits DMIFS2100 and DMIFS3100 signals applied to the control terminals of the multiplexer circuit 750-10260 from block 750-128 to select as outputs, input signals from both an IF1 and IF2 flag flip-flop. The selected pair of signals, in turn, provide flag signals ZIF1FLG100 and ZIF2FLG100 which are applied to block 750-115. These signals are used to control the writing of memory information into the IBUF1 and IBUF2 buffers 750-715 and 750-717. Additionally, the complements of the outputs from multiplexer circuit 750-10260 which correspond to signals ZIF1FLG000 and ZIF2FLG000 are applied to a pair of input terminals of a multisection comparator circuit 750-110/750-11435.</p><p>It will be noted that the last section of each of multiplexer circuits 750-10255 and 750-10256 are connected in series for generating the enable transit block buffer ready signal ENABTBRDY100 applied to block 750-114. As shown, the \"0\" input terminal of the last section of multiplexer circuit 750-10255 connects to a voltage VCC (representative of a binary ONE) while the \"1\" input terminal connects to ground (representative of a binary ZERO). The output terminal of the last section of multiplexer circuit 750-10255 connects to the \"0\" input terminal of the last section of multiplexer circuit 750-10256 while the \"1\" input terminal connects to ground. The multiplexer circuits 750-10255 and 750-10256 operate to force signal ENABTBRDY100 to a binary ONE only after the completion of an instruction fetch assignment cycle when both signals FIF1ASSIGN100 and FIF2ASSIGN100 are binary ZEROS. Therefore, the \"0\" input terminals are selected as outputs by the multiplexer circuits 750-10255 and 750-10256 which results in signal ENABTBRDY100 being forced to a binary ONE. This presents the inadvertent generation of the IBUFRDY100 signal as explained herein.</p><p>As seen from FIG. 7a, the circuits of the transit buffer in pointer block 750-106 include a clocked two-bit position register 750-10600 and a decoder circuit 750-10601. The register 750-10600 has associated therewith a NAND/AND gate 750-10602 and a two input AND/OR gate 750-10604 connected in a counter arrangement. That is, the NAND gate 750-10602 in response to load signal FLDTBVALID111 from block 750-114 and signal NOGO020 forces an increment signal INCTBIN100 to a binary ONE. This causes the address value stored in register 750-10600 to be incremented by one. The increment signal INCTBIN100 is applied to the circuits of block 750-102.</p><p>The most significant high order bit position of register 750-10600 is set to a binary ONE via the gate 750-10604 in response to either signals FTBPTR1000 and FIBPTRO100 or signals FTBPTR1100 and FTBPTR0000 being forced to binary ONES. The complemented binary ONE output signals of the register bit positions corresponding to signals FTBPTR0000 and FTBPTR1000 are decoded by decoder circuit 750-10601. The circuit 750-10601 in response to the FTBPTR0000 and FTBPTR1000 signals forces one of the four pairs of output terminals to a binary ONE.</p><p>The command control circuit block 750-114 includes an instruction fetch 2 search (FIF2SEARCH) synchronous D type flip-flop 750-11400. The flip-flop 750-11400 is set to a binary ONE state in response to T clock signal [CLKT020 when a two input AND/OR gate 750-11402 and an AND gate 750-11404 force a set signal SETIF2SEARCH-100 to a binary ONE. This occurs when either an IF1 command which is a hit or an IF2 command is received from processor 700 during an IF1 assignment cycle.</p><p>In the case of an IF1 command, this presumes that there is no hold condition (i.e., signal [HOLDDMEM000 from block 750-117 is a binary ONE) and that a directory search generated a hit (i.e., signal HITTOTB100 is a binary ONE) indicating that the requested instruction block resides in cache store 750-300. For an IF2 command, it is assumed that there has been a directory assignment cycle following a directory search in which there was a miss made in response to the IF1 command (i.e., signal FIF1ASSIGN100 is a binary ONE).</p><p>In either of the situations mentioned, the gate 750-11402 forces the signal SETIF2TIME100 to a binary ONE. When the instruction fetch command was caused by a transfer or branch instruction, which is not a NOGO (i.e., signal NOGO030 is a binary ONE) indicating that it should process the IF2 command currently being applied to the command lines (i.e., indicated by signal DREQCAC112 being forced to a binary ONE), AND gate 750-11404 forces signal SETIF2SEARCH100 to a binary ONE. This switches flip-flop 750-11400 to a binary ONE when signal [CANCEL012 is a binary ONE.</p><p>As seen from FIG. 7a, the binary ZERO output from flip-flop 750-11400 is applied as an input to the hold circuits of block 750-117. The signal FIF2SEARCH000 is delayed by a buffer circuit 750-11406 and applied to one input of an input NAND gate 750-11408 of an instruction fetch 2 assignment (IFIF2ASSIGN) flip-flop 750-11410.</p><p>The signal FIF2SEARCH010 together with the signal EISIF2000 (indicates a non-EIS type instruction) causes the NAND gate 750-11408 to switch FIF2ASSIGN flip-flop 750-11410 to a binary ONE in response to a gating signal SETBVALID100 and T clock signal [CLKT020. The state of this flip-flop as the others is gated as an output when signal FLDTBVALID111 is a binary ONE.</p><p>It will be noted that signal FLTBVALID111 is switched to a binary ONE via an AND gate 750-11412, a clocked flip-flop 750-11414 and a delay buffer circuit 750-11416 in the case of a miss condition (i.e., signal HITTOTB010 is a binary ONE) generated in response to a directory search made for a read type command (e.g. IF2). This assumes that there is no hold condition (i.e., signal [HOLDDMEM000 is a binary ONE), that in the case of an IF2 command it was not due to a transfer NOGO (i.e., signal NOGO020 is a binary ONE) and that there is no cancel condition (i.e., signal [CANCELC010 is a binary ONE) for a read type operation decoded by the circuits of block 750-113 in response to the read command applied to the command lines (i.e., signal DREQREAD100 is a binary ONE wherein DREQREAD100=READ100.DREQCAC112).</p><p>Under similar conditions, an instruction fetch 1 assignment (FIF1ASSIGN) flip-flop 750-11418 is switched to a binary ONE via an input AND gate 750-11420 in response to an IF1 command (i.e., when signal IF1100 is a binary ONE) in which there was a miss detected (i.e., signal SETTBVALID100 is a binary ONE). The load transit buffer valid flip-flop 750-11414 remains set until signal SETLDTBVALID100 switches to a binary ZERO. It will be noted that the binary ZERO output signal FLDTBVALID000 is applied to circuits included as part of block 750-102.</p><p>The other pair of flip-flops 750-11422 and 750-11424 are set in response to signal SETLDTBVALID100 in the case of a miss condition. The load quad flip-flop 750-11424 is set to a binary ONE state when the command applied to the DMEM command lines is decoded as being a LDQUAD command (i.e., signal LDQUAD100 from decoder 750-113 is a binary ONE) and that the ZAC command applied to the ZADOB lines is coded as requiring a read quad operation (e.g. IF1, IF2, LDQUAD, PRERD and RDSNGLE commands specified by signal ZADOB04100 being set to a binary ONE).</p><p>The RDQUAD flip-flop 750-11422 is set to a binary ONE via an AND gate 750-11426 when a signal CQIN1100 from the circuits included within command queue block 750-107 is a binary ONE indicative of a double precision command (i.e., signal ZADOBO2100 is a binary ONE).</p><p>As seen from FIG. 7a, block 750-114 further includes a comparator circuit 750-11435. This circuit may be considered conventional in design and, for example, may take the form of the circuits disclosed in U.S. Pat. No. 3,955,177.</p><p>The comparator circuit 750-11435 is enabled by signals USETBRDY100 and DATA100. The signal USETBPDY100 indicates that the cache is waiting for instructions from memory to be loaded into the IBUF1 or IBUF2 buffers. The signal DATA100 is forced to a binary ONE by a NAND gate 750-11436 indicating receipt of information from memory. The comparator circuit includes two sections. One section compares the command queue input pointer signals and output pointer signals from blocks 750-108 and 750-109 respectively. This section forces signals CQCMP100 and CQBMP000 to a binary ONE and binary ZERO respectively when the pointer signals are equal. The section corresponds to block 750-110 in FIG. 4.</p><p>The other section compares input terminals A1, A2 and B1, B2, the control signals [ZRIB100, [ZRIB010 applied to input terminals A1, A2 to the states of the I fetch 1 and I fetch 2 flag signals ZIF1FLG000, ZIF2FLG000 applied to terminals B1, B2. When equal, this indicates that the information being received from memory at this time is either in response to an I fetch 1 or I fetch 2 command. It will be noted that control signal [ZRIB100 controls ZRIB switch 750-720.</p><p>The input terminals A4, A8 compare signals ZEXT0100, ZEXT1100 against signals MIFS1100 and DATAODD100 applied to the B4, B8 terminals. This indicates whether the information being addressed within the instruction buffer equals the information being received. More specifically, signals ZEXT0100 and ZEXT1100 are generated by the circuits of block 750-920 from the least two significant bit address of the instruction stored in the RIRA register. Thus, they specify the word location being addressed within the I buffer. Signal MIFS1100 is coded to specify whether the first or second half of the block is being received. Signal DATAODD100 specifies whether the first or second word of the first two word pairs is being received. The signal DATAODD100 is generated by an AND gate 750-11437.</p><p>Lastly, the comparator circuit 750-11435 compares a signal ENABTBRDY100 applied to terminal A16 from block 750-102 with the voltage VCC representative of a binary ONE applied to terminal B16. In the presence of a true comparison between the two sets of all six signals, the circuit 750-11435 forces its output to a binary ONE. This results in the complement output terminal forcing signal IBUFCMPR000 to a binary ZERO. This causes block 750-722 to force the IBUFRDY100 signal to a binary ONE as explained herein.</p><p>Additionally, section 750-114 includes an AND gate 750-11417. During the first half of a cache cycle (i.e., signal FHT120 from delay circuit 750-11810 is a binary ONE) when the FLDTBVALID flip-flop 750-11414 is a binary ONE, the AND gate 750-11417 forces control signal [RTB5-8100 to a binary ONE. This signal is applied as a clock strobe input to the level storage section of transit block buffer 750-102. This section is constructed from a 4\u00d74 simultaneous dual read/write 16-bit memory organized as four words each 4 bits in length similar to the memory device of block 750-10238 and the memory devices used in constructing the 36-bit read command buffer section of block 750-102 as well as the write command/data buffer 750-100.</p><p>FIG. 7a also includes a further comparator circuit 750-11437. The circuit 750-11437 is connected to be enabled when signals DATA100 and VCC are binary ONES. The voltage signal VCC applied to the A1 terminal is compared to the state of load quad flag signal RLDQUADFLG100 readout from memory 750-10238 and applied to the B1 terminal. The read address signals ZEXT0100 and ZEXT1100 from 750-900 applied to terminals A2 and A3 respectively are compared with the signals MIFS1100 and DATAODD100 applied to the terminals B2 and B3 respectively. When there is a true comparison between the two sets of signals, circuit 750-11437 forces signal LQCMPR000 to a binary ZERO.</p><p>FIG. 7a shows that the data reception and control block 750-115 includes a plurality of NAND gates 750-11500 through 750-11510 and a plurality of AND gates 750-11511 through 750-11514 connected as shown to generate the control strobe enable signals [LQBUF100, [IBUF1100 and [IBUF2100, reset buffer signal RESETBUF100 and write control buffer signal [WRTBUF0100. These signals are used to control the operation of the buffer circuits of section 750-7. As seen from FIG. 7a, the other write control buffer signal [WRTBUF1100 is generated by a buffer delay circuit 750-11515 in response to signal FARDA010. The signal [WRTBUF0100 is derived from the output of the two input data selector/multiplexer circuit 750-128 which selects either the signal RMIFS1100 from register 750-127 or signal RMIFSB1100 from register 750-129. The selection is made in accordance with the state of signal FARDA000 produced from the accept line ARDA of data interface 600. The multiplexer circuit 750-128, in accordance with the state of signal FARDA000, generates the two sets of signals MIFS2100, MIFS3100 and DMIFS2100, DMIFS3100 which are applied to the read address inputs of buffer 750-102.</p><p>It will be noted that section 750-115 also includes a double precision (FDPFSX) D type flip-flop 750-11517 which is set in response to clocking signal [CLKT020 to a binary ONE state via a first AND gate input in accordance with the state of the signal PTXDPFS100 applied to the AND gate via amplifier circuit 750-11518 from the DPFS line by SIU 100. The DPFS line when set indicates that two words of data are being sent from SIU 100. Switching occurs when SIU100 forces the signal PTXARDA100 applied thereto via an amplifier circuit 750-11519 from the ARDA line of interface 600 to a binary ONE. The ARDA line indicates that the read data requested by cache 750 is on the DFS lines from SIU100. The output of a FARDA flip-flop (not shown) which delays signal ARDA by one clock period is applied to a second hold AND gate input along with signal FDPFSX100. The FDPFSX flip-flop 750-11517 remains set for two clock periods. That is, the flip-flop 750-11517 is set in accordance with the number of SIU responses (DPFS signals). In the case of a read single command, the SIU generates two SIU responses, each response for bringing in a pair of words. In each case, this permits the writing of the two words into cache when signal RWRCACFLG100 is a binary ONE.</p><p>The binary ZERO output of flip-flop 750-11517 is inverted by a NAND/AND gate 750-11521 and delayed by a buffer delay circuit 750-11522 before it is applied to AND gate 750-11512. The same binary ZERO output without being inverted is delayed by a buffer delay circuit 750-11523 and applied to circuits which reset the states of bit positions of a transit buffer valid bit register which forms part of transit buffer 750-102.</p><p>It will also be noted that the double precision signal FDPF110 is combined in an AND gate 750-11524 with a write cache flag signal RWRTCACFLG100 from transit block buffer flag storage portion of buffer 750-102. The AND gate 750-1152 generates a memory write request signal MEMWRTREQ100 which is forwarded to section 750-9 for enabling memory data to be written into cache (i.e., controls address switch(s) selection).</p><p>As seen from FIG. 7a, the initiating request control circuits block 750-116 includes an active output port request flip-flop 750-11600. The flip-flop is a clocked D type flip-flop which includes two input AND/OR gating circuits. Flip-flop 750-11600 is set to a binary ONE state in response to clock signal [CLKT020 when block 750-114 forces a pair of signals ENABSETAOPR100 and SETAOPR100 to binary ONES. When set to a binary ONE, this, in turn, sets the AOPR line of interface 600, signalling the SIU100 of a data transfer request. The binary ZERO side of flip-flop 750-11600 is inverted by an inverter circuit 750-11602, delayed by a delay buffer circuit 750-11604 and applied to a hold AND gate. The flip-flop 750-11600 remains set until the clock time that signal FARA020 switches to a binary ZERO indicating that the SIU100 accepted the cache memory request.</p><p>The hold control block 750-117, as shown, includes an inhibit transit buffer hit FINHTBHIT flip-flop 750-11700, an AND gate 750-11702 and a plurality of AND/NAND gates 750-11704 through 750-11716. The flip-flop 750-11700 is set to a binary ONE state via a first input AND gate and a NAND gate 750-11701 in response to a T clock signal [CLKT020 when signals INHTBHIT100 and TBHIT100 are binary ONES. The NAND gate 750-11701 forces signal INHTBHIT100 to a binary ONE in the case of a cancel condition (i.e., signal [CANCELC012 is a binary ZERO).</p><p>The complement output side of flip-flop 750-11700 applies signal FINHTBHIT000 as one input to AND gate 750-11702. A directory busy signal DIRBUSY000 from block 750-526 is applied to the other input of AND gate 750-11702. When the directory is not performing a search (i.e, signal DIRBUSY000 is a binary ONE) and signal INHTBHIT100 is a binary ONE, AND gate 750-11702 forces signal INHTBACMP000 to a binary ONE. This, in turn, causes the gate 750-11704 to force signal TBHIT100 to a binary ONE when the AND gate 750-136 forces a transit block address compare signal TBACMP100 to a binary ONE. At the same time, gate 750-11704 forces signal TBHIT000 to a binary ZERO.</p><p>The AND/NAND gates 750-11708 through 750-11710 generate signals CPSTOP000 through CPSTOP003 which are forwarded to processor 700 for indicating a hold condition. The other AND/NAND gates 750-11714 through 750-11716 generate signals [HOLDDMEM000 through [HOLDDMEM003 to specify an internal hold condition for preventing the other sections of cache 750 from executing the command applied to the command lines by processor 700. Whenever there is a hold command condition (i.e., signal HOLDCMD000 is a binary ZERO), a miss condition (i.e., signal FRDMISS020 is a binary ZERO), a hold quad condition from block 750-916 (i.e., signal HOLDLDQUAD000 is a binary ZERO) or a transit block hit condition (i.e., signal TBHIT000 is a binary ZERO), the gates 750-11708 through 750-11710 force their respective output signals CPSTOP003 through CPSTOP000 to binary ZEROS and signals CPSTOP103 through CPSTOP100 to binary ONES. This, in turn, causes the processor 700 to halt operation.</p><p>Under similar conditions, in addition to a hold search condition (i.e., signal HOLDSEARCH000 is a binary ZERO) as indicated by AND gate 750-11712 forcing signal [EARLYHOLD000 to a binary ZERO or a hold cache condition (i.e., signal [HOLDCCU000 is a binary ZERO), the gates 750-11714 through 750-11716 force their respective output signals [HOLDDMEM000 through [HOLDDMEM003 to binary ZEROS and signals [HOLDDMEM100 through [HOLDDMEM103 to binary ONES.</p><p>Referring to the Figure, it is seen that the timing circuits of block 750-118 include a synchronous D type flip-flop 750-11800 with two AND/OR input circuits. The flip-flop 750-11800 receives a half T clocking signal [CLKHT100 via gate 750-11802 and inverter circuit 750-11804. A definer T clock signal DEFTCLK110 is applied to one of the data inputs via a pair of delay buffer circuits 750-11806 and 750-11808. Each buffer circuit provides a minimum delay of 5 nanoseconds.</p><p>Both the signals [CLKHT100 and DEFTCLK110 are generated by the common timing source. In response to these signals, the half T flip-flop 750-11800 switches to a binary ONE state upon the trailing edge of the DEFTCLK110 signal. It switches to a binary ZERO state upon the occurrence of the next [CLKHT100 signal (at the trailing edge).</p><p>The signals FHT100 and FHT000, in addition to signals FHT120, FHT010 and FHT020 derived from the binary ONE and binary ZERO output terminals of flip-flop 750-11800, are distributed to other circuits of section 750-1 as well as other sections (i.e., 750-5, 750-9 and 750-114). The signals FHT120, FHT020 and FHT010 are distributed via another pair of delay buffer circuits 750-11810 and 750-11812 and a driver circuit 750-11814 respectively.</p><p>The T clock signals such as [CLKT020 and [CLKT022 generated by the common timing source are distributed in their \"raw\" form to the various flip-flops of registers. When there is a need to generate a 1/2 T clock signal, the 1/2 T clock signal [CLKHT020 is gated with the 1/2 T definer signal (FHT100) at the input of the flip-flop or register. The state of signal FHT100 is used to define the first and second halves of a T cycle. When signal FHT100 is a binary ONE, this defines a time interval corresponding to the first half of a T clock cycle. Conversely, when signal FHT100 is a binary ZERO, this defines a time interval corresponding to the second half of a T clock cycle.</p><p>For the purpose of the present invention, the data recovery circuits can be considered conventional in design and may, for example, take the form of the circuits described in the referenced patent applications. These circuits generate a data recovery signal for forwarding to processor 700 by \"ANDING\" the 1/2 T clock signal FHT000 with a signal indicating that data is being strobed into the processor's registers. This causes the data recovery signal to be generated only during the second half of a T clock cycle when such data is being strobed into the processor's registers.</p><p>In the case of sections 750-5 and 750-9, the signal FHT100 is used to control the switching of other timing and control flip-flops as explained herein.</p><h4>DETAILED DESCRIPTION OF SECTION 750-3</h4><p>FIG. 7b shows in greater detail specific ones of the blocks of section 750-3. Corresponding reference numbers have been used where possible.</p><p>Referring to FIG. 7b, it is seen that the decoder circuits of block 750-303 include a decoder circuit 750-30300 which is enabled for operation by signal ENBMEMLEV100 from the circuits of block 750-920. The signals from non-inverted output terminals of decoder circuit 750-30300 are applied to the input terminals of a first multiplexer circuit 750-30302. The signals at the inverted output terminals are applied to the input terminals of a second multiplexer circuit 750-30304. The multiplexer circuit 750-30302 is always enabled for operation while the multiplexer circuit 750-30304 is only enabled when signal ENBADR1100 is forced to a binary ONE by the circuits of block 750-920. It is assumed that the \"0\" positions of both multiplexer circuits will always be selected.</p><p>Predetermined combinations of the two sets of control signals [ZADR01100 through [ZADR71100 and signals [ZADR00100 through [ZADR70100 are applied to the control input terminals of each of the eight crossbar address selection switches 750-302a through 750-302h, as shown. It is seen that each crossbar switch includes a number of sections, each section includes three parts indicated by the heavy lines between sections. For simplicity, the number of sections of each switch are shown together. For simplicity, the control portion of each section is shown only once since it is the same for all the sections which are required to make up the switch.</p><p>As seen from the Figure, depending upon the states of the pairs of control signals [ZADR00100, [ZADR01100 through [ZADR70100, [ZADR71100, the signals from one of the three sources are applied to each set of W, X, Y and Z terminals simultaneously.</p><h4>DETAILED DESCRIPTION OF SECTION 750-5</h4><p>FIG. 7c shows in greater detail specific ones of the blocks of section 750-5 as explained previously. Corresponding reference numbers have been used where possible.</p><p>Referring to FIG. 7c, it is seen that the directory hit/miss control circuits of block 750-512 include an encoder network comprising a plurality of NAND gates 750-51200 through 750-51220 and a plurality of amplifier circuits 750-51224 through 750-51228. The NAND gate circuits are connected to encode the set of signals ZFE1100 through ZFE7100 from block 750-506 and the set of signals ZHT1100 through ZHT7100 from the blocks 750-546 through 750-552 into the 3-bit code for controlling the operation of switch 750-306.</p><p>The signal GSRCH100 is generated by the circuits of block 750-526. As explained herein, this signal is only forced to a binary ONE during the second half of a T clock cycle. Thus, an output from one of the NAND gates 750-51200 through 750-51208 is generated only during that interval. More specifically, the hit signal specified by the state of the full-empty bit causes one of the signals ZCDLEV1000 through ZCDLEV7000 to be forced to a binary ZERO state. This, in turn, conditions NAND gates 750-51216 through 750-51220 to generate the appropriate 3-bit code.</p><p>Signal ZCDICENAB100 also generated by the circuits of block 750-526 is forced to a binary ONE only during the first half of a T clock cycle. Thus, outputs from NAND gates 750-51210 through 750-51214 are generated only during that interval. That is, the instruction address level signals ZNICLEV0100 through ZNICLEV2100 from block 750-910 produce signals ICL0000 through ICL2000 which, in turn, produce signals ZCD0100 through ZD2100. It will be noted that the signals ZCD0100 through ZCD2100 correspond to ZNICLEV0100 through ZNICLEV2100.</p><p>The signals RDDBLL0000 through RDDBLL2000 are used to define the second cycle of operation for a read double command. Accordingly, when any one of the signals RDDBLL0000 through RDDBLL2000 is in a binary ZERO state, this forces a corresponding one of the signals ZCD0100 through ZCD2100 to a binary ONE.</p><p>The signals ZCD0100 through ZCD2100 are applied to different inputs of corresponding ones of the amplifier driver circuits 750-51224 through 750-51228. These circuits apply the control signals [ZCD0100 through [ZCD2100 to the control terminals of switch 750-306.</p><p>A next block shown in greater detail in FIG. 7c is block 750-526. As mentioned previously, block 750-526 includes a number of directory control flip-flops. The control state flip-flops shown include the directory assignment (FDIRASN) control state flip-flop 750-52600 and a plurality of timing flip-flops of a register 750-52610.</p><p>The flip-flop 750-52600 is a clocked D type flip-flop which is set to a binary ONE via first input AND gate in the case of a command request (i.e., signal REQCOMB0100 is a binary ONE) for a read type command (i.e., RDTYP100 is a binary ONE) when processor 700 requests data from memory and not cache 750 (i.e., signal BYPCAC110 is a binary ONE). In greater detail, in the absence of a hold condition (i.e., signal HOLD000 applied via an AND gate 750-52602 is a binary ONE), a go transfer (i.e., signal NOGO021 is a binary ONE), no cancel condition (i.e., signal CANCELC010 is a binary ONE) and processor 700 has signalled a request (i.e., signal DREQCAC111 is a binary ONE) an AND gate 750-52604 forces signal REQCOMB0100 to a binary ONE.</p><p>An AND gate 750-52606 forces the signal SETONBYP100 to a binary ONE in the case of read type when decoder circuit 750-528 forces signal RDTYP100 to a binary ONE when processor 700 forces the bypass cache signal BYPCAC110 to a binary ONE. The result is that the FDIRASN flip-flop 750-52600 switches to a binary ONE for specifying a directory assignment cycle of operation.</p><p>The flip-flop 750-52600 is also set to a binary ONE via a second input AND gate in the case of a command request (i.e., signal REQCOMB0100 is a binary ONE) when a miss condition is detected for the block requested to be read (i.e., signal SETONMISS100 is a binary ONE). The signal SETONMISS100 is forced to a binary ONE by an AND gate 750-52608 when signal RDTYP100 is a binary ONE and signal RAWHIT000 from block 750-512 is a binary ONE. The flip-flop 750-52600 is reset to a binary ZERO state upon the occurrence of clock signal [CLOCK112 generated from the common source in the absence of a set output signal from the two input AND gates.</p><p>A first flip-flop (FICENAB) of register 750-52610 is used to define the interval of time within a T clock cycle when instructions or operands are to be fetched from cache 750.</p><p>This flip-flop is switched to a binary ONE state via a first AND gate in response to a clock signal [CLOCKD120 when signal FHT100 generated by the timing circuits of block 750-112 is a binary ONE. Clock signal [CLOCKD120 from the common timing source is applied via an AND gate 750-52612 and an inverter circuit 750-52612 and an inverter circuit 750-52514. The FICENAB flip-flop resets on the following clock signal when signal FHT-100 has been switched to a binary ZERO.</p><p>The second flip-flop of register 750-52610 is used to define an interval during which operands (not instructions) are being fetched from cache 750 as a consequence of a special condition caused by an IF1 command which did not specify the last word in an instruction block. The FRCIC flip-flop is switched to a binary ONE via a first input AND gate in response to clock signal [CLOCK-D120 when signal FJAMZNICLEV000 is a binary ONE. The FRCIC flip-flop resets on the following clock pulse when signal FJAMZNICLEV000 has been switched to a binary ZERO.</p><p>As shown, the signal at the binary ZERO output terminal of the FICENAB flip-flop corresponds to the gate half T clock signal GATEHFTCHLK110 which is distributed to the circuits of block 750-920.</p><p>The signal FICENAB000 is combined with signal FRCIC000 and signal RDDBLZCDE000 within an AND gate 750-52616 to produce signal GSRCH100. The signal RDDBLZCDE000 is from decoder circuit. This gate forces signal GSRCH100 to a binary ONE during the second half of a T clock cycle when operands are being fetched (i.e., signal FICENAB000 is a binary ONE) except in the case of a read double command (i.e., signal RDDBLZCDE000 is a binary ONE).</p><p>The binary ZERO output of the FICENA flip-flop is combined with signal FRCIC000 within a NAND gate 750-52618. The NAND gate 750-52618 operates to force signal ZCDINCENAB100 to a binary ONE during the first half T interval when instructions are being fetched (i.e., signal FICENAB000 is a binary ZERO) or in the case of the type IF1 command described above (i.e., signal FRCIC000 is a binary ZERO).</p><p>The circuits of block 750-526 further include a NAND gate 750-52620 and a plurality of AND gates 750-52622 through 750-52628 connected, as shown. The circuits generate a first enable control signal DIRADDE100 for controlling the operation of decoder circuit 750-521. Additionally, they generate a second enable control signal FEDCODE100 for controlling the operation of a decoder circuit 750-52000 of block 750-520.</p><p>In greater detail, during a directory assignment cycle (i.e., signal FDIRASN100 is a binary ONE) in the absence of a transfer no go condition (i.e., signal NOGO21 is a binary ONE), AND gate 750-52626 forces signal DIRNOGO100 to a binary ONE. When a signal FSKIPRR000 from the circuits of block 750-916 is a binary ONE, this causes the AND gate 750-52628 to force signal DIRADDE100 to a binary ONE which enables decoder circuit 750-521 for operation. When either signal DIRNOGO100 or FSKIPRR000 is forced to a binary ZERO, this causes AND gate 750-52628 to disable decoder circuit 750-521 by forcing signal DIRADDE100 to a binary ZERO.</p><p>Under the same conditions, the AND gate 750-52624 forces signal FEDCODE100 to a binary ONE which enables decoder circuit 750-52000 for operation. The AND gate 750-52630 causes an amplifier circuit 750-52632 to force signal FORCEBYP000 to a binary ONE when both signals FSKIPRR000 and FBYPCAC00 are binary ONES. The FORCEBYP000 is applied to the transit block flag section of block 750-102. The signal FBYPCAC000 is generated in a conventional manner in accordance with the signal applied to the line BYPCAC by processor 700. The signal is stored in a flip-flop, not shown, whose binary ZERO output corresponds to signal FBYPCAC000.</p><p>The circuits of block 750-520, as shown, include the decoder circuit 750-52000 and a pair of multiplexer circuits 750-52002 and 750-52004. It is assumed that normally the signals applied to the \"0\" input terminals of multiplexer circuits 750-52002 and 750-52004 are selected to be applied as outputs (i.e., the signal applied to the G input is a binary ZERO). Therefore, when the decoder circuit 750-520000 is enabled, the output signals FED0100 through FED7100 result in the generation of signals RWFE0100 through RWFE7100 in response to clock signal [CLOCK000.</p><p>The FIG. 7c also shows in greater detail register 750-504 as including a clocked four stage register 750-50400 and a plurality of amplifier circuits 750-50402 through 750-50602. The register 750-50400 includes D type flip-flops, the first three of which are connected for storing round robin signals OLDRR0100 through OLDRR2100. The fourth flip-flop is connected to indicate the presence of an alternate hit condition having been detected by the circuits of block 750-562, not shown. That is, it is set to a binary ONE state when signal ALTHIT100 is a binary ONE.</p><p>It will be noted that the flip-flops of register 750-50400 are only enabled in response to clock signal [CLOCK112 when signal FDIRASN000 is a binary ONE indicative of no directory assignment cycle being performed (a hit condition).</p><p>In the case of a hit condition detected within the half of a block being referenced, signal ALTHIT000 is forced to a binary ZERO. This causes the first three flip-flops of register 750-50400 to be loaded via a first set of input AND gates with the round robin signals RR0100 through RR2100 from block 750-500. When there is a hit condition detected within the other half (alternate) of the block being referenced, the circuits of block 750-512 force signal ALTHIT100 to a binary ONE. This causes the three flip-flops to be loaded via a second set of input AND gates with the alternate level signals ALTHITLEV0100 through ALTHITLEV2100 generated by the circuits of block 750-512.</p><p>The binary ONE signals of register 750-50400 are applied as inputs to the amplifier driver circuits 750-50402 through 750-50406 for storage in the transit block buffer 750-102. The same signals are applied to the A operand input terminals of an adder circuit of block 750-508. The adder circuit adds or increments the signals OLDRR0100 through OLDRR2100 by one via the binary ONE applied to the Cl terminal of the adder circuit. The sum signals NXTRR0100 through NXTRR2100 generated at the F output terminals are written into the round robin section of control directory 750-500.</p><p>Lastly, the signals OLDRR0100 through OLDRR2100 are applied as inputs to another set of amplifier driver circuits 750-50408 through 750-50412 for storage in one of the instruction address registers 750-900 and 750-902 of FIG. 7e.</p><h4>DETAILED DESCRIPTION OF SECTION 750-7</h4><p>FIG. 7d shows in greater detail different ones of blocks of section 750-7. As seen from FIG. 7d, block 750-722 includes a plurality of series connected NAND gates 750-72230 through 750-72234. The NAND gates 750-72230 and 750-72231 are connected to receive instruction buffer valid and instruction control signals IBUF1V100, [ZRIB010 and IBUF2V100, [ZRIB100 from I buffers 750-715 and 750-717 and block 750-920. The IBUF1V100 and IBUF2V100 signals indicate the instruction buffer into which information is being loaded. That is, when signal IBUF1V100 is a binary ONE, that specifies that I buffer 750-715 is loaded. When signal IBUF2V100 is a binary ONE, that specifies that I buffer 750-717 is loaded with an instruction word.</p><p>The control signals [ZRIB010 and [ZRIB100 specify which instruction buffer valid bit is to be examined which corresponds to the instruction buffer being addressed. That is, when signal [ZRIB010 is a binary ONE, the IBUF1 valid bit is specified by the circuits of block 750-920. When signal [ZRIB100 is a binary ONE, that specifies the IBUF2 valid bit. When either signal IBUF1RDY000 or signal IBUF2RDY000 is forced to a binary ZERO, NAND gate 750-72232 forces signal TBIBUFRDY100 to a binary ONE indicative of a ready condition.</p><p>The circuits of block 750-920 force an enabling signal USETBRDY100 to a binary ONE following the switching of the appropriate I buffer valid bit. This causes the NAND gate 750-72233 to force the TBRDY000 signal to a binary ZERO. The result is that NAND gate 750-72234 forces the IBUFRDY100 to a binary ONE signalling the ready condition.</p><p>It will also be noted that NAND gate 750-72234 also forces the IBUFRDY100 signal to a binary ONE when an instruction fetch ready signal IFETCHRDY000 is forced to a binary ZERO by the circuits of block 750-920. Signal IFETCHRDY000 is a binary ONE except when the instructions are being pulled from a block in cache. Lastly, NAND gate 750-72234 forces IBUFRDY100 signal to a binary ONE when an instruction buffer compare signal IBUFCMPR000 is forced to a binary ONE by comparator circuit 750-11435.</p><p>The LQ buffer 750-706, as seen from FIG. 7d, includes a plurality of 4\u00d74 simultaneous dual read/write memories. Each memory is a 16-bit memory organized as 4 words of 4 bits each. Words may be independently read from any two locations at the same time as information is being written into any location.</p><p>The signals [WRTBUF0100 and [WRTBUF1100 are applied to the write address terminals of each memory while the signals [ZEXT0100 and [ZEXT1100 are applied to a different one of the sets of read address terminals together with the signal VCC. The read address inputs are enabled by the VCC signal applied to the G1 terminal. The signals [ZEXT0100 and [ZEXT1000 permit the read out of the contents of any one of the 4-bit locations to the 1AY output terminals.</p><p>The memories 750-70600 through 750-70603 of block 750-706 are loaded with the signals RDFS(XO)110 through RDFSP(X)010 and signal VCC in response to T clock signal [CLKHT021 when LQBUF strobe signal [LQBUF100 from block 750-115 is forced to a binary ONE. Also, the contents of all the memory locations of each memory are cleared to ZEROS when the circuits of block 750-115 force LQBUF reset signal RESLQBUF000 to a binary ZERO. That is, as seen from FIG. 7d, the pairs of series connected NAND gates 750-70604 and 750-70605 force reset signal RESLQBUF-000 to a binary ZERO when either an initialize signal INIT000 or signal RESETLQBUF000 is a binary ZERO. Since there are three additional groups of memories such as memories 750-70600 through 750-70603 included within each buffer to provide storage for four 36-bit instruction words, the (X) designation for input and output signals is used to indicate that such signals are similar except for the different values of (X). For example, XO has the values 00, 17, 18 and 35 while X8 has the values 08, 09, 26 and 27. Each byte location includes a valid bit location which is switched to a binary ONE whenever information is loaded into that location. This in turn forces signal LQBUFV000 at the complement output terminal to a binary ZERO. However, the complement output signals from each valid bit byte location are connected in common so that the arrangement can be viewed such that each word location includes one valid bit location.</p><p>The memories may be considered conventional in design and for example, such memories may take the form of the circuits disclosed in U.S. Pat. No. 4,070,657.</p><h4>DETAILED DESCRIPTION OF SECTION 750-9</h4><p>FIG. 7e shows in greater detail specific ones of the blocks of section 750-9. Corresponding reference numbers have been used where possible.</p><p>Referring to FIG. 7e, it is seen that the block 750-920 includes a first group of circuits of block 750-92000 which generate the four sets of write control signals WRT00100 through WRT70100, WRT01100 through WRT71100, WRT02110 through WRT72100 and WRT03100 through WRT73100. As seen from FIG. 7e, these circuits include a pair of multiplexer circuits 750-92002 and 750-92004, a register 750-92006 and four octal decoder circuits 750-92008 through 750-92014, connected as shown.</p><p>The multiplexer circuit 750-92002 has signals RHITLEV0100 through RHITLEV2100 from block 750-512 applied to the set of \"0\" input terminals while signals RTBLEV0100 through RTBLEV2100 applied to the set of \"1\" input terminals. During the first half of a T cycle when signal FDFN2HT100 applied to the control terminal G0/G1 is a binary ZERO, the signals RHITLEV0100 and RHITLEV2100 are applied to the output terminals. They are clocked into the top three flip-flops of register 750-92006 in response to T clock signal [CLKHT02. This enables processor operands to be written into cache 750-300 during the second half of the T clock cycle. During the second half of a T cycle when signal FDFN2HT100 is forced to a binary ONE, the signals RTBLEV0100 through RTBLEV2100 are clocked into the register 750-92006 in response to the T clock signal [CLKHT02. This enables memory data to be written into cache 750-300 during the first half of the next cycle.</p><p>The second multiplexer circuit 750-92004 has signals ZONE0100 through ZONE3100 from switch 750-144 applied to the set of \"0\" input terminals while signal MEMWRTREQ100 from block 750-112 is applied to the set of \"1\" input terminals. When signal FDFN2HT100 is a binary ZERO, the signals ZONE0100 through ZONE3100 are applied to the output terminals. They are clocked into the bottom four flip-flops of register 750-9206 in response to T clock signal [CLKHT02. During the first half of a T clock cycle, NAND gate 750-92005 forces signal ENBWRT100 to a binary ONE which enables the previously loaded signals to be applied to the output terminals. This enables the processor zone bits to be used in specifying which operand bytes are to be updated when writing processor data into the specified level of cache. When signal FDFN2HT100 is forced to a binary ONE, the signal MEMWRTREQ100 is clocked into the register 750-92006. This causes all the zone bits to be forced to binary ONES for causing all of the bytes of each data word received from memory to be written into the specified level of cache during the first half of the next T clock cycle.</p><p>As seen from FIG. 7e, different ones of the signals RWRTLEV0100 through RWRTLEV2100 are applied to the enable input terminals of octal decoder circuits 750-92008 through 750-92014. The signals RWRTLEV0100 through RWRTLEV2100 are applied to the input terminals of each of the octal decoder circuits 750-92008 through 750-92014.</p><p>The block 750-920 includes a second group of circuits of block 750-92020. These circuits generate the half T clock signal applied to the circuits of block 750-92000, the enable memory level signal ENABMEMLEV100, and enable address signal ENADR1100 applied to the circuits of block 750-303. They also generate the sets of control signals [ZIC010, [ZIC110 and [RICA100, [RICB100 applied to the circuits of instruction address registers 750-900 and 750-902 in addition to control signals [RIRA100 and [RIRB100 applied to the registers 750-308 and 750-310.</p><p>The circuits of block 750-92020 include a pair of half definer flip-flops of a register 750-92022, a group of three control flip-flops of register 750-92024 and a clocked flip-flop 750-92026. The circuits also include a number of AND gates, NAND gates, AND/NAND gates and AND/OR gates 750-92030 through 750-92041.</p><p>The series connected AND/NAND gate 750-92030, AND/OR gate 750-92032 and AND gates 750-92034 and 750-92035 in response to a signal FLDQUAD100 from 750-916, a signal FWFIDESC010 from processor 700 and signals FACTVRIC000 and FACTVRIC100 from register 750-92024 generate control signals [ZIC000, [ZIC010 and [ZIC110. These signals are used to control the operation of ZIC switch 750-906 and the different sections of registers 750-900 and 750-902 (e.g. level valid bit storage and level bit storage) in addition to registers associated therewith.</p><p>The series connected AND gate 750-92036, and AND/NAND gate 750-92037 and NAND gates 750-92038 through 750-92041 operate to generate register strobe signals [RICA100 and [RICB100. These signals control the loading of registers 750-900 and 750-902. The AND gate 750-92036 forces signal VALRDIBUF100 to a binary ONE when a hit condition was detected in the case of a read command (i.e., signal FRDMISS000 in a binary ONE), the transfer was a go (i.e., signal NOGO020 is a binary ONE) and signal CMPDATA/ICLEV000 from the comparator circuit of block 750-912 is a binary ONE.</p><p>The signal FRDMISS000 is obtained from the binary ZERO output of the flip-flop, not shown, which as mentioned is set in accordance with the Boolean expression:</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->FRDMISS=(RDCMD\u00b7[HOLDDMEN\u00b7HITTOIC\u00b7[CANCELC).</pre><p>The signals GOODFTCHA100 and GOODFTCHB100 generated by circuits, not shown, indicate whether the RICA register 750-900 or RICB register 750-902 is being used at that time and its contents are therefore incremented. For example, signal GOODFTCHA100 is generated in accordance with the following Boolean expression:</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->GOODFTCHA=INSTIFI\u00b7FLDQUAD\u00b7FACTVRIC\u00b7FDFN2HT+FDFN2HT\u00b7FLDQUAD\u00b7FACTVRIC.</pre><p>Signal GOODFTCHB is generated in a similar fashion except for the reversal in states of signals FACTVRIC and FACTVRIC.</p><p>It is seen that when signal EXECRDIBUF100 is forced to a binary ONE when processor 700 forces signal RDIBUF110 to a binary ONE, the NAND gate 750-92039 causes NAND gate 750-92041 to force signal [RICA100 to a binary ONE when signal GOODFTCHA100 is a binary ONE. The signal ENBSTRBA000 indicates when the RICA register 750-900 is being initially loaded. That is, when signal ENBSTRBA000 is forced to a binary ZERO, it causes NAND gate 750-92041 to force signal [RICA100 to a binary ONE. More specifically, signal ENBSTRBA is generated in accordance with the following Boolean expression:</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \n ENBSTRBA =                                                               \n           ##STR84##                                                      \n           ##STR85##                                                      \n           ##STR86##                                                      \n           ##STR87##                                                      \n          (INSTIF1 + DCDLDQUAD) \u00b7                                \n           ##STR88##                                                      \n           ##STR89##                                                      \n______________________________________                                    \n</pre><p>wherein ENAB2HT=ENABRIC1+ENABRIC2 and INH2HT=[CANCLCMD\u00b7FLASTINST.</p><p>Under either set of conditions, signals [RICA100 and [RICB100 enable the strobing of their corresponding registers when they are either being initially loaded or following incrementing as when instructions are being fetched or pulled out from cache.</p><p>The NAND gates 750-92042, AND/NAND gate 750-92043 and NAND gates 750-92044 through 750-92049 are connected to generate register strobe signals [RIRA100 and [RIRB100 in a fashion similar to the generation of register strobe signals [RICA100 and [RICB100.</p><p>The NAND gate 750-92046 forces signal [RIRA100 to a binary ONE in the case of a new instruction fetch (i.e., signal NEWINST000 is a binary ZERO) or when the processor 700 takes an instruction from RIRA register 750-308 (i.e., signal TAKEINST000 is a binary ZERO). The NAND gate 750-92049 forces signal [RIRB100 in the case of a new operand fetch (i.e., signal NEWDATA000 is a binary ZERO) or when processor 700 takes a data word from RIRB register 750-310 (i.e., signal TAKEDATA000 is a binary ZERO).</p><p>The AND gate 750-92050 and AND/NAND gate 750-92051 generate signal ENBMEMLEV100 during the second half of a T clock cycle (i.e., signal FDFN2HT101 is a binary ONE) when the circuits of block 750-112 force memory write request signal MEMWRTREQ100 to a binary ONE. The NAND gate 750-92052 generates signal ENBADR1100 during the second half of a T clock cycle (i.e., signal FDFN1HT101 is a binary ZERO) or when the instruction counter is in use (i.e., signal USEIC000 is a binary ZERO).</p><p>As concerns the flip-flop registers, it is seen that the flip-flop of register 750-92026 is switched to a binary ONE state via a first AND gate when AND gate 750-92053 is conditioned to force signal INSTIF1100 to a binary ONE in response to an IF1 command being decoded by decoder circuit 750-922 (i.e., signal DCDIF1100 is a binary ONE) which does not require additional descriptors (i.e., signal FFPIMEIS020 from processor 700 is a binary ONE) and AND gate 750-92054 forces signal [CANCELCMD000 to a binary ONE in response to a no cancel condition (i.e., signal [CANCELC010 is a binary ONE) and a no hold condition (i.e., signal [HOLDDMEM001 is a binary ZERO).</p><p>The flip-flop register 750-92026 is reset to a binary ZERO via a second input AND gate which receives signals ENABNEWINST000 and NEWIF1FDBK100 from a pair of NAND gates 750-92042 and 750-92043 and AND gate 750-92055. The binary ONE output of the flip-flop register 750-92026 is applied to NAND gate 750-92056. NAND gate 750-92056, during the first half of a T clock cycle (i.e., signal FDFN1HT100 is a binary ONE), switches signal USEIC000 to a binary ZERO when signal FNEWIF1100 is switched to a binary ONE.</p><p>The second flip-flop register 750-92022 includes the pair of timing flip-flops which are both set to binary ONES in response to signal GATEHFTCLK100 from section 750-5 in response to 1/2T clock signal [CLKHT021. The flip-flops of register 750-92022 are reset to binary ZEROS in response to the next 1/2T clock signal [CLKHT021.</p><p>The flip-flops of register 750-92024, as mentioned previously, provide various state control signals. The first flip-flop (FRDIBUF) is switched to a binary ONE state when NAND gate 750-92060 forces signal SETRDIBUF100 to a binary ONE in response to read I buffer request from processor 700 (i.e., signal EXECRDIBUF000 is a binary ZERO) or an inhibit ready condition (i.e., signal FINHRDY010 is a binary ZERO) when AND gate 750-92061 forces signal ENABSETRDIBUF100 to a binary ONE. The signal ENABSETRDIBUF100 is forced to a binary ONE in the case of a command which is not a load quad command (i.e., signal FLDQUAD000 is a binary ONE) or an instruction fetch 1 command (i.e., signal GOODIF1000 is a binary ONE). The FRDIBUF flip-flop is reset a clock period later in response to T clock signal [CLKT021 via a second input AND gate.</p><p>The second flip-flop (FACTVRIC) of register 750-92024 is set and reset in accordance with the Boolean expressions previously given via the NAND gates 750-92062 and 750-92064, the AND gate 750-92063 and AND/NAND gate 750-92065. The third flip-flop (FRDDATA) is set to a binary ONE state via a first input AND gate in response to signal SETRDIBUF100 when the command is a load quad command (i.e., signal FLDQUAD100 is a binary ONE). The FRDDATA flip-flop is reset to a binary ZERO state a clock period later via a second input AND gate in response to the T clock signal [CLKT021.</p><p>The next group of circuits included within block 750-920 include the circuits of block 750-92070. As seen from FIG. 7e, these circuits include a first plurality of AND gates, AND/NAND gates and NAND gates 750-92071 through 750-92086, connected as shown. These gates generate control signals SETACURLEV100, [RICACNTL100 and RSTACURLEV2000 which control the setting and resetting of the current level and level valid bit positions of RICA register 750-900 in accordance with the states of signals SETALEV1VAL100, RSTALEV1VAL000 and SETLEV2VAL100. These signals are generated by another plurality of AND gates and NAND gates 750-92087 through 750-92095.</p><p>A second plurality of AND gates, AND/NAND gates and NAND gates 750-92100 through 750-92116, in a similar fashion, generates signals SETBCURLEV100, RSTBCURLEV200 and [RICBCNTL100 which set and reset the current level and valid bits for the RICB register 750-902 in accordance with signals SETBLEV1VAL100, RSTBLEV1VAL000 and SETBLEV2-VAL100. These signals are generated by another plurality of AND gates and NAND gates 750-92120 through 750-92125.</p><p>A plurality of AND gates 750-92126 through 750-92129, in response to signals SETALEV1VAL100, SETBLEV1VAL-100, SETALEV2VAL100 and SETBLEV1VAL100, generate control signals [RICALEV1100 through [RICBLEV2100 when signal [CANCELCMD000 is a binary ONE. These signals are applied to the control input terminals of the level bit storgae sections of the RICA and RICB registers 750-900 and 750-902 for controlling the loading of hit level signals from section 750-512.</p><p>A further plurality of AND/NAND, AND/OR gates and NAND gates 750-92130 through 750-92137, in response to signals from the level valid bit storage and level storage sections of registers 750-900 and 750-902, generate the use transit buffer ready signal USETBRDY100 and the control signals [ZRIB010 and [ZRIB100 which are applied to the circuits of block 750-114.</p><p>It is also seen that block 750-92070 includes a four D type flip-flop register 750-92140, the pair of AND gates 750-92141 and 750-92142, the pair of AND/NAND gates 750-92143 and 750-92144 and the pair of AND/OR gates 750-92145 and 750-92146, connected as shown. The flip-flops of register 750-92140 are loaded with the contents of bit positions 8 and 9 of the RICA and RICB registers 750-900 and 750-902 in response to T clock signal [CLKHT020 under the control of signals [RICA100 and [RICB100. That is, the top pair of register flip-flops are clocked when signal [RICA100 applied to terminal G1 is forced to a binary ONE while the bottom pair of register flip-flops are clocked when signal [RICB100 applied to terminal G2 is forced to a binary ONE. The signals [ZIC000 and [ZIC100 applied to terminals G3 and G4 control independently the generation output signals from the top pair of flip-flops and bottom pair of flip-flops respectively at the corresponding sets of output terminals.</p><p>Pairs of binary ZERO output signals are combined within AND gates 750-92141 and 750-92142 to generate address signals ZEXT0100 and ZEXT1100, in addition to those signals required for the generation of control signal NEXTLEVVAL100 which is applied to the control input terminals of comparator circuit 750-912.</p><p>A last group of circuits include a flip-flop register 750-92150 and a plurality of AND gates, an AND/NAND gate, NAND gates and AND/OR gates 750-92151 through 750-92156. These circuits are connected to generate signal IFETCHRDY-000 which is applied to the circuits of section 750-114. The gates 750-92153 and 750-92154 are connected to generate timing signals DFN2HT101 and FN2HT100 in response to signal FHT010 from block 750-112. These signals are forced to binary ONES during the second half of a T clock cycle of operation.</p><p>The flip-flop register 750-92150 is set to a binary ONE via a first input AND gate when AND gates 750-92151 and 750-92152 force signals SETINHRDY100 and CANCELINHRDY-000 to binary ONES. It is reset to a binary ZERO via a second input AND gate when NAND gate 750-92155 forces signal RSINHRDY000 to a binary ZERO. The binary ZERO output of register 750-92150 is applied to AND/OR gate 750-92156. When signal FINHRDY000 is forced to a binary ZERO, it causes gate 750-92156 to force signal IFETCHRDY-000 to a binary ONE state.</p><p>Additionally, FIG. 7e shows in greater detail the switch 750-910 and comparator circuits of blocks 750-912 and 750-914. The switch 750-910 is a crossbar switch which operates in the manner previously described. The W outputs select one of the two sets of signals applied to the A0 and A1 terminals in accordance with the state of signal [ZIC110. The X outputs select one of the two sets of signals applied to the A3 and A4 terminals in accordance with the state of signal [ZIC110. The Y and Z outputs select one of the four sets of signals applied to the A0-A4 terminals in accordance with the states of signals [ZIC110, [ZNICLEV100 and [ZIC110, ZCURLEV100.</p><p>The output signals ZNICLEV0100 through ZNICLEV2100 from the Y output terminals of circuit 750-910 are applied to the B input terminals of comparator circuit 750-912 for comparison with the signals RTBLEV0100 through RTBLEV2100 from section 750-102. The comparator circuit 750-912 is enabled when decoder circuit 750-922 has decoded an IF1 command (i.e., signal DECODEIF1010 is a binary ONE) and signal NEXTLEVVAL100 is a binary ONE. The comparison results in the generation of signals CMPDATA/ICLEV100 and CMPDATA/ICLEV000.</p><p>Other comparator circuits of blocks 750-912 and 750-914 operate in a similar manner to generate signals CMPCURLEV100 and CMPALTLEV100. In greater detail, another section of circuit 750-912 compares signals ZICLEV0100 through ZICLEV2100 with signals C7RR0100 through C7RR2100. When there is a true comparison, signal CMPCURLEV100 is forced to a binary ONE. This section is enabled via a NAND gate 750-91202 when either signal ZLEV1VAL000 or signal ZLEV2VAL000 is a binary ZERO.</p><p>The comparator circuit 750-914 has two sections enabled by pairs of signals ZCURLEV100, ZLEV1VAL100 and ZCURLEV000, ZLEV2VAL100 as shown. The first section compares level 1 signals ZLEV10100 through ZLEV12100 with round robin signals C7RR0100 through C7RR2100. When there is a true comparison, the output signal at the A=B terminal is forced to a binary ZERO which causes NAND gate 750-91402 to force signal CMPALTLEV100 to a binary ONE.</p><p>In a similar fashion, the second section compares level 2 signals ZLEV20100 through ZLEV22100 with round robin signals C7RR0100 through C7RR2100. When there is a true comparison, the output signal is forced to a binary ZERO which causes NAND gate 750-91402 to force signal CMPALTLEV100 to a binary ONE.</p><p>It is seen that FIG. 7e shows in greater detail the circuits of block 750-916. It is seen that the circuits include a pair of address comparator circuits 750-91600 750-91602. Each circuit is enabled by signal ENABADRCMP100 generated by series connected AND gate 750-91604 and NAND gate 750-91606. These gates force signal ENABADRCMP100 to a binary ONE when a read type command is decoded by the decoder circuit 750-922.</p><p>The NAND gates 750-91604 through 750-91608 force signal SKIPPRR100 to a binary ONE when either one of the comparator circuits 750-91600 and 750-91602 detects a comparison (i.e., signal CMPADR100 or signal CMPNXTBLK100 is forced to a binary ONE). The signal SKIPPRR100 is used to switch register flip-flop 750-91610 when an AND gate 750-91612 forces signal MISSING100 to a binary ONE in response to a miss condition being detected (i.e., signal HITTOIC010 is a binary ONE).</p><p>Additionally, the circuits of block 750-916 include a register flip-flop 750-91620, and AND gate 750-91622 and a pair of NAND gates 750-91624 and 750-91626. The flip-flop 750-91620 is set to a binary ONE state via a first input AND gate upon the decoding of a load quad command by decoder circuit 750-922 (i.e., signal DCDLDQUAD100 is a binary ONE) in the absence of a signal to cancel the command (i.e., signal [CANCELCMD000 is a binary ONE). The flip-flop is reset to a binary ZERO state via a second input AND gate when signal FE020 is forced to a binary ZERO.</p><p>As seen from FIG. 7e, the binary ONE output of the flip-flop 750-91620 when a binary ONE conditions AND gate 750-91622 to switch the flip-flop 750-91610 to a binary ONE state when signal DATA100 is a binary ONE. The NAND gate 750-91624 forces signal DATA100 to a binary ONE when either a pre-read or load quad command is decoded by decoder circuit 750-922. The NAND gate 750-91626 forces signal HOLDLDQUAD000 to a binary ZERO state when signal FLDQUAD100 as well as the other signals are binary ONES.</p><h4>DESCRIPTION OF OPERATION</h4><p>With reference to FIGS. 1-7e, the operation of the preferred embodiment of the present invention will now be described relative to the flow chart of FIG. 8.</p><p>By way of example, the processor 700 is going to process a move instruction having the format of FIG. 6c. This instruction is included in a repertoire of instructions having the capabilities for processing bytes, characters and bit strings termed an extended instruction set (EIS). The instruction has a multiword instruction format. The first word is a basic instruction word containing the operations code which is followed by first and second descriptor words. The bits 0-17 contain additional information concerning the operation. More specifically, the bits include an 8-bit fill character, a truncation fault enable bit and a 7-bit modification field coded to specify any address modification to be performed on an operand descriptor. Here, the field can be assumed as ZEROS.</p><p>Bits 18-27 include the op-code value coded to specify a move operation while bit 28 is an interrupt service bit which is assumed to have the value 1. Bits 29-35 correspond to another 7-bit modification field coded to specify the address modification to be performed for descriptor 1. It is assumed that this field contains all zeros.</p><p>The second word contains an 18-bit address for descriptor 1, a 3-bit CN1 field coded to specify the original character number within the word being referenced, a 2-bit TA field coded to specify which type of alphanumeric characters are in data and a 6-bit N1 field coded to specify the number of characters or bits in the data string or a register that contains the number of characters or bits. The maximum allowable length is 63 when only the N1 field is used. When the length value is furnished by a register, the maximum allowable length can approximate 2<sup>20</sup> characters. The TA field is coded as follows.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \nCode            Data Type                                                 \n______________________________________                                    \n00              9 bit                                                     \n01              6 bit                                                     \n10              4 bit                                                     \n______________________________________                                    \n</pre><p>The CN field for 9-bit character is coded as follows.</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \nCode          Character Number                                            \n______________________________________                                    \n000           0                                                           \n.             .                                                           \n.             .                                                           \n.             .                                                           \n110           3.                                                          \n______________________________________                                    \n</pre><p>The third word contains similar information for descriptors 2.</p><p>Starting at the location YC1, specified by descriptor word 1, the alphanumeric characters of data type TA1 of string 1 replace, from left to right, the alphanumeric characters of data type TA2 field of string 2 that starts at the location YC2, specified by descriptor word 2. If TA1 and TA2 fields are dissimilar, each character will have high-order truncation or zero-fill, as appropriate. That is, if length L1 is greater than length L2 then the truncation indicator is set, otherwise it is not. If the length of string 1 is greater than the length of string 2, the least significant (L1-L2) characters are not moved and the truncation indicator is set. If length L1 is less than length L2, the FILL character (assumed type TA2) is inserted as the least significant (L2-L1) characters. For further information regarding the subject instruction, reference may be made to the publication \"Series 60 (Level 66) 6000 Macro Assembler Program (GMAP)\" by Honeywell Information Systems, Inc. copyright 1977, order number DD08B, Rev. O.</p><p>It will be appreciated that processor 700 executes instructions in pipelined fashion which is illustrated in detail in the copending patent application \"A Microprogrammed Computer Control Unit Capable of Efficiently Executing a Large Repertoire of Instructions for a High Performance Data Processing Unit\", referenced herein.</p><p>As indicated herein, processor 700 carries out various operations during I, C and E cycles of operation in executing instructions. This results in the issuance of cache commands by processor 700 to cache unit 750 as described herein. It will be assumed that the next instruction which is a move instruction resides in cache store 750-300. Additionally, it is assumed that the operand data specified by descriptors 1 and 2 is not stored in cache store 750-300 but resides in main memory 800.</p><p>Referring to FIG. 8, it is seen that the first cycle pertinent to the processing of the move (MLR) instruction is an [end cycle which corresponds to a last cycle of the previous instruction. This cycle is established by forcing an [END control signal to a binary ONE in accordance with the following Boolean expression: [END=FESC100\u00b7DPIPE 1-4+ . . . The state flip-flop FESC is a binary ONE when the processor 700 is operating under microprogram control such as during the execution of a program instruction. Signal DPIPE1-4 is a binary ONE when bits 38-40 are coded to specify the restarting of the pipeline wherein the processor's registers are loaded with a new instruction (i.e., type 1). Since both FESC100 and DPIPE1-4 are binary ONES, the [END cycle is entered via the circuits of block 704-102.</p><p>During the [END cycle, the processor 700, under microprogram control, transfers signals corresponding to the first word of the move instruction into the RBIR, RSIR, RBASA, RRDXA and R29 registers of block 704-150 from the buffer 750-900 via the ZIB lines 0-39.</p><p>Assuming that the previous instruction was not a transfer instruction, the processor 700 applies a signal to the RDIBUF line. This increments by one the contents of the RICA/RICB instruction address register of section 750-9 for the read out of the next word of the move instruction (descriptor 1). Concurrently therewith the contents on the ZIB lines are loaded into the RBIR and RSIR registers in response to signals [$RBIR and [$RSIR generated by decoder 704-106 via switches 704-172, 704-170 and 704-173. Bits 0-2 are loaded into the RBASA register 704-144 and bits 32-35 are loaded into the RRDXA register 704-158 in response to signals [$RBASA and [$RRDXA via switches ZBASA, 704-175, 704-175, 704-176 and 704-177. Bit 29 is loaded into the R29 register in response to signal [R29 via switch 704-183.</p><p>Assuming that the previous instruction was not a transfer instruction or EIS instruction, the contents of the instruction counter 704-310 are incremented by one by adder 704-312 via position 3 of the ZIC-N switch 704-314 (i.e., 001 value).</p><p>Next, cycle FPOA is entered in response to the switching of the FPOA state flip-flop of block 704-102 of FIG. 3c. The FPOA flip-flop is set to a binary ONE under hardware control in accordance with the following Boolean expression:</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->SET=[HOLDI\u00b7(DIBFRDY\u00b7DIBFEMTY\u00b7[STRCPR\u00b7DXEDRPTS\u00b7DPIPE1-4).</pre><p>That is, the FPOA cycle is entered following an [END cycle when there is no hold condition relating to the pipeline (i.e., signal HOLDI00=1), the instruction buffer 750-900 is not empty (i.e., DIBFEMTY00=1), it has at least one instruction ready for transfer to processor 700 (i.e., DIBFRDY100=1), the previous instruction was not a store compare instruction (i.e., [STRCPR00=1) and the pipeline has been restarted (i.e., DPIPE1-4=1).</p><p>At this time the RBIR register 704-152 stores the move instruction op-code field as well as the address modification fields MF1 and MF2 for descriptors 1 and 2 respectively. During this cycle, the flag flip-flops FID and FRL are set by signals corresponding to bits 30 and 31 of the RBIR register 704-152 applied via the ZIDD switch 704-180 in response to [ZIDD generated by the circuits of block 704-124. Also, the R29 and RRDXA registers 704-162 and 704-158 are set by signals corresponding to bit 29 and bits 32-35 of the RBIR register 704-152 applied via ZIDD switch 704-180. Similarly, the RDESC1 flip-flop is reset to a binary ZERO as a consequence of the FPOA state flip-flop having been set to a binary ONE.</p><p>Under hardware control, the value \"00\" is forced into the RDESC register 704-170. That is, the RDESCO flip-flop of register 704-140 is set and reset in accordance with the following Boolean expression:</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \nSET: RDESCO = LARGECU field Misc. Reg + Small CU                          \n     field FMTD + DESC1 . (DNUM3EDIT) . FPOP.                             \nRE-                                                                       \nSET: RDESCO = FPOA + large CU field + small CU field.                     \n______________________________________                                    \n</pre><p>In this case, the RDESCO flip-flop is reset to a binary ZERO as a consequence of the FPOA state flip-flop of block 704-102 being a binary ONE.</p><p>The RDESC1 flip-flop is set and reset in accordance with the following Boolean expression:</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \nSET:        RDESCl = large CU field +                                     \n            small CU field +                                              \n             ##STR90##                                                    \nRESET:      FPOA + (DESCl \u00b7 (DNUM3EDIT) \u00b7               \n            FPOP) +  large CU field +                                     \n            small CU field.                                               \n______________________________________                                    \n</pre><p>Additionally, the contents of the next word (descriptor 1) of the move instruction applied to the lines ZIB 0-39 are loaded into the RSIR register 704-154 in response to control signal [$RSIR. Bits 0-2 are loaded into the RBASA register 704-156 from the ZIB lines while bits 21-22 corresponding to the TA1 field are loaded into the RTYP register 704-160 via the ZIB lines in response to the signals [$RBASA and [$RTYP generated by the circuits of block 704-106.</p><p>The TA1 field value of 00 specifying a 9-bit character is loaded into the RTYP register 704-160 via switches 704-178 and 704-179. ZEROS are also loaded into the RBASA register 704-156 via switches 704-174 and 704-175. Also, the circuits of blocks 704-108 and 704-128 force line RDIBUF to a binary ONE. This increments by one the contents of the RICA/RICB instruction address register read out of the third word of the MLR instruction (descriptor 2).</p><p>The op-code signals applied via the RBIR register 704-152 to the CCS store 704-200 cause the contents of the designated storage location to be read out into output register 704-202 upon the occurrence of a clocking signal.</p><p>As seen from FIG. 6a, the contents are coded to contain the following control information:</p><p>CCSO=000;</p><p>CCSR=0011; CCSS=111011 and</p><p>CCSI=don't care.</p><p>Since the field CCSO contains ZEROS, the FNUM flip-flop of block 704-104 remains a binary ZERO. The CCSR field is coded to designate a 3 word field and used to increment the instruction counter by the appropriate amount upon completion of the MLR instruction. Also, an alphanumeric type control (FTA) flip-flop is set to a binary ONE indicative of a 9 character to 9 character move.</p><p>The 10-bit op-code (bits 18-27) in the RBIR register 704-152 is transformed by the CCS store 704-200 into a 6-bit code suitable for controlling and selecting the proper control sequences. The CCSS field is decoded by the circuits of 704-100 and thereafter establishes the particular sequence as well as causing the FPOP flip-flop to be switched to a binary ONE. That is, the CCSS field when decoded indicates that the instruction type is an EIS MLR instruction.</p><p>The FPOP flip-flop is set and reset in accordance with the following Boolean expression:</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \n ##STR91##                                                                \n ##STR92##                                                                \n ##STR93##                                                                \n______________________________________                                    \n</pre><p>In this case, the FPOP state flip-flop is set since the FPOA flip-flop is set (FPOA=1), the CCS field specifies an EIS instruction (DEIS=1), the type is not bit stream (DBIT=1), there are instructions of a block ready to be transferred (IBUFRDY=1) and no descriptor is needed (i.e., [NEEDDESC=1).</p><p>During the first FPOP cycle, the address preparation unit 704-3 generates the address specified by the first descriptor word. That is, bits 0-20 (y) of the RSIR register 704-154 are applied as one input to adder 704-322 (i.e., descriptor address) via switch 704-326 and AND gates in response to R29 register 704-162. This value is added to the contents of the address register selected by the contents of the RBASA register applied via switch 704-328 when bit R29 is a binary ONE. Since bit R29 is a binary ZERO, the effective address corresponds to the descriptor address. The output of the switch 704-328 is ZEROS as it is disabled by the state of bit 29. The effective address value is added to an address modification field (X) selected via the ZX switch as a function of the contents of the RRDXA register 704-158, RTYP register 704-160 and FNUM flip-flop of block 704-104. Since these values are ZEROS, the address modification field is ZEROS.</p><p>The resulting value is then stored in the TEAO location as designated by the contents of the RDESC register 704-144 via switch 704-334. The adder 704-320 adds to the same resulting value a base value stored in a temporary base register specified by the contents of the RBASB register 704-144. It is assumed that the base value is ZERO. Thus, the resulting address corresponds to the descriptor address. The ZBASE value is also stored in the TBASEO register via switch 704-332.</p><p>Under hardware control, the processor 700 issues a cache load quad command to the cache unit 750 since the data type is 9 bits, RTYP=0, the length ZLN\u22600 and the string has not been exhausted (FE011=1). This command causes a first 4 word block of descriptor 1 data to be read from main memory 800.</p><p>The load quad command is generated as follows. The descriptor absolute address is loaded into the RADO register via the ZADOB switch in response to the signal [$RADO generated by the decoder circuits 704-124. Additionally, the command bits 1-4 and zone bits 5-8 are applied through the switch 704-40 in place of bits 1-8 from switch 704-46 while bits 0 and 9 are forced to ZEROS. The bits 1-4 from the RMEM register 704-130 are converted to a command code of 0111 by the decoder circuits of block 704-118. This command code specifies a memory read quad operation. Zone bits 5-8 are set to binary ONES via the input switch 704-40 and are not used for a read. Simultaneously therewith, the circuits of block 704-108 generate the load quad code of \"0110\" which corresponds to the signals [MEMOTB through [MEM3TB. These signals are generated in accordance with the following Boolean expressions:</p><p></p><pre listing-type=\"tabular\" xml:space=\"preserve\"><!--Greenbook tabular data-->______________________________________                                    \n[MEM0TB            = 0                                                    \n[MEM1TB             = FPOP \u00b7 DESCO \u00b7 FE11N \u00b7   \n                   MLR                                                    \n[MEM2TB                                                                   \n[MEM3TB            = 0                                                    \n______________________________________                                    \n</pre><p>Since the FPOP flip-flop is set, the instruction is an MLR, the descriptor length is not zero (DLNNZ=1 established by FIGNLEN control flag), the signals [MEM1TB and MEM2TB]binary ONES when the first flip-flop descriptor field (DESCO=1) being processed has not been exhausted (FE11N=0). Obviously, these values can be assumed to be all binary ONES at the start of instruction processing.</p><p>These signals are thereafter loaded into the RMEMO-3 register 704-130 via decoder 704-116. The contents of the RMEMO-3 register 704-130 are in turn applied to the DMEMO-3 lines. Also, the circuits of block 704-108 generate signals which force the RSZ register 704-132 to the value \"00\". The contents of this register are applied to the DSZ lines to specify a full word write (not used for generation of load quad commands). The decoder 704-120 forces the DREQCAC line to a binary ONE upon decoding the DMEM command stored in the register 704-130. The BYPCAC line can be assumed to a binary ZERO throughout the example.</p><p>During the FPOP cycle, signals corresponding to the TA1 field are transferred from the RTYP register 704-160 via a switch within unit 720 in accordance with the state of the RDESC register 704-140. The signals have a value of \"00\" signifying that the descriptor 1 data field is made up of 9-bit characters. Also, signals corresponding to the N1 field representative of the length of operand 1 are transferred from the RSIR register 704-154 via the ZLN switch 722-82 into a length register (RLN1) included within unit 722. These signals are used for a bounds checking operation during the next cycle, which will not be discussed further herein.</p><p>A character pointer RCN1 register within character unit 720 is loaded with the value which corresponds to the CN1 field of descriptor 1 applied via the lines ASFA 34-36 and RAD register 720-24 from the TEAO register of bank 704-302 which had stored descriptor 1. This value points to the character of the first data word of descriptor 1 as the starting character to begin processing. An RPO register within a memory bank of unit 722 is loaded with the character pointer value via the lines ASFA 33-35 for the temporary storage thereof.</p><p>Next, signals corresponding to the MF2 field are transferred to the R29 register 704-162, the RRDXA register 704-158, the FID and the FRL flip-flops of block 704-110. Again, the signals are applied via the ZIDD switch 704-185 from bit positions 11-17 of the RBIR register 704-152. These values are assumed to be all ZEROS indicating that there is no modification for descriptor 2 data. The RDESC register 704-140 is loaded under hardware control with the value \"01<sub>2</sub> \" for designating a descriptor 2 operation. Here, the RDESCO flip-flop remains reset while the RDESC1 flip-flop is set to a binary ONE since descriptor 1 has been processed (DESCO=1), the cycle is a FPOP cycle (FPOP=1) and the instruction is not a memory type instruction (MEM to MEM or MEM to REG-MTMMRT=1).</p><p>At the same time the next descriptor value for descriptor 2 is being fetched, portions of the descriptor are being saved for later testing by processor 700 under microprogram control. That is, the descriptor 2 contents applied to the ZIB lines are loaded into the RSIR register 704-154 while bits 0-2 and 21-22 from the ZIB lines are loaded into the RBASA register 704-156 and the RTYP register 704-160 respectively.</p><p>At this time, the RSIR register 704-154 contains descriptor 2, the R29 register 704-156 contains ZEROS indicating no address register modification and the RTYP register 704-160 contains ZEROS indicating that the descriptor 2 data field is made up of 9-bit characters. As mentioned, the cycle arrangement of the preferred embodiment divides a T clock cycle into first and second halves. That is, when signal FHT100 is a binary ONE, this defines the first half of T clock cycle. When signal FHT100 is a binary ZERO, this defines the second half of a T clock cycle.</p><p>During the first half of the T clock cycle, either instructions are fetched or memory data is written into cache store 750-300. In both cases, the level to be accessed is already established. That is, for instructions, the level is stored in either the RICA or RICB instruction address register at the time an IF1 or IF2 command received from processor 700 was executed. For memory data, the level is stored in one of the register locations of transit block buffer 750-102 as a result of the circuits of block 750-520 having detected a miss condition which caused cache 750 to fetch the requested data from memory. During the second half of a T clock cycle, either operand data is accessed from cache or processor data is written into cache in accordance with the results of a directory search.</p><p>It is assumed that prior to the generation of the load quad command, processor 700 had been fetching instructions from cache store 750-300 using the address and level information contained in RICB register 750-902.</p><p>The load quad command upon receipt by cache unit 750 is decoded by the decoder circuits 750-922. In accordance with the present invention, as seen from FIG. 7e, the signal DCDLDQUAD100 generated by decoder circuits 750-922 forces the LDQUAD flip-flop 750-91620 to a binary ONE state. Additionally, the decoder circuits 750-922 in response to the LDQUAD command cause the circuits of block 750-920 to generate signals for loading the alternate instruction address register which is assumed to be RICA with signals corresponding to the incremented value of the address included within the load quad command. That is, during the first T clock cycle, the address signals from switch 750-530 are incremented by one by circuit 750-912 and loaded into the address bit positions of RICA instruction address register 750-900 in response to 1/2 T clock signal [CLKHT100 when signal [RICA100 is a binary ONE. The signal [RICA100 is forced to a binary ONE by the circuits 750-920 when signal ENBSTRBA000 of FIG. 7d is forced to a binary ZERO during the first half of the first T clock cycle.</p><p>The load quad command address is also applied as an input to the directory circuits of block 750-502 via ZDAD switch 750-530 for a search cycle of operation. Since the data block is not in cache, the circuits of block 750-512 generate the appropriate hit signals RAWHIT00, HITTOTB010 and HITTOIC010 indicative of a miss condition which are applied to sections 750-1, 750-5 and 750-9.</p><p>In the case of a miss condition, the circuits of block 750-526 of FIG. 7c switch the directory assignment flip-flop 750-52600 to a binary ONE in response to signal RAWHIT000 which is a binary ONE. The signal ALTHIT000 which is a binary ONE causes the round robin signals read out from directory 750-500 to be loaded into register 750-50400. The round robin signals are incremented by one so as to indicate the next level for replacement and are written back into directory 750-500 at the addressed location.</p><p>Also, the round robin signals from register 750-50400 are applied as signals TBRR0100-2100 to transit block buffer 750-102 for subsequent loading therein.</p><p>Also, the full-empty bits and high order bits of the LDQUAD command address (i.e., bits 10-23) are written into directories 750-500 and 750-502 at the location specified by the low order bits of the load quad address (i.e., bits 24-33). On the next T clock, the FDIRASN flip-flop resets to a binary ZERO completing the directory assignment cycle.</p><p>It will be appreciated that due to the miss condition, the decoding of the load quad command causes the level 1 valid bit and hit/miss positions of the RICA instruction address register 750-900 to be set to a binary ONE and binary ZERO (i.e., hit signal HITTOC7100 is a binary ZERO). Accordingly, the level signals loaded into the level 1 bit positions of RICA instruction address register 750-900 are ignored since the processor 700 is signalled subsequently to pull the block of data words fetched in response to the load quad command from the LQBUF buffer 750-706 and not from cache store 750-300 (i.e., signalled via the USETBRDY line) as explained herein.</p><p>Prior to the switching of the FLDTBVALID flip-flop 750-11414 of FIG. 7a, before the directory assignment cycle, the write address signals FTBPTR0100-1100 from in pointer 750-106 are decoded which results in the writing of the LDQUAD command address into the next available location of transit block buffer 750-102. That is, on the T clock that completes the directory search, one of the transit block locations of buffer 750-102 is loaded with the LDQUAD address signals as a consequence of the miss condition. At that time, a corresponding location in the command queue 750-108 is loaded with the necessary control information required for transferring the LDQUAD command to memory.</p><p>Signal HOLDLDQUAD000 is forced to a binary ZERO by the NAND gate 750-91626 in response to processor 700 forcing signal RDIBUF/ZDI100 to a binary ONE. This causes the AND/NAND gates 750-11714 through 750-11716 to force the internal hold signals [HOLDDMEM000-003 to binary ZEROS. This holds up further operations being performed by cache sections 750-1, 750-5 and 750-9 until it is determined that the requested data word has been fetched from memory as explained herein.</p><p>Since signal [HOLDMEM000 is a binary ONE on the T clock, the FLDTBVALID flip-flop 750-11414 is set to a binary ONE. That is, in the case of a miss condition, signal HITTOTB010 causes the FLDTBVALID flip-flop 750-414 of FIG. 7a to switch to a binary ONE on the T clock when the FDIRASN flip-flop is set. On the next T clock, this causes the contents of in pointers 750-106 and 750-108 to be incremented by one in preparation of the next command. The appropriate control flag bits are set and written into the buffer flag section of transit block buffer 750-102.</p><p>As seen from FIG. 7a, the decoding of the LDQUAD command by decoder circuits 750-113 switches the FLDQUAD flip-flop 750-11422 to a binary ONE state in the case of a miss condition (i.e., signal SETLDTBVALID100 is a binary ONE). Additionally, the FLDQUAD flip-flop 750-11422 switches to a binary ONE in response to signal LDQUAD100 from decoder circuits 750-113. Also, the signals LDQUAD100 and RLDQUADFLG100 cause the circuits of block 750-113 of FIG. 7a to force signals [LQBUF100 and RESETBUF100 to binary ONES. As seen from FIG. 7d, these signals reset the memory locations of LDQUAD buffer 750-706 to binary ZEROS.</p><p>The write flag and load quad flag bit positions of flag storage 750-10238 are forced to binary ONES as a result of signals FORCEBYP000 and FLDQUAD100 being binary ONES. The signal FORCEBYP000 is generated by the AND circuit 750-52630 and is normally a binary ONE. The signal FLDQUAD100 is generated by the FLDQUAD flip-flop when the FLDTBVALID flip-flop 750-11424 switches to a binary ONE.</p><p>On the T clock of the directory assignment cycle, the LDQUAD command is read out from transit block buffer 750-102, in response to out pointer address signals from command queue 750-107, into the RDTS register 750-119 via the ZTBC position of ZDTS switch 750-118. The level signals TBRR0100-2100 are loaded into the addressed transit buffer location on the 1/2 T clock. The LDQUAD command is transferred to SIU100 on the DTS lines via switch 750-120 of FIG. 4. The appropriate memory identifier signals are loaded into the RMITS register 750-124 and steering signals into the steering register (not shown). These signals are applied to the MITS and SDTS lines, respectively. For further information regarding the generation and use of steering signals, reference may be made to U.S. Pat. No. 4,006,466.</p><p>Now, when the pairs of data words of the block are transferred to cache unit 750, bit 1 of the RMIFS line and signals FARDA000 and FDPFS100 are coded to specify which pair (normally even/odd wherein 0=even=words 0, 1 and 1=odd=words 2, 3) and which word of the pair are being transferred. From FIG. 7a, it is seen that comparator circuit 750-11437 is enabled when signal DATA100 is a binary ONE.</p><p>Referring to FIG. 7e, it is seen that the states of the signals ZLEV1LOC000 and ZLEV1LOC100 generated by AND/NAND gate 750-92130 in accordance with the setting of the hit/miss bit position of RICA instruction address register 750-900 conditions the AND/OR gate 750-92137 to force signal USETBRDY100 to a binary ONE. This signal, generated by the circuits of block 750-920, indicates that the cache unit 750 is waiting for data written into the LDQUAD buffer 750-706.</p><p>The signals ZEXT0100 and ZEXT1100 generated from bit positions 8 and 9 of the RICA instruction address register 750-900 by the circuits of block 750-920 are compared with signals MIFS1100 and DATAODD100 for indicating when the data word requested is the one that is being received.</p><p>When the comparator circuit 750-11437 establishes that the data word being written into the LDQUAD buffer 750-706 is the same as the data word requested and the read load quad signal RLDQUADFLG100 read out from memory 750-10238 is a binary ONE, the circuit 750-11437 forces signal LQCMPR000 to a binary ZERO slightly before the occurrence of the 1/2 T clock. This causes NAND gate 750-91626 to force signal HOLDLDQUAD000 to a binary ONE releasing processor 700 from its hold condition.</p><p>Referring to FIG. 7d, it is seen that signals ZEXT0100 and ZEXT1100 condition the different memory chips for simultaneous read out of the contents of a designated one of the four locations. When a data word is being written into the addressed location, the appropriate valid bit signal read out from that location is forced to a binary ZERO (i.e., signal LQBUFV000).</p><p>In greater detail, it will be assumed that the first data word received is the even word of the first pair. In response to the signal applied to the ARDA line, the even word of the first pair is loaded into the RDFS register 750-702 on the T clock. On a first 1/2 T clock, the contents of the RDFS register are written into LDQUAD buffer 750-706 at the even location for the pair specified by the states of signals FARDA000, FDPFS100, and RMIFS1100 and the valid bit signal LQBUFV000 for that location is set to a binary ZERO.</p><p>If the processor 700 is waiting for the even data word, the circuits of block 750-114 force the LQCMPR000 to a binary ZERO. On the second 1/2 T clock, the contents of the RDFS register 750-702 are written into the odd location for the pair, and the valid bit signal LQBUFV000 is set to a binary ZERO.</p><p>The above operations are repeated for the second pair of data words. When the odd word of the second pair is written into the LDQUAD buffer 750-706 into the location specified by signals FARDA000, FDPFS100, and RMIFS1100, the transfer is complete at which time the transit block valid indicator flag associated with the command is reset to a binary ZERO. Since the cache write flag for the command was set to a binary ONE, the data words are also written into cache store 750-300 via RDFSB register 750-712 on the 1/2 T clock. This completes the execution of the first LDQUAD command by cache unit 750.</p><p>The same type of operations executed during the FPOP1 cycle are performed during the FPOP2 cycle with the exception that no load quad command is issued for the address generated using descriptor 2.</p><p>Signals corresponding to the Y address value of descriptor 2 (RSIR0-20) loaded into the RSIR register 704-154 during the second FPOP cycle are transferred via the ZY switch 704-326 for combination with index (X) or address register (AR) values from ZX switch 704-58 and register bank 704-304 respectively by adder 704-322. Since there is no index or address register modification (MF2=0), the values applied to the ZAR0-23 lines and ZX0-20 lines are ZEROS. Thus, the descriptor 2 address value is transferred to the TEA1 location of bank 704-302 selected by the contents of the RDESC register 704-144 and to the RADO register 704-46 via the ASFA lines and adder 704-320. It will be appreciated that the appropriate base value is added to the descriptor 2 address in the same manner as described previously in connection with descriptor 1.</p><p>Also, during the second FPOP cycle, the RTF2 register 720-46 is loaded with signals corresponding to the TA2 field via the RTYP register 704-160. Again, the \"00\" value indicates that the descriptor 2 data consists of 9-bit data characters. The RLN2 register within the character unit 722 is loaded with signals corresponding to the N2 field from the RSIR lines. This value indicates the length of the descriptor 2 data field.</p><p>Additionally, the RCN2 register 720-30 is loaded with the character pointer value via the ASFA 34-36 lines. This indicates which character of the first data word of descriptor 2 is the first character in the field to be processed. Also, the RP1 and RP6 registers within character unit 722 are loaded with the character pointer value and a word pointer value for the temporary storage thereof. Again, the RDIBUF line is forced to a binary ONE for advancing the RICB instruction register to point to the next instruction. Additionally, address bits from the RADO register are loaded into flip-flops (not shown) for bounds checking.</p><p>During the FPOP2 cycle, under microprogram control, the length value and character starting position values are combined in an adder AL and the result is saved in a register bank within character unit 722.</p><p>This is done to determine whether an exhaust condition is going to occur during the first cycle. As mentioned, the value 16 represents the number of bytes.</p><p>As seen from the flow chart of FIG. 8, a FESC cycle is entered upon the switching of the FESC control state flip-flop to a binary ONE. The FESC flip-flop is set and reset in accordance with the following Boolean equations:</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->SET:FESC=[HOLDI(FPOP\u00b7SETFPOP).</pre><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->RESET:FESC=DPIPE0-5.</pre><p>In this case, the FESC flip-flop is set since the FPOP flip-flop is set (FPOP=1) and the flip-flop is not going to be set again (SETFPOP=1) as it is assumed that there is no operation start specified by microprogram control (see Boolean expression--DPIPE field).</p><p>During this cycle, the length of string 1 is compared to that of string 2. When lengths of string 1 and string 2 are not equal, either the truncation indicator is set or zero fill indication is generated. Assuming both lengths are equal, neither occurs. Since there is no indirection, no length in the register, etc., this indicates that there are less than 4,095 bytes to be moved (i.e., length register is 12 bits in length--2<sup>12</sup>).</p><p>As seen from FIG. 8, since the TA1 field tested via the vector branch circuits of block 701-1 has stored the value \"00\" specifying 9-bit data characters, the processor 700 branches to an A5 cycle of operation. During this cycle, under control of a microinstruction word having a type A=4 field, a 16 way vector branch based upon the starting character positions (i.e., relationship of OP1 to OP2) is performed so as to determine which way the data characters are to be shifted in order to align them properly. Also, the RDESC and RBASB registers are set to the value \"01\" for selection of descriptor 2 temporary registers.</p><p>Assuming the case where OP1 starts with byte 1 of word 0 and OP2 starts with byte 2 of word 0, the branch is to cycle A12. This cycle starts a sequence of cycles wherein processor 700 moves the fetched descriptor 1 data characters to the locations specified by the address field of the second descriptor. During the processor's execution of the move operation, the N1 and N2 length values are each decremented to keep track of the number of characters which have been processed. This operation continues until the receive string value N1 is exhausted.</p><p>Since the details of this operation are not pertinent to an understanding of the present invention, the operation will only be briefly described. The operation is pertinent only to the extent that it results in the generation of further LDQUAD commands required for fetching additional descriptor 1 data characters as explained herein.</p><p>As seen from FIG. 8, processor 700 generates a write double zoned command under microprogram control. More specifically, processor 700 forces bits 5-8 to a value 1111 specifying the bytes of each word of the pair of words to be written at the descriptor 2 address in response to the write command. An output zone network included in unit 722 in response to the values stored in the RP6 register and RLN2 register generates an 8-bit field indicating which byte in memory is to be overwritten. Also, processor 700 under microprogram control forces command bits 1-4 to a code of 1101 specifying that the ZAC command is a write double zoned type. The descriptor 2 address read out from the TEA1 register is added to the base value stored in the TBASE1 register and the resulting write address is loaded into RADO register 704-46.</p><p>The ZAC command is then forwarded to cache unit 750 for processing. Additionally, processor 700, under the control of the MEMADR field, forces the DMEM lines to a code of 1110 signalling the cache unit 750 that it is to execute a write double operation. Further, it forces the DREQCAC line to a binary ONE, signalling the cache unit 750 of the command being applied to the ZADO/RADO lines.</p><p>When the data words requested by the LDQUAD command issued cache 750 do not reside in cache, this causes the generation of signal CPSTOP000 via signal HOLDLDQUAD000 when processor 700 forces signal RDIBUF/ZDI100 to a binary ONE. This causes the processor 700 to stop further operations until the requested data words have been stored in cache unit 750.</p><p>As seen from FIG. 7e, the HOLDLDQUAD000 signal is forced to binary ONE as soon as signal LQCMP000 switches to a binary ZERO indicating that the data word requested by processor 700 resides in the LDQUAD buffer 750-106. Thereafter, valid bit signal LQBUFV000 switches to a binary ZERO holding signal HOLDLDQUAD000 at a binary ZERO. At the same time, the write double zone command is generated.</p><p>The signal RDIBUF/ZDI100 also causes the data word specified by signals ZEXT0100 and ZEXT1100 to be read out via the ZDIN switch and position 3 of the ZDI switch and clocked into the processor's RDI data register on the T clock. Also, the address contents of the RICA register are incremented by one.</p><p>The processor 700 applies the operand 1 values stored in RP4 and RXPA to an input zone network. Also, the exhaust indicator will be set as a function of the length of the operand 1. If there is a string/operand 1 exhaust condition, fill characters will be forced in at the appropriate places. For example, if the length of string 2 is 1000 bytes and string 1 is 3 bytes, this means that 3 bytes of data are moved and the remaining 997 bytes would be fill characters.</p><p>As seen from FIG. 8, after completing the A12 cycle, processor 700 begins cycle A20. Again, signal RDIBUF/ZDI100 is forced to a binary ONE to fetch the next data word since a write double command was issued previously. Again, the input network is controlled by the values stored in RXPA and RP4. The first data word is transferred from the RDI data register into a temporary register TR3 within unit 714. Also, the contents of TR3 and RDI registers are shifted if alignment is required and the resulting first data word of the write double command is loaded into the RADO register for transfer to cache unit 750 during the next cycle. Also, the length value for string 2 is decremented by 4 (1 word). No shifting actually takes place when the starting addresses of the two strings are identical.</p><p>Since it is assumed that there is no exhaust condition, processor 700 beings cycle A20. The second data word in the RDI data register and contents of TR3 are shifted in the appropriate direction when required to align the two strings. The result is then loaded into RADO register 704-46 for transfer to cache unit 750 during the next cycle. Assuming that string 2 is not exhausted, processor 700 sequences to the next microinstruction word to begin cycle A22.</p><p>It will be noted that the operations performed in this cycle are the same as those in cycle A12. That is, processor 700 generates another write double zoned command and signal RDIBUFI100 is forced to a binary ONE. This occurs until the data words fetched by the load quad command is exhausted. It will be appreciated that where both strings are perfectly aligned, processor 700 is operative to generate two write commands for one load quad command. In other cases where the strings are misaligned significantly, two load quad commands are generated.</p><p>During cycle A22, the descriptor 2 address read out from the TEA1 register is incremented by 2 (word) via adder 704-322 and the result is written back into the TEA1 register. The base value stored in the TBASE1 register is added to the incremented address by adder 704-320 and the resulting address is loaded into RADO register 704-46. As in cycle A12, the values are applied to the input and output zone networks and any exhaust conditions are set.</p><p>During cycle A23, the same operations indicated in cycle A20 are performed. The next data word is fetched and the first data word of the second write command is loaded into RADO register 704-46. Assuming no exhaust, processor 700 begins cycle A24. Similar to cycle A21, the second data word of the second write command is generated and loaded into the RADO register 704-46. Also, the RDESC and RBASB registers are loaded with the value \"00\" to select the temporary registers of the first descriptor. Assuming no exhaust, the processor 700 begins cycle A25.</p><p>During this cycle, the descriptor 1 address read out from the TEA0 register is incremented by 4 via adder 704-322 and the result is written back into the TEA0 register. The incremented address is added to the base value string in the TBASE0 register and the resulting address is loaded into the RADO register 704-46. Under microprogram control, processor 700 generates a second load quad command by forcing command bits 1-4 to a code of 0111 specifying that the ZAC command is forwarded to the cache unit 750 for processing.</p><p>Additionally, processor 700, under the control of the MEMADR field, forces the DMEM lines to a code of 0110 signalling the cache unit 750 that it is to perform a load quad operation. Also, it forces the DREQCAC line to a binary ONE signalling the cache unit 750 of the command.</p><p>During this cycle, the processor 700 decrements the length value of string 1 by 16, sets any exhaust condition detected and forces the RDESC and RBASB registers to the value \"01\". As seen from FIG. 8, following the generation of the second load quad command and transfer of data words such as indicated in cycle A22, the processor 700 returns to cycle A20. These cycles are repeated until either string 1 or string 2 exhausts. As mentioned, if string 1 exhausts, the operation continues and fill characters are used. However, when string 2 exhausts, the EXH2 indicator is set to a binary ONE, a branch is executed following cycle A24 and processor 700 begins cycle K3A. This cycle corresponds to a short termination routine wherein the truncation indication is set and the next instruction is pulled in together with starting the pipeline (see [END cycle).</p><p>It will be appreciated that the execution of the above operations can result in the generation of a substantial number of load quad commands. This, in turn, can result in the replacement of a substantial number of data words within cache store 750-300. In accordance with the teachings of the present invention, such replacement is inhibited following receipt of the first load quad command.</p><p>Referring to FIG. 7e, it will be noted that the second load quad command generated by processor 700, during cycle A25, upon being decoded, causes AND gate 750-91622 to force signal SKIPRD100 to a binary ONE. The binary ONE state of the FLDQUAD flip-flop 750-91620 indicates that a first load quad command had already been processed. This signal together with signal MISSING100 switches FSKIPRR flip-flop 750-91610 to a binary ONE.</p><p>The flip-flop 750-91610 when set to a binary ONE inhibits any subsequent block of data from being written into cache store 750-300 in the following manner.</p><p>The signal FSKIPRR000 is applied to the circuits of section 750-5 of FIG. 7c. During the directory assignment cycle for the miss, these circuits are inhibited from making an entry into directories 750-500 and 750-502. In greater detail, it is seen that signal FSKIPRR000, when a binary ZERO, causes AND gate 750-52624 and AND gate 750-52628 to force signal FEDCODE100 and signal DIREADDE100, respectively to a binary ZERO.</p><p>This disables the decoder circuits 750-52000 and 750-521 from generating write signals RWFE0100-RWFE7100 and R/WV0100-R/WV7100. The result is that no changes are made to the full-empty bits or address signals contained in the locations of directories 750-500 and 750-502 being addressed by the read command address applied by processor 700 via the RADO lines 24-35.</p><p>Additionally, it will be noted that in the case of a miss (i.e., signal ALTHIT000 is a binary ONE), the round robin signals RR0100-RR3100 are loaded into register 750-50400. During the directory assignment cycle, these signals are incremented by one by adder circuit 750-508 to produce signals NXTRR0100-2100 which are applied to the round robin section of directory 750-500. The signals NXTRR0100-2100 are written into the location specified by the load quad command address in response to signal RWRR100. This, in effect, skips over the block which was the candidate for replacement.</p><p>It is also seen from FIG. 7c that signal FSKIPRR000 when a binary ZERO causes AND gate 750-52630 to force bypass signal FORCEBYP000 to a binary ZERO. The result is that the write cache flag bit of the transit block location into which the read command is stored is not set to a binary ONE state. This means that when the data words are received from memory, the circuits of block 750-115 are inhibited from forcing memory write request signal MEMWRTREQ100 to a binary ONE. Hence, the data words of the requested block are not written into cache store 750-300.</p><p>In the same manner, each group of data words requested by a load quad command are prevented from being written into cache store 750-300. This continues until string 2 is exhausted. This causes processor 700 to switch FE020 to a binary ZERO resetting the LDQUAD flip-flop 750-91620 to a binary ZERO state completing the execution of the MLR instruction.</p><p>From the foregoing, it is seen how the arrangement of the present invention precludes the replacement of large amounts of information with the information that is being transferred by an MLR instruction. In the particular embodiment disclosed, the MLR instruction is readily identified in that it is the particular instruction which causes processor 700 to generate a load quad command. Obviously, other types of instructions could be similarly microprogrammed to generate such commands preventing replacement of large amounts of data blocks.</p><p>It will be obvious to those skilled in the art that many changes may be made to the preferred embodiment without departing from the teachings of the present invention. For example, it may be desirable in some cases to write in a large portion of the data being transferred. This could be done by either having the number of load quad commands reach a certain number established by a counter or by only skipping certain blocks.</p><p>Additionally, it will be appreciated that all such commands may be generated under hardwired control. Further, it is possible to have different types of commands specifying the fetching of data words used to identify an MLR instruction or similar types of instructions within a given class. Other changes and modifications will occur to those skilled in the art.</p><p>For further information regarding the different sections of processor 700 and cache unit 750, reference may be made to the copending patent applications listed in the introductory portion of this application.</p><p>While in accordance with the provisions and statute, there has been illustrated and described the best form of the invention known, certain changes may be made to the system described without departing from the spirit of the invention as set forth in the appended claims and that in some cases, certain features of the invention may be used to advantage without a corresponding use of other features.</p><?DETDESC description=\"Detailed Description\" end=\"tail\"?></description>"}], "inventors": [{"first_name": "Marion G.", "last_name": "Porter", "name": ""}, {"first_name": "Robert W.", "last_name": "Norman, Jr.", "name": ""}, {"first_name": "Richard T.", "last_name": "Flynn", "name": ""}], "assignees": [{"first_name": "", "last_name": "", "name": "HONEYWELL INFORMATION SYSTEMS INC."}], "ipc_classes": [{"primary": true, "label": "G06F  13/00"}, {"primary": false, "label": "G11C   9/06"}], "locarno_classes": [], "ipcr_classes": [{"label": "G06F  12/12        20060101A I20051008RMEP"}], "national_classes": [{"primary": true, "label": "711138"}, {"primary": false, "label": "711E12075"}, {"primary": false, "label": "711113"}, {"primary": false, "label": "711114"}], "ecla_classes": [{"label": "G06F  12/12B6"}], "cpc_classes": [{"label": "G06F  12/126"}, {"label": "G06F  12/126"}], "f_term_classes": [], "legal_status": "Expired - Lifetime", "priority_date": "1979-01-22", "application_date": "1979-01-22", "family_members": [{"ucid": "CA-1123517-A1", "titles": []}, {"ucid": "US-4268907-A", "titles": [{"lang": "EN", "text": "Cache unit bypass apparatus"}]}, {"ucid": "CA-1123517-A", "titles": [{"lang": "FR", "text": "APPAREIL D'EVITEMENT D'ANTEMEMOIRE"}, {"lang": "EN", "text": "CACHE UNIT BYPASS APPARATUS"}]}, {"ucid": "AU-5439380-A", "titles": [{"lang": "EN", "text": "CACHE UNIT BYPASS APPARATUS"}]}, {"ucid": "AU-532115-B2", "titles": [{"lang": "EN", "text": "CACHE UNIT BYPASS APPARATUS"}]}]}